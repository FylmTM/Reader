<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Julia Evans]]></title>
  <link href="http://jvns.ca/atom.xml" rel="self"/>
  <link href="http://jvns.ca"/>
  <updated>2019-12-05T10:41:54+00:00</updated>
  <id>http://jvns.ca</id>
  <author>
    <name><![CDATA[Julia Evans]]></name>
  </author>
  <generator uri="http://gohugo.io/">Hugo</generator>

  
  <entry>
    <title type="html"><![CDATA[Challenge: find Twitter memes with suffix arrays]]></title>
    <link href="https://jvns.ca/blog/twitter-memes-challenge/"/>
    <updated>2019-12-05T10:41:54+00:00</updated>
    <id>https://jvns.ca/blog/twitter-memes-challenge/</id>
    <content type="html"><![CDATA[

<p>This challenge is a mix of data analysis and using fun algorithms! It&rsquo;s the second challenge in a a short series of programming challenge I&rsquo;m writing with Julian. (the <a href="https://jvns.ca/blog/2019/11/25/challenge--make-a-bouncy-window-manager/">first one was to write a tiny fun window manager</a>)</p>

<p>Twitter has a lot of memes. For example, if you search Twitter for <a href="https://twitter.com/search?q=%22attendant%3A%20is%20there%20a%20doctor%20on%20%22&amp;src=typed_query&amp;f=live">Flight attendant: is there a doctor on this flight?</a>,
you&rsquo;ll find a bunch of tweets making jokes like this:</p>

<pre><code>Flight Attendant: is there a doctor on board?
Parent: *nudging* That should've been you
Me: Not now, this is serious
Parent: Not asking for a hacker to help, are they?
Me: AAAAAAAA\x00\xd0X?\xfc\x7fBBBBj\x0bX\x99Rfh-p\x89\xe1Rjhh/bash/bin\x89\xe3RQS\x89\xe1\xcd\x80
Parent:~#
</code></pre>

<p>or if you search <a href="https://twitter.com/search?q=%22as%20a%20kpop%20fan%22&amp;src=typed_query">as a kpop fan</a> there are thousands of these:</p>

<pre><code>me as a kpop fan 

- kpop fan age: 10 years
- first group ever stan: super junior
- current ult groups: iKON, X1, Day6
- number of albums: &gt;20 
- concerts attended: 6
- lightsticks owned: 2
</code></pre>

<p>So! Suppose you have a million tweets from the last 2 days. How do you find
the jokes / quizzes / memes people are playing with on Twitter?</p>

<h3 id="challenge-find-the-twitter-memes-in-1-million-tweets">Challenge: find the twitter memes in 1 million tweets</h3>

<p>This is a pretty open ended challenge and you can do it any way you want.
Here&rsquo;s a <a href="https://www.dropbox.com/s/5xnaf1mbdr1424p/twitter.db.gz?dl=0">SQLite database with 1.2 million tweets</a>, collected
from the <a href="https://developer.twitter.com/en/docs/tutorials/consuming-streaming-data">twitter streaming api</a> over 2 days.
It&rsquo;s 250MB (70MB compressed), it only has English tweets. It excludes retweets and many tweets that are generated by bots.</p>

<p>The challenge: find at least 5 Twitter memes using that dataset.</p>

<h3 id="memes-as-common-substrings">memes as common substrings</h3>

<p>The idea here is that memes are substrings like &ldquo;me as a kpop fan&rdquo; that many
different people are using. The tricky thing is that you don&rsquo;t really know how
long those substrings will be, and maybe you&rsquo;re interested in phrases of
different lengths.</p>

<p>You can probably do this challenge without using anything fancy (with a hashmap
of phrases or something) but I think it&rsquo;s a nice opportunity to play with a fun
data structure: suffix arrays! So let&rsquo;s talk about what those are.</p>

<h3 id="suffix-arrays-sort-all-suffixes">suffix arrays: sort all suffixes</h3>

<p>Suffix arrays sort all suffixes of a string. For example, here&rsquo;s the suffix array for &ldquo;plantain&rdquo; which has the suffixes plantain, lantain, antain, ntain, tain, ain, in, n.</p>

<pre><code>ain
antain
in
lantain
n
ntain
plantain
tain
</code></pre>

<p>Representing this as a list of strings would be very inefficient (quadratic space), so instead we
replace each suffix with the index of its first character in the original
string &ndash; <code>[5,2,6,1,7,3,0,4]</code>.</p>

<pre><code>5 (ain)
2 (antain)
6 (in)
1 (lantain)
7 (n)
3 (ntain)
0 (plantain)
4 (tain)
</code></pre>

<p>Here&rsquo;s a real example of what a suffix array of 1 million tweets concatenated
looks like. This is an excerpt from the middle of the suffix array, with
some of the suffixes that start with <code>A little</code>.</p>

<pre><code>...
 A little distracted for a bit ...what do i do w my life hon.........
 A little exercise I did this afternoon.  #comics #art #clip.........
 A little extra Christmas Cash on me! Good Luck to everyone!.........
 A little girl in Savannah, Ga., appears to be the 38th huma.........
 A little heavy on the smut t… https://t.co/nvoxE7SNjTI wa.........
 A little in state battle tonight. #nova vs #penn. two very .........
 A little kiss...” one more time I’m going to vomit. #TT.........
 A little late catching up on last nights @GoodDoctorABC. On.........
 A little less bling never hurt anyone! Next project...🎄 .........
 A little more intensity to augment their talent and a coupl.........
 A little more time, because I have never lived really  - Os.........
 A little mor… https://t.co/kcq3zf9jgeWe love MX ❤️&lt;F0&gt;&lt;9F&gt;&lt;A7&gt;.........
 A little over 50k! Can We Guess How Much Is In Your Account.........
 A little ray of joy &amp;amp; light in the midst of these very .........
 A little refreshment… https://t.co/HgX8PmYwPIThank you @L.........
 A little respect goes a long way. .........
 A little salt in d country's troubled legal system“Grant................
 A little snow &amp;amp; people lose all common senseromantic st...............
 A little sun for the soul @realfreewebcams https://t.co/3CB...............
 A little sunkissed moment for y’all. ...............
 ....
</code></pre>

<p>Again, this is actually represented by a bunch of integer indexes into a
concatenated string of all the tweets, like <code>[18238223, 1921812, ...]</code> so it&rsquo;s a
LOT more memory efficient than actually repeating all those strings.</p>

<h3 id="suffix-arrays-let-you-find-common-substrings">suffix arrays let you find common substrings!</h3>

<p>So what does this have to do with Twitter memes? Well, we can basically</p>

<ol>
<li>concatenate all tweets into a big string</li>
<li>make a suffix array of that string</li>
<li>iterate through the suffix array and notice when you see a lot of repeated substrings, like here:</li>
</ol>

<pre><code>me as a kpop fan ✨kpop fan age: 15 y/o ✨first group ever stan: blackpink ✨current ult groups: btxt ✨number of albu… https://t.co/24diHX9sLm
me as a kpop fan ⭐k-pop fan age: 12 y/o ⭐first group ever stan: bts ⭐current ult gps: bts and txt ⭐number of albu… https://t.co/8R95roQXoE
me as a kpop fan ⭐k-pop fan age: 14 y/o ⭐first group ever stan: girls generation ⭐current ult gp: txt ⭐number of a… https://t.co/010hLuJscF
me as a kpop fan ⭐k-pop fan age: 14-16 y/o ⭐first group ever stan: bts ⭐current ult gps: bts txt ⭐number of albums… https://t.co/0fDcxZGRrh
me as a kpop fan ⭐k-pop fan age: 15 y/o ⭐first group ever stan: blackpink ⭐current ult gps: txt ⭐number of albums… https://t.co/d8zZL83TvV
me as a kpop fan 🌸 k-pop fan age: 12 years old 🌸 first group ever stan: bts 🌸 current ult gps: bts &amp;amp; wanna one 🌸 n… https://t.co/22R1nJpwNX
me as a kpop fan 🌸k-pop fan age: 10 🌸first group ever stan: 2pm 🌸current ult gps: skz,got7,itzy,twice, 🌸number of… https://t.co/mAluaP2yxH
me as a kpop fan 🌸k-pop fan age: 11 yo 🌸first group ever stan: beast 🌸current ult gps: ateez 🌸number of albums:  1… https://t.co/qxtFHG9HDg
me as a kpop fan 🌸k-pop fan age: 11 🌸first group ever stan: bts 🌸current ult gps: bts and ateez 🌸number of albums:… https://t.co/mKXlkrBBtC
me as a kpop fan 🌸k-pop fan age: 13 (now im 19) 🌸first group ever stan: snsd 🌸current ult gps: nct day6 aoa mamam… https://t.co/8XyQ3r5hwz
me as a kpop fan 🌸k-pop fan age: 13 years 🌸first group ever stan: 2pm,suju,bigbang 🌸current ult gps: bts,tbz,ateez… https://t.co/Zs1nQQz6Lt
me as a kpop fan 🌸k-pop fan age: 14 (2005) 🌸first group ever stan: super junior 🌸current ult gps: exo, gfriend, rv… https://t.co/vgmhe2vFMY
me as a kpop fan 🌸k-pop fan age: 14 y/o 🌸first group ever stan: nct dream 🌸current ult gps: svt and,,*insert stan… https://t.co/I38Ui69PvL
me as a kpop fan 🌸k-pop fan age: 15 y/o 🌸first group ever stan: 5sos 🌸current ult gps: bts and 5sos also some ggs… https://t.co/61ZmRkzmdl
me as a kpop fan 🌸k-pop fan age: 15 y/o 🌸first group ever stan: bts 🌸current ult gps: SVT, GOT7, Day6 🌸number of… https://t.co/16SWb3mSPg
me as a kpop fan 🌸k-pop fan age: 18 🌸first group ever stan: suju &amp;amp; soshi 🌸current ult gps: snsd &amp;amp; izone 🌸number of… https://t.co/SmSBFqJnGk
me as a kpop fan 🌸k-pop fan age: 19 y/o marupok 🌸first group ever stan: APINK 🌸current ult gps: SEVENTEEN 🌸number… https://t.co/StYjxr6uq9
me as a kpop fan 🌸k-pop fan age: 19 🌸first group ever stan: SuJu 🌸current ult gps: SuJu, SF9, SKZ, VIXX, ONEUS, NO… https://t.co/2o2DulCY5b
</code></pre>

<h3 id="suffix-arrays-also-enable-really-fast-search">suffix arrays also enable really fast search</h3>

<p>As an aside, the reason I got interested in suffix arrays in the first place
was actually not for finding Twitter memes at all but for search.</p>

<p>I&rsquo;ve spent a lot of time using Nelson Elhage&rsquo;s <a href="https://livegrep.com/search/linux">livegrep</a> at work to search
code. It creates a suffix array using the divsufsort library. He has a blog post
<a href="https://blog.nelhage.com/2015/02/regular-expression-search-with-suffix-arrays/">Regular Expression Search with Suffix Arrays</a>
where he talks about some of the implementation details.</p>

<p>The reason suffix arrays work for fast search is basically that if you&rsquo;re
looking for the string <code>A little</code>, you can do a binary search over the suffix array to
find every instance of <code>A little</code> in your dataset.  Binary searches are
extremely fast so every search is guaranteed to run very quickly (in less than
a microsecond I believe). What livegrep does is more complicated than that
because it does a regular expression search, but that&rsquo;s the idea to start.</p>

<p>There&rsquo;s another blog post <a href="https://blog.griddynamics.com/using-suffix-arrays-to-fix-limitations-of-full-text-search/">How to use suffix arrays to combat common limitations of full-text search</a> applying suffix arrays to searching through a patent database. In that example, like with code search, the patent officers want to search patents for exact strings.</p>

<h3 id="how-do-you-make-a-suffix-array">How do you make a suffix array?</h3>

<p>You can use an existing suffix array library, for example <a href="https://golang.org/pkg/index/suffixarray/">index/suffixarray in
Go</a>, which is what I used, or
<a href="https://github.com/y-256/libdivsufsort">divsufsort</a>. There are <a href="https://github.com/debatem1/pydivsufsort">Python
bindings for divsufsort</a>.</p>

<p>If you&rsquo;re more excited about the data structures/algorithms aspect of suffix
arrays you can also implement a suffix array-building algorithm yourself! I did
not do this but you can see an implementation of <a href="https://github.com/golang/go/blob/release-branch.go1.12/src/index/suffixarray/qsufsort.go">qsufsort here in Go</a>.
That implementation links to a paper. There are lots of algorithms for constructing suffix arrays &ndash;<code>sais</code> and
<code>divsufsort</code> are a couple of others.</p>

<h3 id="5-or-so-hours-100-lines-of-go">5 or so hours, 100 lines of Go</h3>

<p>As always with these challenges, I did this one to make sure that it&rsquo;s both
doable in a reasonable amount of time and fun for at least one person (me).</p>

<p>I did this one in about 5 hours and 100 lines of Go using the suffixarray
implementation in the Go standard library, with a bit of bash shell scripting
to postprocess the results. This is a messy data analysis challenge &ndash; as an
example of a messy thing, Spotify released their end-of-2019 results while I
was building the dataset and so there are a lot of tweets generated by the
Spotify app.</p>

<p>My results ended up looking something like this:</p>

<pre><code>5  an Aries and that’s why I gotta 
5  an Aries and that’s why I am so 
5  an Aquarius and that’s why I 
5  AM SO PROUD OF YOU 
5  am not a fan of 
5  am I the only one who 
5  am going to have to 
</code></pre>

<p>Then I sifted through them pretty manually to find the Twitter memes.</p>

<h3 id="suffix-arrays-are-used-in-bioinformatics">suffix arrays are used in bioinformatics</h3>

<p>This &ldquo;find twitter memes using suffix arrays&rdquo; approach is a silly thing but it
does have some relationship to reality &ndash; DNA sequences are basically really
long strings, and biologists need to find patterns in them, and they sometimes
use suffix arrays to do it.</p>

<p>I looked up <a href="https://codesearch.debian.net/search?q=divsufsort">packages in Debian that use libdivsufsort</a> and I found <a href="http://eddylab.org/infernal/">infernal</a>:</p>

<blockquote>
<p>Infernal (&ldquo;INFERence of RNA ALignment&rdquo;) is for searching DNA sequence
 databases for RNA structure and sequence similarities. It is an
 implementation of a special case of profile stochastic context-free grammars
 called covariance models (CMs). A CM is like a sequence profile, but it
 scores a combination of sequence consensus and RNA secondary structure
 consensus, so in many cases, it is more capable of identifying RNA homologs
 that conserve their secondary structure more than their primary sequence.</p>
</blockquote>

<h3 id="email-me-the-twitter-memes-you-find-if-you-do-this">email me the twitter memes you find if you do this!</h3>

<p>If you do this exercise, I&rsquo;d love it if you emailed me (julia@jvns.ca) with the twitter memes
you found and/or your code! I found about 8 but I&rsquo;m sure there are more.</p>

<p>I&rsquo;ll publish any solutions I get (unless you don&rsquo;t want me to publish your solution &ndash; just let me know!).</p>

<p>Thanks to Julian for discussing suffix arrays and suffix trees and trigram indexes with me at length, and to Kamal who had the idea of using suffix arrays to find Twitter memes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solutions to the tiny window manager challenge]]></title>
    <link href="https://jvns.ca/blog/2019/12/03/solutions-to-the-tiny-window-manager-challenge/"/>
    <updated>2019-12-03T14:57:10+00:00</updated>
    <id>https://jvns.ca/blog/2019/12/03/solutions-to-the-tiny-window-manager-challenge/</id>
    <content type="html"><![CDATA[

<p>Hello! Last week I posted a small <a href="https://jvns.ca/blog/2019/11/25/challenge--make-a-bouncy-window-manager/">programming challenge to write a tiny window manager that bounces windows around the screen</a>.</p>

<p><img src="https://jvns.ca/images/bouncewm.gif"></p>

<p>I&rsquo;ll write a bit about my experience of solving the challenge, or you can just
skip to the end to see the solutions.</p>

<h3 id="what-s-a-window-manager">what&rsquo;s a window manager?</h3>

<p>An X window manager is a program that sends messages to the X server (which is
in charge of drawing your windows) to tell it which windows to display and
where.</p>

<p>I found out that you can trace those events with <code>xtrace</code>. Here&rsquo;s some example
output from xtrace (for the toy window manager which is just moving windows
about)</p>

<pre><code>000:&lt;:02d8: 20: Request(12): ConfigureWindow window=0x004158e5 values={x=560 y=8}
000:&lt;:02da: 20: Request(12): ConfigureWindow window=0x004158e5 values={x=554 y=12}
000:&lt;:02dc: 20: Request(12): ConfigureWindow window=0x004158e5 values={x=548 y=16}
000:&lt;:02de: 20: Request(12): ConfigureWindow window=0x004158e5 values={x=542 y=20}
000:&lt;:02e0: 20: Request(12): ConfigureWindow window=0x004158e5 values={x=536 y=24}
000:&lt;:02e2: 20: Request(12): ConfigureWindow window=0x004158e5 values={x=530 y=28}
000:&lt;:02e4: 20: Request(12): ConfigureWindow window=0x004158e5 values={x=524 y=32}
</code></pre>

<h3 id="you-can-run-programs-without-a-window-manager">you can run programs without a window manager</h3>

<p>You technically don&rsquo;t <em>need</em> a window manager to run graphical programs &ndash; if
you want to start an xterm in a window-manager-less X session you can just run</p>

<pre><code>xterm -display :1
</code></pre>

<p>and it&rsquo;ll start the xterm. Here&rsquo;s a screenshot of an X session with no window
manager open. I even have 2 windows open! (chrome and an xterm). It has some
major usability problems, for example I don&rsquo;t think you can resize or move or
switch between windows. Which is where the window manager comes in!</p>

<div align="center">
<a href="https://jvns.ca/images/no-wm.png"><img src="https://jvns.ca/images/no-wm.png" width="300px"></a>
</div>

<h3 id="move-a-window-with-xmovewindow">move a window with XMoveWindow</h3>

<p>The challenge was to make the window bounce around the screen.</p>

<p>In the <a href="http://incise.org/tinywm.html">tinywm source</a> they use <code>XMoveResizeWindow</code> to move and resize windows,
but I found in the <a href="https://tronche.com/gui/x/xlib/window/XMoveWindow.html">docs</a> that there&rsquo;s
also a function called <code>XMoveWindow</code>. Perfect!</p>

<p>Here&rsquo;s what it looks like. What could be simpler, right? And it works just the way I&rsquo;d expect!</p>

<pre><code>XMoveWindow(display, windowID, x, y)
</code></pre>

<p>Except&hellip;</p>

<h3 id="problem-multiple-xmovewindow-s-don-t-work">problem: multiple <code>XMoveWindow</code>s don&rsquo;t work</h3>

<p>I ran into a problem (which I got stuck on for a couple of hours) where when I
ran XMoveWindow twice, it would only apply the last move.</p>

<pre><code>XMoveWindow(display, windowID, 100, 200)
usleep(2000 * 1000); # sleep for 2 seconds
XMoveWindow(display, windowID, 300, 400)
</code></pre>

<p>I&rsquo;d expect this to move the window once, wait 2 seconds, and them move it
again. But that was not what happened! Instead, it would pause for 2 seconds
and then move the window once (to the second location).</p>

<h3 id="use-xtrace-to-trace-window-manager-events">use xtrace to trace window manager events</h3>

<p>I used xtrace to trace the events and found out that my <code>ConfigureWindow</code>
events that <code>XMoveWindow</code> was sending were all being sent at the same time. So
it seemed like X was batching the events. But why?</p>

<h3 id="xsync-forces-x-to-process-events">XSync forces X to process events</h3>

<p>I didn&rsquo;t know why this was happening, but I emailed Julian about it and he
pointed me in the direction of
<a href="https://tronche.com/gui/x/xlib/event-handling/XSync.html">XSync</a>, which forces
X to process all the events you&rsquo;ve sent it. Sure enough, I used XSync and
everything worked beautifully.</p>

<h3 id="solutions">solutions</h3>

<p>I asked people to email me if they completed the challenge, and 4 people did!
Here are their solutions. All the solutions I got implemented more features
than I did, so I&rsquo;d encourage you to look at all the solutions if you&rsquo;re
interested in how to solve this problem!</p>

<ul>
<li><a href="https://gist.github.com/jvns/d5a0a4daf300f3dd7fa76d13b5aa2d53">Kacper Słomiński&rsquo;s solution</a> (which uses <code>XQueryTree</code> to find the windows to bounce, which is nice)</li>
<li><a href="https://github.com/whichxjy/bounce-wm/blob/master/bounce-wm.c">@whichxyj&rsquo;s solution</a></li>
<li><a href="https://github.com/ayzenquwe/stressfulwm">Alexsey Lagoshin&rsquo;s stressfulwm</a>, which allows bouncing multiple windows:</li>
<li><a href="https://github.com/aldrinmartoq/bouncywm-ruby">Aldrin Martoq Ahumada&rsquo;s bouncywm-ruby</a>, which is the only solution in a language other than C I got! It uses an Xlib Ruby library that looks pretty straightforward to use.</li>
<li>one really nice one with fancier bouncing effects which I&rsquo;ll post here later if the person sends me the source</li>
<li><a href="https://gist.github.com/jvns/c7a297fc4e17e797fd7b76b68860e55c">my solution</a></li>
</ul>

<p>Here&rsquo;s a gif of Alexsey&rsquo;s solution. Apparently <code>XQuartz</code> on a Mac performs better than Xephyr!</p>

<p><img src="https://raw.githubusercontent.com/ayzenquwe/stressfulwm/d06531d286a5f00424bf12f7c77b18e11437ff20/gif/example.gif"></p>

<p>And Aldrin&rsquo;s solution, with a great use of <code>xeyes</code>:</p>

<p><img src="https://raw.githubusercontent.com/aldrinmartoq/bouncywm-ruby/f6d424b6107c1349c8ee338b6a46c7116c6d1ea7/demo/demo.gif"></p>

<h3 id="thanks">thanks!</h3>

<p>Thanks to everyone who emailed me a solution, and if you write your own
implementation I&rsquo;d love to post it here too, especially if you write one that
isn&rsquo;t in C or Ruby! I&rsquo;m julia@jvns.ca. (and if you write a solution but don&rsquo;t want me to post it I&rsquo;d still love to see it!)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Challenge: Write a bouncy window manager]]></title>
    <link href="https://jvns.ca/blog/2019/11/25/challenge--make-a-bouncy-window-manager/"/>
    <updated>2019-11-25T18:03:40+00:00</updated>
    <id>https://jvns.ca/blog/2019/11/25/challenge--make-a-bouncy-window-manager/</id>
    <content type="html"><![CDATA[

<p>Hello! I&rsquo;m writing a short series of programming challenges with
<a href="http://www.cipht.net/2017/10/03/are-jump-tables-always-fastest.html">Julian</a>,
and this is the first one!</p>

<h3 id="the-challenge">the challenge</h3>

<p><img src="https://jvns.ca/images/bouncewm.gif"></p>

<p><strong>requirements</strong></p>

<p>The goal here is to make a very silly Linux window manager that bounces its windows
around the screen, like in the gif above.</p>

<p><strong>anti-requirements</strong></p>

<p>The window manager doesn&rsquo;t need to do anything else! It doesn&rsquo;t need to support:</p>

<ul>
<li>moving or resizing windows</li>
<li>switching between windows</li>
<li>minimizing windows</li>
<li>literally any of the other things you might normally expect a window manager to do</li>
</ul>

<p>It turns out implementing this kind of toy window manager is surprisingly approachable!</p>

<h3 id="the-setup-start-with-tinywm">the setup: start with tinywm</h3>

<p>All the instructions here only work on Linux (since this is about writing a Linux window manager).</p>

<p><strong>starter kit: tinywm</strong></p>

<p>Writing a window manager from scratch seems intimidating (at first I didn&rsquo;t
even know how to start!). But then I found
<strong><a href="http://incise.org/tinywm.html">tinywm</a></strong>, which is a tiny window manager
written in only <strong>50 lines of C</strong>. This is a GREAT starting point and there&rsquo;s
an annotated version of the source code which explains a lot of the details.
There&rsquo;s a Python version of tinywm too, but I wasn&rsquo;t able to get it to work.</p>

<p>I did this challenge by modifying <a href="http://incise.org/tinywm.html">tinywm</a> and it worked really well.</p>

<p><strong>tools</strong></p>

<ul>
<li><strong>Xephyr</strong> lets you embed an X session in a window in your regular desktop, so that you can develop your toy window manager without breaking your usual desktop. I ran it like this: <code>Xephyr -ac -screen 1280x1024 -br -reset -terminate 2&gt; /dev/null :1 &amp;</code></li>
<li>You can start an xterm in the Xephyr desktop with <code>xterm -display :1</code></li>
<li>I compiled my window manager with <code>gcc bouncewm.c -g -o bouncewm -lX11</code> and ran it with <code>env DISPLAY=:1 ./bouncewm</code></li>
<li><strong>xtrace</strong> lets you trace all requests to the X windows system that your window manager is making. I found it really helpful when debugging. (run it like <code>xtrace ./bouncewm</code>)</li>
</ul>

<p><strong>documentation</strong></p>

<p>Some useful references:</p>

<ul>
<li>the <a href="https://git.suckless.org/dwm/file/dwm.c.html">dwm source code</a> (dwm is a 2000-line-of-C window manager)</li>
<li>the <a href="https://tronche.com/gui/x/xlib/">Xlib programming manual</a></li>
</ul>

<p>If you&rsquo;re not comfortable writing C, there are also libraries that let you work
with X in other languages. I personally found C easier to use because a lot of
the window manager documentation and examples I found were for the Xlib C library.</p>

<h3 id="my-experience-5-hours-50-lines-of-code">my experience: 5 hours, 50 lines of code</h3>

<p>To give you a very rough idea of the difficulty of this exercise: I did this in
4 or 5 hours this morning and last night, producing the window manager you see
in the gif at the top of the blog post (which is 50 lines of code). I&rsquo;d never
looked at the source code for a window manager before yesterday.</p>

<p>As usual when working with a new library I spent most of that time being
confused about various basic things about how X works. (and as a result I
learned several new things about X!)</p>

<p>For me this challenge was a fun way to:</p>

<ul>
<li>learn some basics about the X window system protocol (I&rsquo;ve been using window managers for 15 years, today I got to write one!)</li>
<li>research an unfamiliar library (&ldquo;ooh, what does this function do?&rdquo;)</li>
<li>use a C library, since I don&rsquo;t usually write C</li>
</ul>

<h3 id="send-me-your-solution-if-you-do-this">send me your solution if you do this!</h3>

<p>I&rsquo;ll post the solution I came up in a week. If you think this window manager
challenge sounds fun and end up doing it, I&rsquo;d love it if you sent me your
solution (to julia@jvns.ca)!</p>

<p>I&rsquo;d be delighted to post any solutions you send me in the solutions blog post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What makes a programming exercise good?]]></title>
    <link href="https://jvns.ca/blog/2019/11/20/what-makes-a-programming-exercise-good/"/>
    <updated>2019-11-20T20:33:20+00:00</updated>
    <id>https://jvns.ca/blog/2019/11/20/what-makes-a-programming-exercise-good/</id>
    <content type="html"><![CDATA[

<p>I&rsquo;ve been thinking about programming exercises lately, because I want to move
into teaching people skills. But what makes a good programming exercise? I
<a href="https://twitter.com/b0rk/status/1197282185230860288">asked about this on Twitter today</a> and got some useful
responses so here are some criteria:</p>

<h3 id="it-s-fun">it&rsquo;s fun</h3>

<p>This one is sort of self-explanatory and I think it&rsquo;s really important.
Programming is fun and learning is fun so I can&rsquo;t see why programming exercises
would need to be boring.</p>

<h3 id="it-teaches-you-something-you-care-about">it teaches you something you care about</h3>

<p>I don&rsquo;t think this has to strictly mean &ldquo;relevant to your job right this
second&rdquo; &ndash; people don&rsquo;t just have jobs, we also want to make art and games and
fun personal projects and sometimes just understand the world around us. But
it&rsquo;s important to know what goals the exercise can help you with and what it&rsquo;s related to!</p>

<p>Some arbitrary examples:</p>

<ul>
<li>take an image of something from a website and reproduce it from scratch with
CSS (towards using CSS to make your own websites that look awesome)</li>
<li>write a webserver from scratch without any frameworks (to learn the HTTP protocol,
so that you can debug issues with a real webserver more easily)</li>
<li>write a small raytracer (so you can make cool art with raytracing techniques on shaderhub!)</li>
<li>write a tiny bit of assembly (as a very initial step towards understanding of
what Spectre and Meltdown are even about and why we need to make all our
computers run slower to prevent them)</li>
</ul>

<h3 id="it-s-a-challenge">it&rsquo;s a challenge</h3>

<p>I don&rsquo;t know if this is everyone&rsquo;s experience but I often start programming
exercises and get bored quickly (&ldquo;oh, I know how to do this, this is boring&rdquo;).
For me it&rsquo;s really important for the exercise to teach me something I really
don&rsquo;t know how to do and that&rsquo;s a little bit hard for me.</p>

<p>My favourite set of programming exercises is the <a href="https://cryptopals.com/">cryptopals crypto
challenges</a> because they get harder pretty fast &ndash; by
exercise #6, you&rsquo;re already breaking toy encryption protocols, and by #12
you&rsquo;re breaking an Actual Encryption Protocol (AES in ECB mode)!</p>

<h3 id="you-can-tell-if-you-succeeded">you can tell if you succeeded</h3>

<p>It&rsquo;s easy to write exercises that are too vaguely specified (&ldquo;write a toy tcp
stack!&ldquo;). But what does that mean? How much of a TCP stack am I supposed to
write? Having test cases and clear criteria for &ldquo;yay! you did it!
congratulations!&rdquo; is really important.</p>

<h3 id="you-can-do-it-quickly">you can do it quickly</h3>

<p>In less than 2-3 hours (an evening after work), say. It&rsquo;s hard to find time to
spend like 8 hours on an exercise unless it&rsquo;s REALLY exciting.</p>

<p>I also think that giving some specific real-world benchmark data seems nice (&ldquo;I
did this from scratch in 97 minutes&rdquo;).</p>

<h3 id="the-author-believes-in-you">the author believes in you</h3>

<p>This is a bit fuzzier but very lovely &ndash; <a href="https://twitter.com/mojavelinux/status/1197323090427953152">this person on Twitter wrote</a>:</p>

<blockquote>
<p>Similar to that, the writing is patient and gives me the impression that it
believes in my ability to accomplish the task. &hellip; I learned a ton in the early
days from Linux HOWTOs. Some gave me the sense that it was impossible to
fail. Just follow the steps. It&rsquo;s all there.</p>
</blockquote>

<p>Especially if you&rsquo;re doing a somewhat challenging exercise like we talked
about above, I think it&rsquo;s nice for the author to believe in your! (and of course it&rsquo;s
crucial that they&rsquo;ve actually written the exercises so that they&rsquo;re <em>right</em> and
you can likely do the thing!)</p>

<h3 id="it-s-been-tested">it&rsquo;s been tested</h3>

<p>I read the (great) biography <a href="http://www.amazon.com/exec/obidos/ASIN/0307473414/metafilter-20/ref=nosim/">Dearie: The Remarkable Life of Julia Child</a>
recently and one thing that stood out to me is that she <em>tested</em> all of the
recipes in Mastering the Art Of French Cooking. It took her <em>years</em> to write
the book and test the recipes and make sure that American home cooks actually
had access to all the ingredients and had the.</p>

<p>I don&rsquo;t think all cookbook authors test their recipes, but I think testing
really improves cookbooks.</p>

<p>I started writing some SQL exercises (like <a href="https://joins-238123.netlify.com/aggregations/">this prototype of one on GROUP
BY</a>) a while back, and at some point I
realized the big thing holding me back was that I didn&rsquo;t have testers! I
couldn&rsquo;t find out if people were actually learning from them or not!</p>

<p>This is a new thing for me because when I write blog posts I don&rsquo;t test them (I
barely even proofread them!). I just write them and publish and people often
like them and that&rsquo;s it! I said to <a href="https://stackingthebricks.com/">Amy Hoy</a>
(who is amazing) on Twitter that I didn&rsquo;t understand why you have to test
exercises if you don&rsquo;t have to test blog posts and she <a href="https://twitter.com/amyhoy/status/1197291805449940993">pointed out</a> that people
have much higher expectations for exercises than for blog posts &ndash; with the
blog posts you maybe expect to learn 1-2 new facts, but with exercises you
expect to actually develop a new skill!</p>

<p>Also, people are often investing a lot more time in exercises (especially if
they have to set up a dev environment or something!), so it&rsquo;s extra important
to make sure that they actually work.</p>

<h3 id="you-won-t-get-stuck">you won&rsquo;t get stuck</h3>

<p>It&rsquo;s SO EASY to get stuck on some random irrelevant point in a programming
exercise that&rsquo;s totally unrelated to the skill you&rsquo;re trying to learn. For
example there might be an easily-avoidable mistake that you can make with the
exercise and spend a lot of time debugging but it doesn&rsquo;t actually teach you a
lot.</p>

<h3 id="it-s-easy-to-get-help">it&rsquo;s easy to get help</h3>

<p>If you&rsquo;re doing a challenging exercise, you might want to get help from your
friends / colleagues / the internet!</p>

<p>Some things that can go wrong:</p>

<ul>
<li>None of your friends have ever heard of the thing the exercise is teaching so
you can&rsquo;t talk about it with them</li>
<li>The exercise expects you to be using the newest version of some software, but
actually all the examples on the internet are for some older version so it&rsquo;s
difficult to search for help even though the exercise is technically correct</li>
<li>The community around the tech used in the exercise is hostile/unhelpful</li>
</ul>

<p>One obvious way to accomplish this is by letting people use the programming
language they&rsquo;re most comfortable in, because they probably already know how to
Google for help in that environment.</p>

<h3 id="no-time-consuming-setup-required">no time-consuming setup required</h3>

<p>Installing software is boring, and a lot of programming projects require
installing software! A few things that can go wrong with this (though there are a lot
more than this!)</p>

<ul>
<li>I get a compiler error when I try to install this package on my computer</li>
<li>The example actually requires some very specific package versions to work
properly and if you don&rsquo;t have those exact versions installed you get a bunch
of cryptic errors and need to google for 3 hours to fix them</li>
</ul>

<p>This kind of thing is a huge waste of time and super demoralizing. And it&rsquo;s not
trivial to avoid! If you&rsquo;re trying to teach someone a specific piece of
software, often that software</p>

<p>A few options I&rsquo;ve seen or used to manage this:</p>

<ul>
<li>tell people what you know works (&ldquo;I&rsquo;ve tested this in Mac/Linux but not Windows&rdquo;)</li>
<li>avoid requiring any software to be installed (&ldquo;just use python&rdquo;)</li>
<li>use Docker to run everything</li>
<li>run all the code in the person&rsquo;s browser (because browsers usually do about the same thing)</li>
<li>use a cloud system (so everything runs on someone else&rsquo;s computer). This is what I do for my <a href="https://github.com/jvns/pandas-cookbook">pandas cookbook</a>, which lets you run it in Binder, this really great free service for hosting Jupyter notebooks.</li>
</ul>

<h3 id="it-s-easy-to-extend">it&rsquo;s easy to extend</h3>

<p>@tef has this great talk on Scratch <a href="https://www.youtube.com/watch?v=vU9myNJI9l4">A million things to do with a computer!</a> which explains the 3 ideas of Scratch:</p>

<ul>
<li>low floors</li>
<li>wide walls</li>
<li>high ceilings</li>
</ul>

<p>It sucks when you start learning something and then learn that what you can do
with the Thing is very limited! It&rsquo;s exciting when you learn something and see
&ldquo;oh, wow, there are SO MANY POSSIBILITIES, what if I did X instead?&rdquo;</p>

<h3 id="that-s-a-lot-of-things">that&rsquo;s a lot of things!</h3>

<p>The criteria we arrived at:</p>

<ul>
<li>fun exercises</li>
<li>that teach you something you care about</li>
<li>that are challenging</li>
<li>with clear success criteria</li>
<li>that can be done quickly</li>
<li>with no complicated setup</li>
<li>and few hidden gotchas</li>
<li>using a tech stack that&rsquo;s easy for you to get help with</li>
<li>where there&rsquo;s a lot of room to grow</li>
</ul>

<p>That seems pretty hard, but it seems like a good goal to aspire to! I&rsquo;m going
to keep very slowly working on exercises!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How containers work: overlayfs]]></title>
    <link href="https://jvns.ca/blog/2019/11/18/how-containers-work--overlayfs/"/>
    <updated>2019-11-18T13:34:29+00:00</updated>
    <id>https://jvns.ca/blog/2019/11/18/how-containers-work--overlayfs/</id>
    <content type="html"><![CDATA[

<p>I wrote a comic about overlay filesystems for a potential future container <a href="https://wizardzines.com">zine</a>
this morning, and then I got excited about the topic and wanted to write a blog
post with more details. Here&rsquo;s the comic, to start out:</p>

<p><a href="https://jvns.ca/images/overlay.jpeg">
<img src="https://jvns.ca/images/overlay.jpeg">
</a></p>

<h3 id="container-images-are-big">container images are big</h3>

<p>Container images can be pretty big (though some are really small, like <a href="https://hub.docker.com/_/alpine?tab=tags">alpine
linux is 2.5MB</a>). Ubuntu 16.04 is
about 27MB, and <a href="https://hub.docker.com/r/continuumio/anaconda3/tags">the Anaconda Python distribution is 800MB to
1.5GB</a>.</p>

<p>Every container you start with an image starts out with the same blank slate,
as if it made a copy of the image just for that container to use. But for big
container images, like that 800MB Anaconda image, making a copy would be both a
waste of disk space and pretty slow. So Docker doesn&rsquo;t make copies &ndash; instead
it uses an <strong>overlay</strong>.</p>

<h3 id="how-overlays-work">how overlays work</h3>

<p>Overlay filesystems, also known as &ldquo;union filesystems&rdquo; or &ldquo;union mounts&rdquo; let you mount a filesystem using 2 directories: a &ldquo;lower&rdquo; directory, and an &ldquo;upper&rdquo; directory.</p>

<p>Basically:</p>

<ul>
<li>the <strong>lower</strong> directory of the filesystem is read-only</li>
<li>the <strong>upper</strong> directory of the filesystem can be both read to and written from</li>
</ul>

<p>When a process <strong>reads</strong> a file, the overlayfs filesystem driver looks in the upper
directory and reads the file from there if it&rsquo;s present. Otherwise, it looks in
the lower directory.</p>

<p>When a process <strong>writes</strong> a file, overlayfs will just write it to the upper directory.</p>

<h3 id="let-s-make-an-overlay-with-mount">let&rsquo;s make an overlay with <code>mount</code>!</h3>

<p>That was all a little abstract, so let&rsquo;s make an overlay filesystem and try
it out! This is just going to have a few files in it: I&rsquo;ll make upper and lower
directories, and a <code>merged</code> directory to mount the combined filesystem into:</p>

<pre><code>$ mkdir upper lower merged work
$ echo &quot;I'm from lower!&quot; &gt; lower/in_lower.txt 
$ echo &quot;I'm from upper!&quot; &gt; upper/in_upper.txt
$ # `in_both` is in both directories
$ echo &quot;I'm from lower!&quot; &gt; lower/in_both.txt 
$ echo &quot;I'm from upper!&quot; &gt; upper/in_both.txt 
</code></pre>

<p>Combining the upper and lower directories is pretty easy: we can just do it with <code>mount!</code></p>

<pre><code>$ sudo mount -t overlay overlay 
    -o lowerdir=/home/bork/test/lower,upperdir=/home/bork/test/upper,workdir=/home/bork/test/work 
    /home/bork/test/merged
</code></pre>

<p>There&rsquo;s was an extremely annoying error message I kept getting while doing
this, that said <code>mount: /home/bork/test/merged: special device overlay does not
exist.</code>. This message is a lie, and actually just means that one of the
directories I specified was missing (I&rsquo;d written <code>~/test/merged</code> but it wasn&rsquo;t being expanded).</p>

<p>Okay, let&rsquo;s try to read one of the files from the overlay filesystem! The file <code>in_both.txt</code> exists in both <code>lower/</code> and <code>upper/</code>, so it should read the file from the <code>upper/</code> directory.</p>

<pre><code>$ cat merged/in_both.txt 
&quot;I'm from upper!
</code></pre>

<p>It worked!</p>

<p>And the contents of our directories are what we&rsquo;d expect:</p>

<pre><code>find lower/ upper/ merged/
lower/
lower/in_lower.txt
lower/in_both.txt
upper/
upper/in_upper.txt
upper/in_both.txt
merged/
merged/in_lower.txt
merged/in_both.txt
merged/in_upper.txt
</code></pre>

<h3 id="what-happens-when-you-create-a-new-file">what happens when you create a new file?</h3>

<pre><code>$ echo 'new file' &gt; merged/new_file
$ ls -l */new_file 
-rw-r--r-- 1 bork bork 9 Nov 18 14:24 merged/new_file
-rw-r--r-- 1 bork bork 9 Nov 18 14:24 upper/new_file
</code></pre>

<p>That makes sense, the new file gets created in the <code>upper</code> directory.</p>

<h3 id="what-happens-when-you-delete-a-file">what happens when you delete a file?</h3>

<p>Reads and writes seem pretty straightforward. But what happens with deletes? Let&rsquo;s do it!</p>

<pre><code>$ rm merged/in_both.txt
</code></pre>

<p>What happened? Let&rsquo;s look with <code>ls</code>:</p>

<pre><code>ls -l upper/in_both.txt  lower/lower1.txt  merged/lower1.txt
ls: cannot access 'merged/in_both.txt': No such file or directory
-rw-r--r-- 1 bork bork    6 Nov 18 14:09 lower/in_both.txt
c--------- 1 root root 0, 0 Nov 18 14:19 upper/in_both.txt
</code></pre>

<p>So:</p>

<ul>
<li><code>in_both.txt</code> is still in the <code>lower</code> directory, and it&rsquo;s unchanged</li>
<li>it&rsquo;s not in the <code>merged</code> directory. So far this is all what we expected.</li>
<li>But what happened in <code>upper</code> is a little strange: there&rsquo;s a file called
<code>upper/in_both.txt</code>, but it&rsquo;s a&hellip; character device? I guess this is how the
overlayfs driver represents a file being deleted.</li>
</ul>

<p>What happens if we try to copy this weird character device file?</p>

<pre><code>$ sudo cp upper/in_both.txt upper/in_lower.txt
cp: cannot open 'upper/in_both.txt' for reading: No such device or address
</code></pre>

<p>Okay, that seems reasonable, being able to copy this weird deletion signal file doesn&rsquo;t really make sense.</p>

<h3 id="you-can-mount-multiple-lower-directories">you can mount multiple &ldquo;lower&rdquo; directories</h3>

<p>Docker images are often composed of like 25 &ldquo;layers&rdquo;. Overlayfs supports having
multiple lower directories, so you can run</p>

<pre><code>mount -t overlay overlay
      -o lowerdir:/dir1:/dir2:/dir3:...:/dir25,upperdir=...
</code></pre>

<p>So I assume that&rsquo;s how containers with many Docker layers work, it just unpacks
each layer into a separate directory and then asks overlayfs to combine them
all together together with an empty upper directory that the container will write its changes to it.</p>

<h3 id="docker-can-also-use-btrfs-snapshots">docker can also use btrfs snapshots</h3>

<p>Right now I&rsquo;m using ext4, and Docker uses overlayfs snapshots to run
containers. But I used to use btrfs, and then Docker would use btrfs copy-on-write snapshots
instead. (Here&rsquo;s a list of when Docker uses which <a href="https://docs.docker.com/storage/storagedriver/select-storage-driver/">storage drivers</a>)</p>

<p>Using btrfs snapshots this way had some interesting consequences &ndash; at some
point last year I was running hundreds of short-lived Docker containers on my
laptop, and this resulted in me running out of btrfs metadata space (like <a href="https://www.reddit.com/r/archlinux/comments/5jrmfe/btrfs_metadata_and_docker/">this person</a>).
This was really confusing because I&rsquo;d never heard of btrfs metadata before and it
was tricky to figure out how to clean up my filesystem so I could run Docker
containers again. (<a href="https://github.com/moby/moby/issues/27653">this docker github issue</a> describes a similar problem
with Docker and btrfs)</p>

<h3 id="it-s-fun-to-try-out-container-features-in-a-simple-way">it&rsquo;s fun to try out container features in a simple way!</h3>

<p>I think containers often seem like they&rsquo;re doing &ldquo;complicated&rdquo; things and I
think it&rsquo;s fun to break them down like this &ndash; you can just run one <code>mount</code>
incantation without actually doing anything else related to containers at all
and see how overlays work!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some notes on vector drawing apps]]></title>
    <link href="https://jvns.ca/blog/2019/11/18/some-notes-on-vector-drawing-apps/"/>
    <updated>2019-11-18T10:47:41+00:00</updated>
    <id>https://jvns.ca/blog/2019/11/18/some-notes-on-vector-drawing-apps/</id>
    <content type="html"><![CDATA[

<p>For the last year and a half I&rsquo;ve been using the iPad Notability app to draw my
<a href="https://wizardzines.com">zines</a>. Last week I decided I wanted more features, did a bit of research, and
decided to switch to Affinity Designer (a much more complicated program). So
here are a few quick notes about it.</p>

<p>The main difference between them is that Notability is a simple note taking app
(aimed at regular people), and Affinity Designer is a vector graphics app
(aimed at illustrators / graphic designers), like Adobe Illustrator.</p>

<p>I&rsquo;ve never used a serious vector graphics program before, so it&rsquo;s been cool to
learn what kinds of features are available!</p>

<h3 id="notability-is-super-simple">Notability is super simple</h3>

<p>This is what the Notability UI looks like. There&rsquo;s a pencil, an eraser, a text
tool, and a selection tool. That&rsquo;s basically it. I LOVED this simplicity when I
started using Notability, and I made 4 zines using it (help! i have a manager!,
oh shit, git!, bite size networking!, and http: use your browser&rsquo;s language).</p>

<p><a href="https://jvns.ca/images/notability.jpg"><img src="https://jvns.ca/images/notability.jpg" width="400px"></a></p>

<p>Recently though, I&rsquo;ve had a couple of problems with it, the main one being that
text boxes and things drawn with the pencil tool don&rsquo;t mix well. (In general
Notability has been GREAT though and their support team has always been
incredibly helpful when I&rsquo;ve had questions.)</p>

<h3 id="affinity-designer-is-really-complicated">Affinity Designer is really complicated</h3>

<p>Affinity Designer, by comparison, is WAY more complicated. Here&rsquo;s what the UI looks like:</p>

<p><a href="https://jvns.ca/images/affinity-designer.jpg"><img src="https://jvns.ca/images/affinity-designer.jpg" width="400px"></a></p>

<p>There are</p>

<ul>
<li>14 tools on the left</li>
<li>14 more panels on the right that alter what the tools do</li>
<li>a bottom toolbar which has different options for each tool</li>
<li>2 menus which together have another 25 things or so that you can do</li>
</ul>

<p>I still don&rsquo;t understand what all the tools do (what&rsquo;s the
difference between Pencil and Vector Brush? I don&rsquo;t know!). But I&rsquo;m pretty
excited about this because (unlike with Notability) there are so many options
that if I&rsquo;m frustrated about something, 90% of the time there&rsquo;s a way to do the
thing I want!</p>

<h3 id="switching-from-notability-to-affinity-designer-is-really-easy">switching from Notability to Affinity Designer is really easy</h3>

<p>Switching to Notability wasn&rsquo;t the best: I <a href="https://jvns.ca/blog/2018/03/31/reverse-engineering-notability-format/">reverse engineered the file
format</a>
to transfer some files over but the quality was never the best (probably
because of problems with my script) and I ended up having to redraw a lot of
them in practice.</p>

<p>With Affinity Designer, I can just</p>

<ul>
<li>export a PDF with Notability (or anything else)</li>
<li>import the PDF with Affinity Designer</li>
<li>and then I can easily edit it and that&rsquo;s it?!?</li>
</ul>

<p>It&rsquo;s not perfect &ndash; the vector paths it comes up with are kind of weird, probably
because of the way the PDF is &ndash; but it&rsquo;s very good! It makes me feel confident
that if I need to make a small edit to something I made in the past I can just
import the PDF!</p>

<h3 id="what-can-a-vector-drawing-app-do">what can a vector drawing app do?</h3>

<p>here are a few things Affinity Designer can do that Notability can&rsquo;t:</p>

<ul>
<li><strong>custom paper sizes</strong>: In Notability every page is 8.5x11, but usually I
want something more like 5.5x8.5 which is a different aspect ratio (this is
technically sort of possible in Notability by importing a PDF of the correct
size but it&rsquo;s a pain and it means you can&rsquo;t use a grid)</li>
<li><strong>custom colour palettes</strong>: I can have the 10 colours I like to use in my
comics all in one place</li>
<li><strong>grouping objects together</strong> &ndash; I can &ldquo;group&rdquo; a bunch of objects together so
that I can easily resize and move them all together</li>
<li><strong>two kinds of text box</strong>. This is the kind of thing that I wouldn&rsquo;t have
understood 2 years ago but that now I LOVE &ndash; you can either have &ldquo;art text&rdquo;
that acts like an image (no word wrap, gets bigger when you resize it) or
&ldquo;frame text&rdquo; that has word wrap and doesn&rsquo;t get bigger when you resize it.</li>
<li><strong>really great import</strong> &ndash; I can import a PDF or SVG and individually edit /
move around parts of the PDF. Notability doesn&rsquo;t have any import tools that
let you edit after importing.</li>
<li><strong>custom export options for printing</strong>. I don&rsquo;t understand what it <strong>does</strong>
yet but there are export presets for print PDFs and it fixes some printing
problems I was having!</li>
</ul>

<p>There are also a LOT more features that I&rsquo;m not interested in but I&rsquo;m pretty
excited about those 6 things and it feels like an app that I won&rsquo;t grow out of.</p>

<h3 id="ipad-apps-are-great">iPad apps are great</h3>

<p>I&rsquo;ve been exclusively using Linux for the last 15 years where the image
editing/media tools aren&rsquo;t always great (though I really like Inkscape and I hear good things about Krita!), so
it&rsquo;s really cool to have access to all these great iPad apps. And the prices seem pretty reasonable:</p>

<ul>
<li>Notability is $12</li>
<li>Affinity Designer is $20</li>
<li>LumaFusion (a nice video editor I&rsquo;ve been using a little) is $30</li>
</ul>

<p>It doesn&rsquo;t make me want a Mac (I like the Linux desktop experience!), but it&rsquo;s
nice to have access to a bunch of these great tools. And I think a lot of
these art tools work better on an iPad than on a computer anyway since you can
just draw on the screen :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some research on shipping print zines]]></title>
    <link href="https://jvns.ca/blog/2019/10/28/some-research-on-shipping-print-zines/"/>
    <updated>2019-10-29T10:51:14+00:00</updated>
    <id>https://jvns.ca/blog/2019/10/28/some-research-on-shipping-print-zines/</id>
    <content type="html"><![CDATA[

<p>I&rsquo;ve been doing some preliminary research on shipping printed zines, since
<a href="https://jvns.ca/blog/2019/10/21/print-collection-of-my-first-7-zines/">Your Linux Toolbox</a>
is out now and a bunch more people have been asking about print copies of my
other zines. I thought I&rsquo;d write down what I&rsquo;ve learned so far because it turns
out shipping is pretty complicated!</p>

<p>My original question I was trying to answer was &ldquo;can I ship a single zine
anywhere in the world for less than $6 or so?&ldquo;, so let&rsquo;s start there.</p>

<p>Surprisingly the best single resource I found was this
very extensive <a href="https://www.pcmag.com/roundup/360934/the-best-e-commerce-fulfillment-services">PCMag article on e-commerce fulfillment services</a>.</p>

<h3 id="why-not-use-letter-mail">why not use letter mail?</h3>

<p>The most obvious way to send a zine inexpensively in the mail is with letter
mail &ndash; letters smaller than 10&rdquo; x 6&rdquo; and under 60g or so can be sent by letter
mail. My zines definitely fit that criteria, even when printed on nice paper.
This would be really good because international package postage is EXPENSIVE,
but sending a letter to Belgium only costs <a href="https://postcalc.usps.com/Calculator/MailServices?country=10033&amp;ccode=BE&amp;oz=90219&amp;omil=False&amp;dmil=False&amp;mdt=10%2F28%2F2019&amp;mdz=11%3A29&amp;m=1&amp;dvi=0&amp;o=2">$2.13 according to USPS&rsquo;s
website</a>.</p>

<p>The issue with this is the small print on that USPS page:</p>

<blockquote>
<p>Value of contents can not exceed $0.00</p>
</blockquote>

<p>So it seems like you&rsquo;re not actually allowed to send things worth money via
letter mail. Probably that&rsquo;s related to customs or something. Or maybe letter
mail is subsidized by the government? Not sure why.</p>

<h3 id="option-0-ship-zines-myself">Option 0: Ship zines myself</h3>

<p>I&rsquo;ve done this before and it was actually really fun to do once but I think this is pretty unlikely to be a good idea because:</p>

<p>a. cost: I live in Canada, almost everyone I sell zines to is outside of Canada, and
b. availability: I&rsquo;d like for people to be able to get shipments when I&rsquo;m out of town / on vacation</p>

<h3 id="option-1-amazon">Option 1: Amazon</h3>

<p>One obvious answer to how to sell book-like things is &ldquo;sell them on Amazon!&rdquo;.
Amazon actually has at least 3 different programs that you can use to sell
books online (Amazon Advantage, Fulfilled By Amazon, Kindle Direct Publishing),
and since Amazon is such a big thing I looked into all of them a little bit.</p>

<p>In general the forums on <a href="https://sellercentral.amazon.com">https://sellercentral.amazon.com</a> seem to be a good way
to understand how the various Amazon options work for people.</p>

<p>I wrote a lot about Amazon here but overall it doesn&rsquo;t seem that great of an
option &ndash; it&rsquo;s really complicated, selling on Amazon&rsquo;s website isn&rsquo;t very
appealing, and I think there would be a lot of additional fees.</p>

<p><strong>Kindle Direct Publishing</strong></p>

<p>Kindle Direct Publishing is a service where Amazon will take care of everything
from printing to shipping. (It has &ldquo;Kindle&rdquo; in the same but they actually do
printing as well). <a href="https://www.cs.princeton.edu/~bwk/">Brian Kernighan&rsquo;s new Unix
book</a> is an example of a book published
with KDP.</p>

<p>KDP won&rsquo;t work for this project because they don&rsquo;t support saddle stitching
(stapling the zine), so I didn&rsquo;t look into it too much. Here&rsquo;s a link to their
<a href="https://kdp.amazon.com/en_US/help/topic/G201834180">paper and cover options</a>
though.</p>

<p><strong>Amazon Advantage</strong></p>

<p>Amazon Advantage doesn&rsquo;t do printing &ndash; you ship them books, and then they take
care of shipping them to people. This seems great on its surface (&ldquo;amazon just
takes care of it!&ldquo;).</p>

<p>advantages:</p>

<ul>
<li>the book on Amazon looks the same as a book from a major publisher, it shows
up as &ldquo;ships and sold by Amazon&rdquo;</li>
</ul>

<p>disadvantages:</p>

<ul>
<li>Amazon Advantage takes 55% and <strong>they</strong> decide how to price your book.</li>
<li>It costs $99/year</li>
<li>&ldquo;You have to ship them your books every week or two depending on how many
copies they want, you can’t just ship them a big shipment to keep in a
warehouse&rdquo;</li>
</ul>

<p>The biggest issue for me here seems to be &ldquo;you have to ship them books every
week or two&rdquo;, which seems like it could get very expensive if Amazon Advantage
keeps asking you to ship them small quantities of zines.</p>

<p><strong>Fulfilled By Amazon</strong></p>

<p>Fulfilled By Amazon seems like the Amazon option that involves the least Amazon
magic. Basically I&rsquo;d ship books to their warehouses and then they ship the things from those warehouses.</p>

<p>how it works:</p>

<ul>
<li>you just pay them for shipping and warehousing fees (no percentage cost)</li>
<li>you can ship them a big batch of things and they&rsquo;ll store them until they&rsquo;re sold</li>
<li>they have <a href="https://services.amazon.com/global-selling/global-selling-guide.html">FBA global selling</a>
to sell in countries other than the US (by shipping to Amazon warehouses in
those countries) or <a href="https://sellercentral.amazon.fr/gp/help/external/200149570?language=en_GB&amp;ref=efph_200149570_cont_201101640">FBA export</a>
(to sell to other countries from the US store). There are a bunch of scary words on those pages about international taxes.</li>
</ul>

<h3 id="option-2-blackbox">Option 2: Blackbox</h3>

<p>Blackbox is a shipping company by the Cards Against Humanity folks. This is
their <a href="https://www.blackbox.cool/downloads/Blackbox_2019_Pricing.pdf">Pricing PDF</a>. I&rsquo;m not
100% sure if I can work with them &ndash; the first time I filled out the form on
their website saying I was interested they said they weren&rsquo;t accepting new
customers, but I think now they may be?</p>

<p>Here&rsquo;s the summary:</p>

<ul>
<li>$6.64 for domestic US shipping</li>
<li>$11ish for domestic Canadian shipping</li>
<li>$10ish for domestic Australia shipping</li>
<li>$7ish for domestic UK shipping</li>
<li>$10ish for international shipping from their UK warehouse to anywhere in the world</li>
</ul>

<h3 id="option-3-shipbob">Option 3: Shipbob</h3>

<p>Shipbob is an shipping company for smaller ecommerce companies. Here&rsquo;s the <a href="https://shipbobcdn.azureedge.net/webassets/dashboard/files/ShipBob_GrowthPlan_Quote_2019.pdf">pricing PDF I found</a>.</p>

<ul>
<li>$6ish for domestic US shipping</li>
<li>$10ish for shipping to other countries</li>
</ul>

<p>The main difference as far as I can tell between Shipbob and Blackbox is that
Shipbox lets you include up to 5 items per order for free and Blackbox charges
$0.70 per additional item in an order.</p>

<p>Shipbob advertises a 99.8% fulfillment accuracy rate which is pretty
interesting &ndash; it means they expect 2 in 1000 orders to have a problem. That
seems pretty good!</p>

<h3 id="option-4-whiplash">Option 4: Whiplash</h3>

<p>Similar to the other two above. <a href="https://sales.getwhiplash.com/pricing">Their pricing
page</a>. Shipbob and Blackbox both include
everything (shipping, packaging materials, and someone packing your order) in
their fee, and Whiplash seems to charge separately for shipping.</p>

<h3 id="shipping-1-thing-costs-the-same-as-shipping-5-things">Shipping 1 thing costs the same as shipping 5 things</h3>

<p>Zines are pretty light &ndash; I just weighed some of my zines printed on high
quality paper on my kitchen scale and they&rsquo;re 40g each on average. Most of
these shipping services seem to charge in increments of half a pound, so
shipping 5 zines (about 200g) costs about the same as shipping 1 zine (about
40g).</p>

<p>This makes me think it would be more reasonable to focus on shipping packages
of many zines &ndash; right now the <a href="https://wizardzines.com/zines/all-the-zines/">6 pack of all my zines</a> costs $58 for a PDF
collection, and $6-$12 shipping for something around that price seems
super reasonable (and I could probably even do &ldquo;free&rdquo; shipping, aka pay the
shipping costs myself).</p>

<p>The other thing that I think could be work well is shipping packages of 5 or 10
of the same zine so that a group of people can each get a zine and save on
shipping costs.</p>

<h3 id="this-seems-like-it-could-work">this seems like it could work!</h3>

<p>I still have no plan for how to print zines, but writing all this down makes me
feel pretty optimistic about being able to ship zines to people. Even though
shipping individual zines doesn&rsquo;t seem that practical, I think shipping packs
of 5-10 zines could be really reasonable!</p>

<p>Speaking of print &ndash; I printed a zine with Lulu last week and just got it in
the mail yesterday. I didn&rsquo;t think Lulu would be able to print it in the way I
wanted, and they didn&rsquo;t, so I&rsquo;m really happy to know that and be able to move
on to trying other non-print-on-demand printers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQLite is really easy to compile]]></title>
    <link href="https://jvns.ca/blog/2019/10/28/sqlite-is-really-easy-to-compile/"/>
    <updated>2019-10-28T11:19:19+00:00</updated>
    <id>https://jvns.ca/blog/2019/10/28/sqlite-is-really-easy-to-compile/</id>
    <content type="html"><![CDATA[

<p>In the last week I&rsquo;ve been working on another SQL website
(<a href="https://sql-steps.wizardzines.com/">https://sql-steps.wizardzines.com/</a>, a list of SQL examples). I&rsquo;m running all
the queries on that site with sqlite, and I wanted to use window functions in
one of the examples (<a href="https://sql-steps.wizardzines.com/lag.html">this one</a>).</p>

<p>But I&rsquo;m using the version of sqlite from Ubuntu 18.04, and that version is too
old and doesn&rsquo;t support window functions. So I needed to upgrade sqlite!</p>

<p>This turned to out be surprisingly annoying (as usual), but in a pretty
interesting way! I was reminded of some things about how executables and shared
libraries work and it had a very satisfying conclusion. So I wanted to write it up here.</p>

<p>(spoiler: the summary is that <a href="https://www.sqlite.org/howtocompile.html">https://www.sqlite.org/howtocompile.html</a> explains
how to compile SQLite and it takes like 5 seconds to do and it&rsquo;s 20x easier
than my usual experiences compiling software from source)</p>

<h3 id="attempt-1-download-a-sqlite-binary-from-their-website">attempt 1: download a SQLite binary from their website</h3>

<p>The <a href="https://www.sqlite.org/download.html">SQLite download page</a> has a link to
a Linux binary for the SQLite command line tool. I downloaded it, it worked on
my laptop, and I thought I was done.</p>

<p>But then I tried to run it on a build server I was using (Netlify), and I got
this extremely strange error message: &ldquo;File not found&rdquo;. I straced it, and sure
enough <code>execve</code> was returning the error code ENOENT, which means &ldquo;File not
found&rdquo;. This was kind of maddening because the file was DEFINITELY there and it
had the correct permissions and everything.</p>

<p>I googled this problem (by searching &ldquo;execve enoent&rdquo;), found <a href="https://stackoverflow.com/questions/5234088/execve-file-not-found-when-stracing-the-very-same-file">this stack overflow answer</a>,
which pointed out that to run a binary, you don&rsquo;t just need the binary to exist! You also need its <strong>loader</strong> to exist. (the path to the loader is inside the binary)</p>

<p>To see the path for the loader you can use <code>ldd</code>, like this:</p>

<pre><code>$ ldd sqlite3
	linux-gate.so.1 (0xf7f9d000)
	libdl.so.2 =&gt; /lib/i386-linux-gnu/libdl.so.2 (0xf7f70000)
	libm.so.6 =&gt; /lib/i386-linux-gnu/libm.so.6 (0xf7e6e000)
	libz.so.1 =&gt; /lib/i386-linux-gnu/libz.so.1 (0xf7e4f000)
	libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xf7c73000)
	/lib/ld-linux.so.2
</code></pre>

<p>So <code>/lib/ld-linux.so.2</code> is the loader,and that file doesn&rsquo;t exist on the build
server, probably because that Xenial installation didn&rsquo;t have support for
32-bit binaries (?), and I needed to try something different.</p>

<h3 id="attempt-2-install-the-debian-sqlite3-package">attempt 2: install the Debian sqlite3 package</h3>

<p>Okay, I thought, maybe I can install the <a href="https://packages.debian.org/bullseye/amd64/sqlite3/download">sqlite package from debian
testing</a>. Trying
to install a package from a different Debian version that I&rsquo;m not using is
literally never a good idea, but for some reason I decided to try it anyway.</p>

<p>Doing this completely unsurprisingly broke the sqlite installation on my
computer (which also broke git), but I managed to recover from that with a
bunch of <code>sudo dpkg --purge --force-all libsqlite3-0</code> and make everything that
depended on sqlite work again.</p>

<h3 id="attempt-3-extract-the-debian-sqlite3-package">attempt 3: extract the Debian sqlite3 package</h3>

<p>I also briefly tried to just extract the sqlite3 binary from the Debian sqlite
package and run it. Unsurprisingly, this also didn&rsquo;t work, but in a more
understandable way: I had an older version of libreadline (.so.7) and it wanted
.so.8.</p>

<pre><code>$ ./usr/bin/sqlite3
./usr/bin/sqlite3: error while loading shared libraries: libreadline.so.8: cannot open shared object file: No such file or directory
</code></pre>

<h3 id="attempt-4-compile-it-from-source">attempt 4: compile it from source</h3>

<p>The whole reason I spent all this time trying to download sqlite binaries is
that I assumed it would be annoying or time consuming to compile sqlite from
source. But obviously downloading random sqlite binaries was not working for me
at all, so I finally decided to try to compile it myself.</p>

<p>Here are the directions: <a href="https://www.sqlite.org/howtocompile.html">How to compile
SQLite</a>. And they&rsquo;re the EASIEST
THING IN THE UNIVERSE. Often compiling things feels like this:</p>

<ul>
<li>run <code>./configure</code></li>
<li>realize i&rsquo;m missing a dependency</li>
<li>run <code>./configure</code> again</li>
<li>run <code>make</code></li>
<li>the compiler fails because actually i have the wrong version of some dependency</li>
<li>go do something else and try to find a binary</li>
</ul>

<p>Compiling SQLite works like this:</p>

<ul>
<li>download an <a href="https://www.sqlite.org/download.html">amalgamation tarball from the download page</a></li>
<li>run <code>gcc shell.c sqlite3.c -lpthread -ldl</code></li>
<li>that&rsquo;s it!!!</li>
</ul>

<p>All the code is in one file (<code>sqlite.c</code>), and there are no weird dependencies! It&rsquo;s amazing.</p>

<p>For my specific use case I didn&rsquo;t actually need threading support or readline
support or anything, so I used the instructions on the compile page to create a
very simple binary that only used libc and no other shared libraries.</p>

<pre><code>$ ldd sqlite3
	linux-vdso.so.1 (0x00007ffe8e7e9000)
	libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fbea4988000)
	/lib64/ld-linux-x86-64.so.2 (0x00007fbea4d79000)
</code></pre>

<h3 id="this-is-nice-because-it-makes-it-easy-to-experiment-with-sqlite">this is nice because it makes it easy to experiment with sqlite</h3>

<p>I think it&rsquo;s cool that SQLite&rsquo;s build process is so simple because in the past
I&rsquo;ve had fun <a href="https://jvns.ca/blog/2014/10/02/how-does-sqlite-work-part-2-btrees/">editing sqlite&rsquo;s source code</a> to
understand how its btree implementation works.</p>

<p>This isn&rsquo;t really super surprising given what I know about SQLite (it&rsquo;s made to
work really well in restricted / embedded contexts, so it makes sense that it
would be possible to compile it in a really simple/minimal way). But it is
super nice!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Your Linux Toolbox: a box set of my free zines]]></title>
    <link href="https://jvns.ca/blog/2019/10/21/print-collection-of-my-first-7-zines/"/>
    <updated>2019-10-21T16:15:19+00:00</updated>
    <id>https://jvns.ca/blog/2019/10/21/print-collection-of-my-first-7-zines/</id>
    <content type="html"><![CDATA[

<p>About a year and a half ago, <a href="https://nostarch.com/">No Starch Press</a> got in
touch with me about publishing a print box set of my zines. I have two kinds of
<a href="https://wizardzines.com">zines</a> right now:</p>

<ul>
<li>6 free zines (which are the first ones I wrote)</li>
<li>6 zines that cost $10-$12 each (the newer ones)</li>
</ul>

<p>This set is basically a really lovely box set of all of the free zines, plus
Bite Size Linux :). Here&rsquo;s what&rsquo;s in the box:</p>

<ul>
<li><a href="https://wizardzines.com/zines/strace">Spying on your programs with strace</a></li>
<li><a href="https://wizardzines.com/zines/wizard">So you want to be a wizard</a></li>
<li><a href="https://wizardzines.com/zines/networking">Networking! ACK!</a></li>
<li><a href="https://wizardzines.com/zines/tcpdump">Let&rsquo;s learn tcpdump!</a></li>
<li><a href="https://wizardzines.com/zines/perf">Profiling and tracing with perf</a></li>
<li><a href="https://wizardzines.com/zines/debugging">Linux debugging tools you&rsquo;ll love</a></li>
<li><a href="https://wizardzines.com/zines/bite-size-linux">Bite Size Linux</a></li>
</ul>

<div align="center">
<a href="https://jvns.ca/images/toolbox-inbox.jpeg"><img src="https://jvns.ca/images/toolbox-inbox.jpeg" width="300px"></a>
</div>

<p>I&rsquo;m really happy to get these zines into print, and that I can still give away
all of the zines in the box away for free on my website &ndash; I asked them to
write it into my publishing contract that I could still give them away, and
they did :)</p>

<h3 id="what-it-looks-like">what it looks like</h3>

<p>Here are the front covers of the zines in the box. We got colour covers
illustrated for all of them, done by Vladimir Kašiković.</p>

<p><a href="https://jvns.ca/images/toolbox-front.jpeg"><img src="https://jvns.ca/images/toolbox-front.jpeg" width="500px"></a></p>

<p>We had the idea to make the back covers a rainbow and I&rsquo;m delighted about it:</p>

<p><a href="https://jvns.ca/images/toolbox-back.jpeg"><img src="https://jvns.ca/images/toolbox-back.jpeg" width="500px"></a></p>

<p>There&rsquo;s this fun &ldquo;this toolbox belongs to:&rdquo; detail on the bottom:</p>

<p><a href="https://jvns.ca/images/toolbox-belongsto.jpeg"><img src="https://jvns.ca/images/toolbox-belongsto.jpeg" width="500px"></a></p>

<h3 id="where-to-get-it">where to get it</h3>

<p>It&rsquo;s in a bunch of physical bookstores, and online! Here are a bunch of links to places you could get it:</p>

<p>North America:</p>

<ul>
<li><a href="https://nostarch.com/linuxtoolbox">No Starch Press&rsquo;s website</a> (you can use code WIZARD for 25% off)</li>
<li>Amazon: <a href="https://amzn.to/2oS6W94">USA</a>, <a href="https://www.amazon.ca/Your-Linux-Toolbox-Julia-Evans/dp/1593279779">Canada</a>, <a href="https://www.amazon.com.mx/Your-Linux-Toolbox-Julia-Evans/dp/1593279779">Mexico</a></li>
<li><a href="https://www.powells.com/book/-9781593279776">Powell&rsquo;s</a></li>
<li><a href="https://www.barnesandnoble.com/w/your-linux-toolbox-julia-evans/1130017024#/">Barnes &amp; Noble</a></li>
<li><a href="https://www.chapters.indigo.ca/en-ca/books/your-linux-toolbox-a-zine/9781593279776-item.html">Chapters</a> (Canada)</li>
<li><a href="https://www.alibris.com/Your-Linux-Toolbox-A-Zine-Boxset-Julia-Evans/book/42519152?matches=17">Alibris</a></li>
</ul>

<p>Europe:</p>

<ul>
<li>Amazon: <a href="https://www.amazon.co.uk/Your-Linux-Toolbox-Julia-Evans/dp/1593279779">UK</a>, <a href="https://www.amazon.de/Become-Linux-Wizard-Zine-Boxset/dp/1593279779">Germany</a>, <a href="https://www.amazon.es/Become-Linux-Wizard-Zine-Boxset/dp/1593279779">Spain</a>, <a href="https://www.amazon.it/Become-Linux-Wizard-Zine-Boxset/dp/1593279779">Italy</a>, <a href="https://www.amazon.fr/Become-Linux-Wizard-Zine-Boxset/dp/1593279779">France</a>, etc</li>
<li><a href="https://www.waterstones.com/book/the-linux-toolbox/julia-evans/9781593279776">Waterstones</a></li>
</ul>

<p>Asia/Pacific:</p>

<ul>
<li><a href="https://www.fishpond.com.au/Books/Your-Linux-Toolbox-Julia-Evans/9781593279776">Fishpond</a> (Australia)</li>
<li><a href="https://www.angusrobertson.com.au/books/your-linux-toolbox-julia-evans/p/9781593279776">Angus &amp; Robertson</a> (Australia)</li>
<li>Amazon: <a href="https://www.amazon.in/Your-Linux-Toolbox-Julia-Evans/dp/1593279779">India</a></li>
</ul>

<p>More:</p>

<ul>
<li><a href="https://wordery.com/your-linux-toolbox-julia-evans-9781593279776?cTrk=MTYzMjUwNDI3fDVkYWU0MjM3ZWU4OWU6MToxOjVkYWU0MjJlZWY0YzMyLjkwMDI5NzA5OmQxMWZhZGRi">Wordery</a> (free worldwide shipping)</li>
<li><a href="https://www.bookdepository.com/Your-Linux-Toolbox/9781593279776">Book Depository</a> (free worldwide shipping)</li>
</ul>

<h3 id="why-i-m-doing-this-to-learn-about-print">why I&rsquo;m doing this: to learn about print!</h3>

<p>I don&rsquo;t necessarily expect to make a lot of money from this box set
(I get 10% or less of each sale, vs 97% for sales of my <a href="https://wizardzines.com">other zines</a> online) but that&rsquo;s not my
priority with this project &ndash; I did it because I love the free zines I
wrote, I wanted to make a really nice print version of them, and I wanted to
learn about how print works and how traditional publishing works! I&rsquo;ve already
learned a lot about how publishing works and it&rsquo;s been super interesting.</p>

<p>People have been very excited about this print project so far which has been
really nice to see! Next I want to make it possible for people to order print
copies of my newer zines, and I&rsquo;m trying to figure out how to do that now. (if
you have a print company that you&rsquo;ve really loved using, let me know!)</p>

<p>I&rsquo;m super happy about the print quality and if you get the box set I really
hope you like it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL queries don't start with SELECT]]></title>
    <link href="https://jvns.ca/blog/2019/10/03/sql-queries-don-t-start-with-select/"/>
    <updated>2019-10-03T10:24:53+00:00</updated>
    <id>https://jvns.ca/blog/2019/10/03/sql-queries-don-t-start-with-select/</id>
    <content type="html"><![CDATA[

<p>Okay, obviously many SQL queries do start with <code>SELECT</code> (and actually this post is only about <code>SELECT</code> queries, not <code>INSERT</code>s or anything).</p>

<p>But! Yesterday I was working on an <a href="https://twitter.com/b0rk/status/1179419244808851462?s=20">explanation of window
functions</a>, and I
found myself googling &ldquo;can you filter based on the result of a window
function&rdquo;. As in &ndash; can you filter the result of a window function in
a WHERE or HAVING or something?</p>

<p>Eventually I concluded &ldquo;window functions must run after WHERE and GROUP BY
happen, so you can&rsquo;t do it&rdquo;. But this led me to a bigger question &ndash; <strong>what
order do SQL queries actually run in?</strong>.</p>

<p>This was something that I felt like I knew intuitively (&ldquo;I&rsquo;ve written at least
10,000 SQL queries, some of them were really complicated! I must know this!&ldquo;)
but I struggled to actually articulate what the order was.</p>

<h3 id="sql-queries-happen-in-this-order">SQL queries happen in this order</h3>

<p>I looked up the order, and here it is! (SELECT isn&rsquo;t the first thing, it&rsquo;s like the 5th thing!) (<a href="https://twitter.com/b0rk/status/1179449535938076673">here it is in a tweet</a>).</p>

<p><small>
(I really want to find a more accurate way of phrasing this than &ldquo;sql queries
happen/run in this order&rdquo; but I haven&rsquo;t figured it out yet)
</small></p>

<div align="center">
<a href="https://jvns.ca/images/sql-queries.jpeg"><img src="https://jvns.ca/images/sql-queries.jpeg" width="400px"></a>
</div>

<p>In a non-image format, the order is:</p>

<ul>
<li><code>FROM/JOIN</code> and all the <code>ON</code> conditions</li>
<li><code>WHERE</code></li>
<li><code>GROUP BY</code></li>
<li><code>HAVING</code></li>
<li><code>SELECT</code> (including window functions)</li>
<li><code>ORDER BY</code></li>
<li><code>LIMIT</code></li>
</ul>

<h3 id="questions-this-diagram-helps-you-answer">questions this diagram helps you answer</h3>

<p>This diagram is about the <em>semantics</em> of SQL queries &ndash; it lets you reason through what a given query will return and answers questions like:</p>

<ul>
<li>Can I do <code>WHERE</code> on something that came from a <code>GROUP BY</code>? (no! WHERE happens before GROUP BY!)</li>
<li>Can I filter based on the results of a window function? (no! window functions happen in <code>SELECT</code>, which happens after both <code>WHERE</code> and <code>GROUP BY</code>)</li>
<li>Can I <code>ORDER BY</code> based on something I did in GROUP BY? (yes! <code>ORDER BY</code> is basically the last thing, you can <code>ORDER BY</code> based on anything!)</li>
<li>When does <code>LIMIT</code> happen? (at the very end!)</li>
</ul>

<p><strong>Database engines don&rsquo;t actually literally run queries in this order</strong> because they
implement a bunch of optimizations to make queries run faster &ndash; we&rsquo;ll get to
that a little later in the post.</p>

<p>So:</p>

<ul>
<li>you can use this diagram when you just want to understand which queries are valid and how to reason about what results of a given query will be</li>
<li>you <em>shouldn&rsquo;t</em> use this diagram to reason about query performance or anything involving indexes, that&rsquo;s a much more complicated thing with a lot more variables</li>
</ul>

<h3 id="confounding-factor-column-aliases">confounding factor: column aliases</h3>

<p>Someone on Twitter pointed out that many SQL implementations let you use the syntax:</p>

<pre><code>SELECT CONCAT(first_name, ' ', last_name) AS full_name, count(*)
FROM table
GROUP BY full_name
</code></pre>

<p>This query makes it <em>look</em> like GROUP BY happens after SELECT even though GROUP BY is first, because the
GROUP BY references an alias from the SELECT. But it&rsquo;s not actually necessary
for the GROUP BY to run after the SELECT for this to work &ndash; the database engine can
just rewrite the query as</p>

<pre><code>SELECT CONCAT(first_name, ' ', last_name) AS full_name, count(*)
FROM table
GROUP BY CONCAT(first_name, ' ', last_name)
</code></pre>

<p>and run the GROUP BY first.</p>

<p>Your database engine also definitely does a bunch of checks to make sure that what you
put in SELECT and GROUP BY makes sense together before it even starts to run
the query, so it has to look at the query as a whole anyway before it starts to
come up with an execution plan.</p>

<h3 id="queries-aren-t-actually-run-in-this-order-optimizations">queries aren&rsquo;t actually run in this order (optimizations!)</h3>

<p>Database engines in practice don&rsquo;t actually run queries by joining, and then
filtering, and then grouping, because they implement a bunch of optimizations
reorder things to make the query run faster  as long as reordering things won&rsquo;t
change the results of the query.</p>

<p>One simple example of a reason why need to run queries in a different order to
make them fast is that in this query:</p>

<pre><code>SELECT * FROM
owners LEFT JOIN cats ON owners.id = cats.owner
WHERE cats.name = 'mr darcy'
</code></pre>

<p>it would be silly to do the whole left join and match up all the rows in the 2
tables if you just need to look up the 3 cats named &lsquo;mr darcy&rsquo; &ndash; it&rsquo;s way
faster to do some filtering first for cats named &lsquo;mr darcy&rsquo;. And in this case
filtering first doesn&rsquo;t change the results of the query!</p>

<p>There are lots of other optimizations that database engines implement in
practice that might make them run queries in a different order but there&rsquo;s no
room for that and honestly it&rsquo;s not something I&rsquo;m an expert on.</p>

<h3 id="linq-starts-queries-with-from">LINQ starts queries with <code>FROM</code></h3>

<p>LINQ (a querying syntax in C# and VB.NET) uses the order <code>FROM ... WHERE ... SELECT</code>. Here&rsquo;s an example of a LINQ query:</p>

<pre><code>var teenAgerStudent = from s in studentList
                      where s.Age &gt; 12 &amp;&amp; s.Age &lt; 20
                      select s;
</code></pre>

<p>pandas (my <a href="https://github.com/jvns/pandas-cookbook">favourite data wrangling
tool</a>) also basically works like this,
though you don&rsquo;t need to use this exact order &ndash; I&rsquo;ll often write pandas code
like this:</p>

<pre><code>df = thing1.join(thing2)      # like a JOIN
df = df[df.created_at &gt; 1000] # like a WHERE
df = df.groupby('something', num_yes = ('yes', 'sum')) # like a GROUP BY
df = df[df.num_yes &gt; 2]       # like a HAVING, filtering on the result of a GROUP BY
df = df[['num_yes', 'something1', 'something']] # pick the columns I want to display, like a SELECT
df.sort_values('sometthing', ascending=True)[:30] # ORDER BY and LIMIT
df[:30]
</code></pre>

<p>This isn&rsquo;t because pandas is imposing any specific rule on how you have to
write your code, though. It&rsquo;s just that it often makes sense to write code in
the order JOIN / WHERE / GROUP BY / HAVING. (I&rsquo;ll often put a <code>WHERE</code> first to
improve performance though, and I think most database engines will also do a
WHERE first in practice)</p>

<p><code>dplyr</code> in R also lets you use a different syntax for querying SQL databases
like Postgres, MySQL and SQLite, which is also in a more logical order.</p>

<h3 id="i-was-really-surprised-that-i-didn-t-know-this">I was really surprised that I didn&rsquo;t know this</h3>

<p>I&rsquo;m writing a blog post about this because when I found out the order I was SO
SURPRISED that I&rsquo;d never seen it written down that way before &ndash; it explains
basically everything that I knew intuitively about why some queries are allowed
and others aren&rsquo;t. So I wanted to write it down in the hopes that it will help
other people also understand how to write SQL queries.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zine revenue for 2019]]></title>
    <link href="https://jvns.ca/blog/2019/10/01/zine-revenue-2019/"/>
    <updated>2019-10-01T12:53:58+00:00</updated>
    <id>https://jvns.ca/blog/2019/10/01/zine-revenue-2019/</id>
    <content type="html"><![CDATA[

<p>I occasionally get questions like &ldquo;Can you share what you&rsquo;ve learned about
running a business?&rdquo; The most surprising thing I&rsquo;ve learned is that it&rsquo;s
possible to make money by teaching people computer things on the internet, so I
want to make that a little more concrete by sharing the revenue from the <a href="https://wizardzines.com">zine
business</a> so far in 2019. Here&rsquo;s a graph of revenue by
month (the last month is September 2019):</p>

<p><img src="https://jvns.ca/images/revenue-by-month.png" width=500px></p>

<p>This adds up to $87,858 USD for 2019 so far, which (depending on what I release in the
rest of this year) is on track to be similar to revenue for 2018 ($101,558).</p>

<p>Until quite recently I&rsquo;d been writing zines in my spare time, and now I&rsquo;m <a href="https://jvns.ca/blog/2019/09/13/a-year-explaining-computer-things/">taking a year to focus on it</a>.</p>

<h3 id="how-30-000-for-september-breaks-down">how $30,000 for September breaks down</h3>

<p>The most obvious thing in that monthly revenue graph above is that 2 months
(September and March) have way more revenue than all the others. This is
because I released new zines (Bite Size Networking and HTTP: Learn your browser&rsquo;s
language) in those months.</p>

<p>Here&rsquo;s how the $30,000 for September breaks down:</p>

<ul>
<li>it&rsquo;s 85% sales to individuals, 15% <a href="https://wizardzines.com/zines-team/">corporate licenses</a></li>
<li>it&rsquo;s approximately:

<ul>
<li>$18,000 the new HTTP zine</li>
<li>$10,000 the various zine packs (the 6 pack and the 3 pack)</li>
<li>$2,000 other individual zines</li>
</ul></li>
</ul>

<p>This September was the month with the most sales ever, which is mostly because
of individual humans who find the zines useful (thank you!!).</p>

<h3 id="expenses">expenses</h3>

<p>The main expenses are paying illustrators and an accountant, a mailing list,
and various books I buy to learn how to do things better. They probably come
out to about 10% of revenue or so, and then there are taxes after that.</p>

<h3 id="giving-away-free-copies-has-been-great">giving away free copies has been great</h3>

<p>With the HTTP zine, like many of my previous zines, I&rsquo;ve been giving away one
free copy for every copy that people buy, so that people can get it even if $12
is hard for them to afford. (if you can&rsquo;t afford $12, <a href="https://gumroad.com/l/http-zine/buy-one-give-one">here&rsquo;s the
link</a>, there are about 70
available as I&rsquo;m writing this). I&rsquo;m pretty happy with this setup &ndash; we&rsquo;ve given
away 1358 copies so far. (I think of this as kind of a &ldquo;sales&rdquo; statistic too)</p>

<p>I think I want to automate the system to give away free copies a bit more soon
(like by automatically updating the number of free zines available using the
Gumroad API instead of periodically doing it manually).</p>

<h3 id="hopefully-this-is-a-useful-data-point">hopefully this is a useful data point!</h3>

<p>Writing about money on the internet is weird, so this will probably be the
first and last zine revenue post, but I&rsquo;m writing it down in the hopes that
it&rsquo;s a useful data point for others. I thought for a long time that you could
only really make money from writing on the internet with ads or sponsorships,
but it&rsquo;s not true!</p>

<p>The goal of this isn&rsquo;t to say &ldquo;you should run a business&rdquo; or anything, just
that this is a thing that&rsquo;s possible in the world and that many developers
do really value good educational materials and are happy to pay for them (if
you&rsquo;re one of those people, thank you!)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on building SQL exercises]]></title>
    <link href="https://jvns.ca/blog/2019/09/30/notes-on-building-sql-exercises/"/>
    <updated>2019-09-30T12:35:51+00:00</updated>
    <id>https://jvns.ca/blog/2019/09/30/notes-on-building-sql-exercises/</id>
    <content type="html"><![CDATA[

<p>In the last couple of weeks I&rsquo;ve been working on some interactive SQL exercises
to help people get better at writing SQL queries. This is a pretty new thing
for me so I thought I&rsquo;d write a few notes about my process so far!</p>

<h3 id="why-sql-is-exciting-distributed-sql-engines">why SQL is exciting: distributed SQL engines</h3>

<p>To me the reason why SQL is exciting is that a lot of companies are storing
their data in distributed SQL databases (Google BigQuery, Amazon Redshift,
Spark SQL, Presto, etc) that let you run a complicated query across a billion
rows pretty quickly! They&rsquo;re fast partly because they&rsquo;re designed to run your
query across possibly tens or hundreds of computers.</p>

<p>At my last job I wrote thousands of SQL queries to do data analysis while I was
working on the machine learning team, mostly ad hoc queries to answer questions
I had about our data. I learned a lot of fun tricks to make them faster /
easier to write and I&rsquo;ve never really talked about it!</p>

<p>So I think SQL is a really nice way to go from &ldquo;I have this sort of complicated
question about billions of rows of data&rdquo; to &ldquo;ok, that&rsquo;s the answer, great, I
can move on&rdquo;.</p>

<h3 id="why-write-exercises-knowledge-skills">why write exercises: knowledge != skills</h3>

<p>This is the first time I&rsquo;m really trying in earnest to write exercises to teach
something, instead of just explanations of the thing. The reason I&rsquo;m doing this
is that I read <a href="https://www.amazon.com/Design-People-Learn-Voices-Matter/dp/0321768434">Design for how people learn</a>
by Julie Dirksen and she makes the point that <strong>knowledge</strong> is different from
<strong>skills</strong>.</p>

<p>She defines a &ldquo;skill&rdquo; as &ldquo;something you have to practice&rdquo;. And SQL is
definitely something that you have to practice if you want to learn it! So I
thought &ndash; SQL is a relatively simple skill (as
programming/programming-adjacent skills go!), maybe I can make something
interactive and relatively simple to help people improve their SQL skills!</p>

<p>It&rsquo;s also, well, a challenge, and I like trying things I haven&rsquo;t tried before.</p>

<h3 id="how-i-m-doing-it-start-with-a-challenge">how I&rsquo;m doing it: start with a challenge</h3>

<p>I started out doing these SQL exercises in kind of the obvious way: start out
with easy exercises, and then make them harder and harder over time to
introduce new concepts. But when I watched people trying it out, I noticed a
problem &ndash; a lot of people already <strong>know</strong> some SQL, and sometimes they would go
through all the exercises without learning anything at all! That&rsquo;s no fun!</p>

<p>So I came up with a different structure for each section of the SQL exercises:</p>

<ol>
<li>Start with a &ldquo;challenge&rdquo; that tests the skill the section is trying to teach.</li>
<li>If the challenge is too hard, move on to a bunch of easier exercises that teach you the skills you need to solve the challenge.</li>
</ol>

<p>Since showing is easier than explaining: <a href="https://joins-238123.netlify.com/aggregations/">here&rsquo;s a draft of a page teaching
GROUP BY</a>. Here&rsquo;s a screenshot of what the initial &ldquo;challenge&rdquo; for basic group by looks like:</p>

<p><a href="https://jvns.ca/images/aggregation-challenge.png"><img src="https://jvns.ca/images/aggregation-challenge.png" width="500px"></a></p>

<p>I think that challenge in particular isn&rsquo;t very good yet (I have a lot of work to do!) but that&rsquo;s the idea.</p>

<h3 id="how-i-m-getting-feedback-anonymously-track-responses">how I&rsquo;m getting feedback: anonymously track responses</h3>

<p>Early on I also realized that I needed to get feedback about which challenges people were finding hard / easy. Every time someone runs a query, I track</p>

<ul>
<li>a randomly generated UUID for the person doing the challenge (like <code>f139a44c-ef09-43d2-8d7d-cabba9c28aa1</code>)</li>
<li>the query they ran</li>
<li>the puzzle they were solving</li>
</ul>

<p>I&rsquo;ve already learned a lot from this, for example:</p>

<ul>
<li>at first I required that the column names match, but it resulted in a lot of people getting the &ldquo;wrong&rdquo; answer for no good reason, so I removed that requirement</li>
<li>when I&rsquo;m not clear about how the results should be ordered, often people end up with the right answer except in the &ldquo;wrong&rdquo; order. Still need to do something about that.</li>
<li>if I don&rsquo;t explain the syntax for <code>COUNT(DISTINCT col)</code>, some people end up using the wrong syntax and getting stuck</li>
<li>in the joins exercise, some people get stuck on join order. (they do <code>x LEFT join y</code> instead of <code>y LEFT JOIN x</code> and then don&rsquo;t get the right answer)</li>
</ul>

<p>So basically (in addition to making more exercises) I think I need to spend more time cataloguing where/how people are getting stuck in practice and helping make sure fewer people get stuck.</p>

<h3 id="the-tech-stack">the tech stack</h3>

<p>To build this, I&rsquo;m using:</p>

<ul>
<li><a href="https://github.com/kripken/sql.js">sql.js</a> to run the SQL queries in the browser with SQLite (there&rsquo;s no server, it&rsquo;s all done in the browser, so nobody can take down the server by running really expensive queries :) )</li>
<li><a href="https://firebase.google.com/docs/firestore">firestore</a> to store the queries people are trying out</li>
<li><a href="https://vuejs.org">vue.js</a> to manage Javascript components</li>
<li><a href="https://www.typescriptlang.org/">typescript</a> to compensate a bit for my lack of Javascript experience and help me refactor my code more easily</li>
<li><a href="https://tailwindcss.com/">tailwind css</a> for CSS</li>
</ul>

<p>I also bought the <a href="https://refactoringui.com/">Refactoring UI</a> book to try to improve my web design skills a tiny bit. I think it&rsquo;s helped a little so far.</p>

<p>Vue components let me really easily add new challenges/exercises to a page like this:</p>

<pre><code>&lt;Puzzle
   id=&quot;count-the-owners&quot;
   title='Count the number of different cat owners'
   description=&quot;
   You can use &lt;code&gt;COUNT(DISTINCT column)&lt;/code&gt; to count distinct values of a column. (you can also do &lt;code&gt;SUM(DISTINCT column)&lt;/code&gt; or &lt;code&gt;AVG(DISTINCT column)&lt;/code&gt; but I'm not sure why that would be useful.
   &quot;
   answer= &quot;
   SELECT count(distinct(owner)) AS num_owners
   from cats
   &quot;
   v-bind:table_names='[&quot;cats&quot;]'
   &gt;
&lt;/Puzzle&gt;
</code></pre>

<h3 id="the-goal-make-something-that-s-worth-100-or-so">the goal: make something that&rsquo;s worth $100 or so</h3>

<p>What I&rsquo;m working towards is making exercises &amp; challenges that would help
someone with beginner/intermediate SQL skills improve their SQL fluency enough
that it&rsquo;d easily be worth $100 to them. We&rsquo;ll see if I can get there! I don&rsquo;t
know whether I&rsquo;ll price it at $100, but that&rsquo;s my goal for how useful it should
be.</p>

<p>The person I have in mind is sort of (as usual) myself 6 years ago, when I&rsquo;d
<em>heard</em> of SQL and could write a basic query but if you gave me a table of VERY
INTERESTING DATA I couldn&rsquo;t really effectively use SQL to answer the questions
I had about it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Taking a year to explain computer things]]></title>
    <link href="https://jvns.ca/blog/2019/09/13/a-year-explaining-computer-things/"/>
    <updated>2019-09-13T11:05:15+00:00</updated>
    <id>https://jvns.ca/blog/2019/09/13/a-year-explaining-computer-things/</id>
    <content type="html"><![CDATA[

<p>I&rsquo;ve been working on explaining computer things I&rsquo;m learning on this blog for 6 years.
I wrote one of my first posts, <a href="https://jvns.ca/blog/2013/09/30/hacker-school-day-2-what-does-a-shell-even-do/">what does a shell even do?</a> on
Sept 30, 2013. Since then, I&rsquo;ve written 11 zines, 370,000 words on this blog, and
given 20 or so talks. So it seems like I like explaining things a lot.</p>

<h3 id="tl-dr-i-m-going-to-work-on-explaining-computer-things-for-a-year">tl;dr: I&rsquo;m going to work on explaining computer things for a year</h3>

<p>Here&rsquo;s the exciting news: I left my job a month ago and my plan is to spend the next year working on
explaining computer things!</p>

<p>As for why I&rsquo;m doing this &ndash; I was talking through some reasons with my friend Mat last night and he
said &ldquo;well, sometimes there are things you just feel compelled to do&rdquo;. I think that&rsquo;s all there is
to it :)</p>

<h3 id="what-does-explain-computer-things-mean">what does &ldquo;explain computer things&rdquo; mean?</h3>

<p>I&rsquo;m planning to:</p>

<ol>
<li>write some more zines (maybe I can write 10 zines in a year? we&rsquo;ll see! I want to tackle both
general-interest and slightly more niche topics, we&rsquo;ll see what happens).</li>
<li>work on some more interactive ways to learn things. I learn things best by trying things out and
breaking them, so I want to see if I can facilitate that a little bit for other people. I started
a project around this in May which has been on the backburner for a bit but which I&rsquo;m excited
about. Hopefully I&rsquo;ll release it soon and then you can try it out and tell me what you think!</li>
</ol>

<p>I say &ldquo;a year&rdquo; because I think I have at least a year&rsquo;s worth of ideas and I can&rsquo;t predict how I&rsquo;ll
feel after doing this for a year.</p>

<h3 id="how-run-a-business">how: run a business</h3>

<p>I started a corporation almost exactly a year ago, and I&rsquo;m planning to keep running my
explaining-things efforts as a business. This business has been making more than I made in my first
programming job (that is, definitely enough money to live on!), which has been really surprising
and great (thank you!).</p>

<p>some parameters of the business:</p>

<ul>
<li>I&rsquo;m not planning to hire employees or anything, it&rsquo;ll just be me and some (awesome) freelancers.
The biggest change I have in mind is that I&rsquo;m hoping to find a freelance editor to help me with editing.</li>
<li>I also don&rsquo;t have any specific plans for world domination or to work 80-hour weeks.  I&rsquo;m just
going to make zines &amp; things that explain computer concepts and sell them on the internet, like
I&rsquo;ve been doing.</li>
<li>No commissions or consulting work, just building ideas I have</li>
</ul>

<p>It&rsquo;s been pretty interesting to learn more about running a small business and so far I like it more
than I thought I would. (except for taxes, which I like exactly as much as I thought I would)</p>

<h3 id="that-s-all">that&rsquo;s all!</h3>

<p>I&rsquo;m excited to keep making explanations of computer things and to have more time to do it. This blog
might change a bit away from &ldquo;here&rsquo;s what I&rsquo;m learning at work these days&rdquo; and towards &ldquo;here are
attempts at explaining things that I mostly already know&rdquo;. It&rsquo;ll be different!  We&rsquo;ll see how it
goes!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New zine: HTTP: Learn your browser's language!]]></title>
    <link href="https://jvns.ca/blog/2019/09/12/new-zine-on-http/"/>
    <updated>2019-09-12T12:13:27+00:00</updated>
    <id>https://jvns.ca/blog/2019/09/12/new-zine-on-http/</id>
    <content type="html"><![CDATA[

<p>Hello! I&rsquo;ve released a new zine! It&rsquo;s called &ldquo;HTTP: Learn your browsers language!&rdquo;</p>

<p>You can get it for $12 at <a href="https://gum.co/http-zine">https://gum.co/http-zine</a>. If you buy it, you&rsquo;ll get a PDF that you can
either read on your computer or print out.</p>

<p>Here&rsquo;s the cover and table of contents:</p>

<div align="center">
<a href="https://gum.co/http-zine"><img width="250px" src="https://jvns.ca/images/http-zine-cover.png"></a>
<a href="https://jvns.ca/images/http-zine-toc.png"><img width="250px" src="https://jvns.ca/images/http-zine-toc.png"></a>
</div>

<h3 id="why-http">why http?</h3>

<p>I got the idea for this zine from talking to <a href="https://twitter.com/polotek">Marco Rogers</a> &ndash; he
mentioned that he thought that new web developers / mobile developers would really benefit from
understanding the fundamentals of HTTP better, I thought &ldquo;OOH I LOVE TALKING ABOUT HTTP&rdquo;, wrote a
few pages about HTTP, saw they were helping people, and decided to write a whole zine about HTTP.</p>

<p>HTTP is important to understand because it runs the entire web &ndash; if you understand how HTTP
requests and responses work, then it makes it WAY EASIER to debug why your web application isn&rsquo;t
working properly. Caching, cookies, and a lot of web security are implemented using HTTP headers, so
if you don&rsquo;t understand HTTP headers those things seem kind of like impenetrable magic. But actually
the HTTP protocol is fundamentally pretty simple &ndash; there are a lot of complicated details but the
basics are pretty easy to understand.</p>

<p>So the goal of this zine is to teach you the basics so you can easily look up and understand the
details when you need them.</p>

<h3 id="what-it-looks-like-printed-out">what it looks like printed out</h3>

<p>All of my zines are best printed out (though you get a PDF you can read on your computer too!), so
here are a couple of pictures of what it looks like when printed. I always ask my illustrator to
make both a black and white version and a colour version of the cover so that it looks great when
printed on a black and white printer.</p>

<p><a href="https://gum.co/http-zine"><img width="75%" src="https://jvns.ca/images/http-zine-cover.jpeg"></a>
<a href="https://jvns.ca/images/same-origin-policy.jpeg"><img width="75%" src="https://jvns.ca/images/same-origin-policy.jpeg"></a></p>

<p>(if you click on that &ldquo;same origin policy&rdquo; image, you can make it bigger)</p>

<p>The zine comes with 4 print PDFs in addition to a PDF you can just read on your
computer/phone:</p>

<ul>
<li>letter / colour</li>
<li>letter / b&amp;w</li>
<li>a4 / colour</li>
<li>a4 / b&amp;w</li>
</ul>

<h3 id="zines-for-your-team">zines for your team</h3>

<p>You can also buy this zine for your team members at work to help them learn HTTP!</p>

<p>I&rsquo;ve been trying to get the pricing right for this for a while &ndash; I used to do it based on size of
company, but that didn&rsquo;t seem quite right because sometimes people would want to buy the zine for a
small team at a big company. So I&rsquo;ve switched to pricing based on the number of copies you want to
distribute at your company.</p>

<p>Here&rsquo;s the link: <a href="https://wizardzines.com/zines-team/">zines for your team!</a>.</p>

<h3 id="the-tweets">the tweets</h3>

<p>When I started writing zines, I would just sit down, write down the things I thought were important,
and be done with it.</p>

<p>In the last year and a half or so I&rsquo;ve taken a different approach &ndash; instead of writing everything
and then releasing it, instead I write a page at a time, post the page to Twitter, and then improve it and
decide what page to write next based on the questions/comments I get on Twitter. If someone replies
to the tweet and asks a question that shows that what I wrote is unclear, I can improve it! (I love
getting replies on twitter asking clarifiying questions!).</p>

<p>Here are all the initial drafts of the pages I wrote and posted on twitter, in chronological order.
Some of the pages didn&rsquo;t make it into the zine at all, and I needed to do a lot of editing at the
end to figure out the right order and make them all work coherently together in a zine instead of
being a bunch of independent tweets.</p>

<ul>
<li>Jul 1: <a href="https://twitter.com/b0rk/status/1145824140462608387">http status codes </a><br /></li>
<li>Jul 2: <a href="https://twitter.com/b0rk/status/1145896193077256197">anatomy of a HTTP response </a><br /></li>
<li>Jul 2: <a href="https://twitter.com/b0rk/status/1146054159214567424">POST requests </a><br /></li>
<li>Jul 2: <a href="https://twitter.com/b0rk/status/1146065212560179202">an example POST request </a><br /></li>
<li>Jul 28: <a href="https://twitter.com/b0rk/status/1155493682885341184">the same origin policy </a><br /></li>
<li>Jul 28: <a href="https://twitter.com/b0rk/status/1155318552129396736">what&rsquo;s HTTP? </a><br /></li>
<li>Jul 30: <a href="https://twitter.com/b0rk/status/1156048630220017665">the most important HTTP request headers </a><br /></li>
<li>Jun 30: <a href="https://twitter.com/b0rk/status/1145362860136177664">anatomy of a HTTP request </a><br /></li>
<li>Aug 4: <a href="https://twitter.com/b0rk/status/1158012032651862017">content delivery networks </a><br /></li>
<li>Aug 6: <a href="https://twitter.com/b0rk/status/1158726129508868097">caching headers </a><br /></li>
<li>Aug 6: <a href="https://twitter.com/b0rk/status/1158848054142873603">how cookies work </a><br /></li>
<li>Aug 7: <a href="https://twitter.com/b0rk/status/1159163613938167808">redirects </a><br /></li>
<li>Aug 8: <a href="https://twitter.com/b0rk/status/1159492669384658944">45 seconds on the Accept-Language HTTP header </a><br /></li>
<li>Aug 9: <a href="https://twitter.com/b0rk/status/1159812119099060224">HTTPS: HTTP + security </a><br /></li>
<li>Aug 9: <a href="https://twitter.com/b0rk/status/1159829608595804160">today in 45 second video experiments: the Range header </a><br /></li>
<li>Aug 9: <a href="https://twitter.com/b0rk/status/1159839824594915335">some HTTP exercises to try </a><br /></li>
<li>Aug 10: <a href="https://twitter.com/b0rk/status/1160185182323970050">some security headers </a><br /></li>
<li>Aug 12: <a href="https://twitter.com/b0rk/status/1160933788949655552">using HTTP APIs </a><br /></li>
<li>Aug 13: <a href="https://twitter.com/b0rk/status/1161283690925834241">what&rsquo;s with those headers that start with x-? </a><br /></li>
<li>Aug 13: <a href="https://twitter.com/b0rk/status/1161262574031265793">important HTTP response headers </a><br /></li>
<li>Aug 14: <a href="https://twitter.com/b0rk/status/1161679906415218690">HTTP request methods (part 1) </a><br /></li>
<li>Aug 14: <a href="https://twitter.com/b0rk/status/1161680137865367553">HTTP request methods (part 2) </a><br /></li>
<li>Aug 15: <a href="https://twitter.com/b0rk/status/1161997141876903936">how URLs work </a><br /></li>
<li>Aug 16: <a href="https://twitter.com/b0rk/status/1162392625057583104">CORS </a><br /></li>
<li>Aug 19: <a href="https://twitter.com/b0rk/status/1163460967067541504">why the same origin policy matters </a><br /></li>
<li>Aug 21: <a href="https://twitter.com/b0rk/status/1164181027469832196">HTTP headers </a><br /></li>
<li>Aug 24: <a href="https://twitter.com/b0rk/status/1165277002791829510">how to learn more about HTTP </a><br /></li>
<li>Aug 25: <a href="https://twitter.com/b0rk/status/1165623594917007362">HTTP/2 </a><br /></li>
<li>Aug 27: <a href="https://twitter.com/b0rk/status/1166466933912494081">certificates </a></li>
</ul>

<p>Writing zines one tweet at a time has been really fun. I think it improves the quality a lot,
because I get a ton of feedback along the way that I can use to make the zine better. There are also
some experimental 45 second tiny videos in that list, which are definitely not part of the zine, but
which were fun to make and which I might expand on in the future.</p>

<h3 id="examplecat-com">examplecat.com</h3>

<p>One tiny easter egg in the zine: I have a lot of examples of HTTP requests, and I wasn&rsquo;t sure for a
long time what domain I should use for the examples. I used example.com a bunch, and google.com and
twitter.com sometimes, but none of those felt quite right.</p>

<p>A couple of days before publishing the zine I finally had an epiphany &ndash; my example on the cover was
requesting a picture of a cat, so I registered <a href="https://examplecat.com">https://examplecat.com</a> which just has a single
picture of a cat. It also has an ASCII cat if you&rsquo;re browsing in your terminal.</p>

<pre><code>$ curl https://examplecat.com/cat.txt  -i
HTTP/2 200 
accept-ranges: bytes
cache-control: public, max-age=0, must-revalidate
content-length: 33
content-type: text/plain; charset=UTF-8
date: Thu, 12 Sep 2019 16:48:16 GMT
etag: &quot;ac5affa59f554a1440043537ae973790-ssl&quot;
strict-transport-security: max-age=31536000
age: 5
server: Netlify
x-nf-request-id: c5060abc-0399-4b44-94bf-c481e22c2b50-1772748

\    /\
 )  ( ')
(  /  )
 \(__)|
</code></pre>

<h3 id="more-zines-at-wizardzines-com">more zines at wizardzines.com</h3>

<p>If you&rsquo;re interested in the idea of programming zines and haven&rsquo;t seen my zines before, I have a
bunch more at <a href="https://wizardzines.com">https://wizardzines.com</a>. There are 6 free zines there:</p>

<ul>
<li><a href="https://wizardzines.com/zines/wizard/">so you want to be a wizard</a></li>
<li><a href="https://wizardzines.com/zines/tcpdump/">let&rsquo;s learn tcpdump!</a></li>
<li><a href="https://wizardzines.com/zines/strace/">spying on your programs with strace</a></li>
<li><a href="https://wizardzines.com/zines/networking/">networking! ACK!</a></li>
<li><a href="https://wizardzines.com/zines/debugging/">linux debugging tools you&rsquo;ll love</a></li>
<li><a href="https://wizardzines.com/zines/perf/">profiling and tracing with perf</a></li>
</ul>

<h3 id="next-zine-not-sure-yet">next zine: not sure yet!</h3>

<p>Some things I&rsquo;m considering for the next zine:</p>

<ul>
<li>debugging skills (I started writing a bunch of pages about debugging but switched gears to the
HTTP zine because I got really excited about that. but debugging is my favourite thing so I&rsquo;d like
to get this done at some point)</li>
<li>gdb (a short zine in the spirit of <a href="https://wizardzines.com/zines/tcpdump/">let&rsquo;s learn tcpdump</a>)</li>
<li>relational databases (what&rsquo;s up with transactions?)</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to put an HTML page on the internet]]></title>
    <link href="https://jvns.ca/blog/2019/09/06/how-to-put-an-html-page-on-the-internet/"/>
    <updated>2019-09-06T15:56:37+00:00</updated>
    <id>https://jvns.ca/blog/2019/09/06/how-to-put-an-html-page-on-the-internet/</id>
    <content type="html"><![CDATA[

<p>One thing I love about the internet is that it&rsquo;s SO EASY to put static HTML websites on the
internet.  Someone asked me today how to do it, so I thought I&rsquo;d write down how really quickly!</p>

<h3 id="just-an-html-page">just an HTML page</h3>

<p>All of my sites are just static HTML and CSS. My web design skills are relatively minimal
(<a href="https://wizardzines.com">https://wizardzines.com</a> is the most complicated site I&rsquo;ve developed on my own), so keeping all my
internet sites relatively simple means that I have some hope of being able to make changes / fix
things without spending a billion hours on it.</p>

<p>So we&rsquo;re going to take as minimal of an approach as possible in this blog post &ndash; just one HTML page.</p>

<h3 id="the-html-page">the HTML page</h3>

<p>The website we&rsquo;re going to put on the internet is just one file, called <code>index.html</code>. You can find it
at <a href="https://github.com/jvns/website-example">https://github.com/jvns/website-example</a>, which is a
Github repository with exactly one file in it.</p>

<p>The HTML file has some CSS in it to make it look a little less boring, which is partly copied from
<a href="https://example.com">https://example.com</a>.</p>

<h3 id="how-to-put-the-html-page-on-the-internet">how to put the HTML page on the internet</h3>

<p>Here are the steps:</p>

<ol>
<li>sign up for a <a href="https://neocities.org/">Neocities</a> account</li>
<li>copy the index.html into the index.html in your neocities site</li>
<li>done</li>
</ol>

<p>The index.html page above is on the internet at
<a href="https://julia-example-website.neocities.org/">julia-example-website.neocities.com</a>, if you view source you&rsquo;ll see that it&rsquo;s
the same HTML as in the github repo.</p>

<p>I think this is probably the simplest way to put an HTML page on the internet (and it&rsquo;s a throwback
to Geocities, which is how I made my first website in 2003) :). I also like that Neocities (like
<a href="https://glitch.com">glitch</a>, which I also love) is about experimentation and learning and having
fun..</p>

<h3 id="other-options">other options</h3>

<p>This is definitely not the only easy way &ndash; Github pages and Gitlab pages and Netlify will all automatically
publish a site when you push to a Git repository, and they&rsquo;re all very easy to use (just connect
them to your github repository and you&rsquo;re done). I personally use the Git repository approach
because not having things in Git makes me nervous &ndash; I like to know what changes to my website I&rsquo;m
actually pushing. But I think if you just want to put an HTML site on the internet for the first
time and play around with HTML/CSS, Neocities is a really nice way to do it.</p>

<p>If you want to actually use your website for a Real Thing and not just to play around you probably
want to buy a domain and link it to your website so that you can change hosting providers in the
future, but that is a bit less simple.</p>

<h3 id="this-is-a-good-possible-jumping-off-point-for-learning-html">this is a good possible jumping off point for learning HTML</h3>

<p>If you are a person who is comfortable editing files in a Git repository but wants to practice
HTML/CSS, I think this is a fun way to put a website on the internet and play around! I really like
the simplicity of it &ndash; there&rsquo;s literally just one file, so there&rsquo;s no fancy extra magic to get in the
way of understanding what&rsquo;s going on.</p>

<p>There are also a bunch of ways to complicate/extend this, like this blog is actually generated with
<a href="https://gohugo.io/">Hugo</a> which generates a bunch of HTML files which then go on the internet, but
it&rsquo;s always nice to start with the basics.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to write zines with simple tools]]></title>
    <link href="https://jvns.ca/blog/2019/09/01/ways-to-write-zines-without-fancy-tools/"/>
    <updated>2019-09-01T09:02:43+00:00</updated>
    <id>https://jvns.ca/blog/2019/09/01/ways-to-write-zines-without-fancy-tools/</id>
    <content type="html"><![CDATA[

<p>People often ask me what tools I use to write my zines (<a href="https://twitter.com/b0rk/status/1160171769833185280">the answer is
here</a>). Answering this question as written has
always felt slightly off to me, though, and I couldn&rsquo;t figure out why for a long time.</p>

<p>I finally realized last week that instead of &ldquo;what tools do you use to write zines?&rdquo; some people may
have actually wanted to know &ldquo;how can I do this myself?&rdquo;! And &ldquo;buy a $500 iPad&rdquo; is not a terribly
useful answer to that question &ndash; it&rsquo;s not how I got started, iPads are kind of a weird fancy way to
write zines, and most people don&rsquo;t have them.</p>

<p>So this blog post is about more traditional (and easier to get started with) ways to write zines.</p>

<p>We&rsquo;re going to start out by talking about the mechanics of how to write the zine, and then talk
about how to assemble it into a booklet.</p>

<h3 id="way-1-write-it-on-paper">Way 1: Write it on paper</h3>

<p>This is how I made my first zine (spying on your programs with strace) which you can see here: <a href="https://jvns.ca/strace-zine-unfolded.pdf">https://jvns.ca/strace-zine-unfolded.pdf</a>.</p>

<p>Here&rsquo;s an example of a page I drew on paper this morning pretty quickly. It looks kind of bad
because I scanned it with my phone, but if you use a real scanner (like I did with the strace PDF
above), the scanned version comes out better.</p>

<p><a href="https://jvns.ca/images/drawing-status-codes.png"><img src="https://jvns.ca/images/drawing-status-codes.png" width=500px></a></p>

<h3 id="way-2-use-a-google-doc">Way 2: Use a Google doc</h3>

<p>The next option is to use a Google doc (or whatever other word processor you prefer). <a href="https://docs.google.com/document/d/1byzfXC0h6hNFlWXaV9peJpX-GamJOrJ70x9nu1dZ-m0/edit?usp=sharing">Here&rsquo;s the Google doc I wrote for the below image</a>, and here&rsquo;s what it looks like:</p>

<p><a href="https://jvns.ca/images/docs-status-codes.png"><img src="https://jvns.ca/images/docs-status-codes.png" width=500px></a></p>

<p>They key thing about this Google doc approach is to apply some &ldquo;less is more&rdquo;. It&rsquo;s intended to be
printed as part of a booklet on <strong>half</strong> a sheet of letter paper, which means everything needs to be
twice as big for it to look good.</p>

<h3 id="way-3-use-an-ipad">Way 3: Use an iPad</h3>

<p>This is what I do (use the Notability app on iPad). I&rsquo;m not going to talk about this method much
because this post is about using more readily available tools.</p>

<p><a href="https://jvns.ca/images/ipad-status-codes.png"><img src="https://jvns.ca/images/ipad-status-codes.png" width=500px></a></p>

<h3 id="way-4-use-a-single-sheet-of-paper">Way 4: Use a single sheet of paper</h3>

<p>This is a subset of &ldquo;Write it on paper&rdquo; &ndash; the <a href="https://en.m.wikibooks.org/wiki/Zine_Making/Putting_pages_together">Wikibooks page on zine making</a> has a great guide that shows how to write out a tiny zine on 1 piece of paper and then fold it up to make a little booklet. Here are the pictures of the steps from the Wikibooks page:</p>

<p><a href="https://jvns.ca/images/Zinemaking-folding-8cut-plan.png"><img src="https://jvns.ca/images/Zinemaking-folding-8cut-plan.png"></a>
<a href="https://jvns.ca/images/Zinemaking-folding-8cut-1.png"><img src="https://jvns.ca/images/Zinemaking-folding-8cut-1.png"></a>
<a href="https://jvns.ca/images/Zinemaking-folding-8cut-2.png"><img src="https://jvns.ca/images/Zinemaking-folding-8cut-2.png"></a>
<a href="https://jvns.ca/images/Zinemaking-folding-8cut-3.png"><img src="https://jvns.ca/images/Zinemaking-folding-8cut-3.png"></a>
<a href="https://jvns.ca/images/Zinemaking-folding-8cut-4.png"><img src="https://jvns.ca/images/Zinemaking-folding-8cut-4.png"></a>
<a href="https://jvns.ca/images/Zinemaking-folding-8cut-5.png"><img src="https://jvns.ca/images/Zinemaking-folding-8cut-5.png"></a>
<a href="https://jvns.ca/images/Zinemaking-folding-8cut-6.png"><img src="https://jvns.ca/images/Zinemaking-folding-8cut-6.png"></a>
<a href="https://jvns.ca/images/Zinemaking-folding-8cut-7.png"><img src="https://jvns.ca/images/Zinemaking-folding-8cut-7.png"></a></p>

<p>Sumana Harihareswara&rsquo;s <a href="https://www.harihareswara.net/pix/playing-with-python-zine/playing-with-python-zine.pdf">Playing with
python</a>
zine is a nice example of a zine that&rsquo;s intended to be folded up in that way.</p>

<h3 id="way-5-adobe-illustrator">Way 5: Adobe Illustrator</h3>

<p>I&rsquo;ve never used Adobe Illustrator so I&rsquo;m not going to pretend that I know anything about it or put
together an example using it, but I hear it&rsquo;s a way people do book layout.</p>

<h3 id="booklets-the-photocopier-method">booklets: the photocopier method</h3>

<p>So you&rsquo;ve written a bunch of pages and want to assemble them into a booklet. One way to do this (and
what I did for my first zine about strace!) is the photocopier method. There&rsquo;s a great guide by Julia Gfrörer in
<a href="https://twitter.com/thorazos/status/1158556879485906944">this tweet</a>, which I&rsquo;m going to reproduce
here:</p>

<p><img src="https://pbs.twimg.com/media/EBQFUC0X4AAPTU1?format=jpg&name=small"><br>
<img src="https://pbs.twimg.com/media/EBQFUC0XsAEBhHf?format=jpg&name=small"><br>
<img src="https://pbs.twimg.com/media/EBQFUC1XUAAKDIB?format=jpg&name=small"><br>
<img src="https://pbs.twimg.com/media/EBQFUDRX4AMkIAr?format=jpg&name=small"></p>

<p>That explanation is excellent and I don&rsquo;t have anything to add. I did it that way and it worked
great.</p>

<p>If you want to buy a print copy of that how-to-make-zines zine from Thruban Press, you can <a href="https://www.etsy.com/thorazos/listing/693692176/thuban-press-guide-to-analog-self?utm_source=Copy&amp;utm_medium=ListingManager&amp;utm_campaign=Share&amp;utm_term=so.lmsm&amp;share_time=1565113962419">get it
here on Etsy</a>.</p>

<h3 id="booklets-the-computer-method">booklets: the computer method</h3>

<p>If you&rsquo;ve made your zine in Google Docs or in another computery way, you probably want a more
computery way of assembling the pages into a booklet.</p>

<p><strong>what I use: pdflatex</strong></p>

<p>I do this using the <code>pdfpages</code> LaTeX extension. This sounds complicated but it&rsquo;s not really, you don&rsquo;t
need to learn latex or anything. You just need to have pdflatex on your system, which is a <code>sudo apt
install texlive-base</code> away on Ubuntu. The steps are:</p>

<ol>
<li>Get a PDF with the pages from your zine (pages need to be a multiple of 4)</li>
<li>Get the latex file from <a href="https://gist.github.com/jvns/b3de1d658e2b44aebb485c35fb1a7a0f">this gist</a></li>
<li>Replace <code>/home/bork/http-zine.pdf</code> with the path to your PDF  and <code>1-28</code> with <code>1-however many
pages are in your zine</code>.</li>
<li>run <code>pdflatex formatted-zine.tex</code></li>
<li>Tweak the parameters until it looks the way you want. The <a href="http://texdoc.net/texmf-dist/doc/latex/pdfpages/pdfpages.pdf">documentation for the pdfpages package is here</a></li>
</ol>

<p>I like using this relatively complicated method because there are always small tweaks I want to make
like &ldquo;oh, the right margin is too big, crop it a little bit&rdquo; and the pdfpages package has tons of
options that let me make those tweaks.</p>

<p><strong>other methods</strong></p>

<ol>
<li>On Linux you can use the <code>pdfjam</code> bash script, which is just a wrapper around the pdfpages latex
package. This is what I used to do but today I find it simpler to use the pdfpages latex package
directly.</li>
<li>There&rsquo;s a program called <a href="https://www.bookletcreator.com/">Booklet Creator</a> for Mac and Windows
that <a href="https://twitter.com/mrfb/status/1159478532545888258">@mrfb uses</a>. It looks pretty simple to
use.</li>
<li>If you convert your PDF to a ps file (with <code>pdf2ps</code> for instance), <code>psnup</code> can do this. I tried
<code>cat file.ps | psbook | psnup -2 &gt; booklet.ps</code> and it worked, though the resulting
PDFs are a little slow to load in my PDF viewer for some reason.</li>
<li>there are probably a ton more ways to do this, if you know more let me know</li>
</ol>

<h3 id="making-zines-is-easy-and-low-tech">making zines is easy and low tech</h3>

<p>That&rsquo;s all! I mostly wanted to explain that zines are an easy low tech thing to do and if you think
making them sounds fun, you definitely 100% do not need to use any fancy expensive tools to do it,
you can literally use some sheets of paper, a Sharpie, a pen, and spend $3 at your local print shop
to use the photocopier.</p>

<h3 id="resources">resources</h3>

<p>summary of the resources I linked to:</p>

<ul>
<li>Guide to putting together zines with a photocopier by Julia Gfrörer: <a href="https://twitter.com/thorazos/status/1158556879485906944">this tweet</a>, <a href="https://www.etsy.com/thorazos/listing/693692176/thuban-press-guide-to-analog-self?utm_source=Copy&amp;utm_medium=ListingManager&amp;utm_campaign=Share&amp;utm_term=so.lmsm&amp;share_time=1565113962419">get it on Etsy</a></li>
<li><a href="https://en.m.wikibooks.org/wiki/Zine_Making/Putting_pages_together">Wikibooks page on zine making</a></li>
<li>Notes on making zines using Google Docs: <a href="https://twitter.com/mrfb/status/1159478532545888258">this twitter thread</a></li>
<li><a href="http://www.stolensharpierevolution.org/">Stolen Sharpie Revolution</a> (the first book I read about
making zines). You can also get it on Amazon if you want but it&rsquo;s probably better to buy directly
from their site.</li>
<li><a href="https://www.bookletcreator.com/">Booklet Creator</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git exercises: navigate a repository]]></title>
    <link href="https://jvns.ca/blog/2019/08/30/git-exercises--navigate-a-repository/"/>
    <updated>2019-08-30T09:25:15+00:00</updated>
    <id>https://jvns.ca/blog/2019/08/30/git-exercises--navigate-a-repository/</id>
    <content type="html"><![CDATA[

<style type="text/css">
.wrap-collabsible {
  margin-bottom: 1.2rem 0;
}

input[type='checkbox'] {
  display: none;
}

.lbl-toggle {
  display: block;

  font-weight: bold;
  font-family: monospace;
  font-size: 1.2rem;
  text-transform: uppercase;
  text-align: center;

  padding: 1rem;

  color: white;
  background: #ff7e3e;

  cursor: pointer;

  border-radius: 7px;
  transition: all 0.25s ease-out;
}

.lbl-toggle:hover {
  color: #ffeeee;
}

.lbl-toggle::before {
  content: ' ';
  display: inline-block;

  border-top: 5px solid transparent;
  border-bottom: 5px solid transparent;
  border-left: 5px solid currentColor;
  vertical-align: middle;
  margin-right: .7rem;
  transform: translateY(-2px);

  transition: transform .2s ease-out;
}

.toggle:checked + .lbl-toggle::before {
  transform: rotate(90deg) translateX(-3px);
}

.collapsible-content {
  max-height: 0px;
  overflow: hidden;
  transition: max-height .25s ease-in-out;
}

.toggle:checked + .lbl-toggle + .collapsible-content {
  max-height: 30050px;
}

.toggle:checked + .lbl-toggle {
  border-bottom-right-radius: 0;
  border-bottom-left-radius: 0;
}

.collapsible-content .content-inner {
  background: #fff1da; /*rgba(250, 224, 66, .2); */
  border-bottom: 1px solid rgba(250, 224, 66, .45);
  border-bottom-left-radius: 7px;
  border-bottom-right-radius: 7px;
  padding: .5rem 1rem;
}
</style>

<p>I think the <a href="https://jvns.ca/blog/2019/08/27/curl-exercises/">curl exercises</a> the other day went
well, so today I woke up and wanted to try writing some Git exercises. Git is a big thing to learn,
probably too big to learn in a few hours, so my first idea for how to break it down was by starting
by <strong>navigating</strong> a repository.</p>

<p>I was originally going to use a toy test repository, but then I thought &ndash; why not a real
repository? That&rsquo;s way more fun! So we&rsquo;re going to navigate the repository for the Ruby programming
language. You don&rsquo;t need to know any C to do this exercise, it&rsquo;s just about getting comfortable with
looking at how files in a repository change over time.</p>

<h3 id="clone-the-repository">clone the repository</h3>

<p>To get started, clone the repository:</p>

<pre><code>git clone https://github.com/ruby/ruby
</code></pre>

<p>The big different thing about this repository (as compared to most of the repositories you&rsquo;ll work
with in real life) is that it doesn&rsquo;t have branches, but it DOES have lots of tags, which are
similar to branches in that they&rsquo;re both just pointers to a commit. So we&rsquo;ll do exercises with tags
instead of branches. The way you <em>change</em> tags and branches are very different, but the way you
<em>look at</em> tags and branches is exactly the same.</p>

<h3 id="a-git-sha-always-refers-to-the-same-code">a git SHA always refers to the same code</h3>

<p>The most important thing to keep in mind while doing these exercises is that a git SHA like
<code>9e3d9a2a009d2a0281802a84e1c5cc1c887edc71</code> always refers to the same code, as explained in this
page. This page is from a zine I wrote with Katie Sylor-Miller called <a href="https://wizardzines.com/zines/oh-shit-git/">Oh shit, git!</a>. (She also has a great site called
<a href="https://ohshitgit.com/">https://ohshitgit.com/</a> that inspired the zine).</p>

<p><a href="https://wizardzines.com/zines/oh-shit-git/samples/ohshit-commit.png">
<img src="https://wizardzines.com/zines/oh-shit-git/samples/ohshit-commit.png" width="100%">
</a></p>

<p>We&rsquo;ll be using git SHAs really heavily in the exercises to get you used to working with them and
to help understand how they correspond to tags and branches.</p>

<h3 id="git-subcommands-we-ll-be-using">git subcommands we&rsquo;ll be using</h3>

<p>All of these exercises only use 5 git subcommands:</p>

<pre><code>git checkout
git log (--oneline, --author, and -S will be useful)
git diff (--stat will be useful)
git show
git status
</code></pre>

<h3 id="exercises">exercises</h3>

<ol>
<li>Check out matz&rsquo;s commit of Ruby from 1998. The commit ID is <code>3db12e8b236ac8f88db8eb4690d10e4a3b8dbcd4</code>. Find out how many lines of code Ruby was at that time.</li>
<li>Check out the current master branch</li>
<li>Look at the history for the file <code>hash.c</code>. What was the last commit ID that changed that file?</li>
<li>Get a diff of how <code>hash.c</code> has changed in the last 20ish years: compare that file on the master
branch to the file at commit <code>3db12e8b236ac8f88db8eb4690d10e4a3b8dbcd4</code>.</li>
<li>Find a recent commit that changed <code>hash.c</code> and look at the diff for that commit</li>
<li>This repository has a bunch of <strong>tags</strong> for every Ruby release. Get a list of all the tags.</li>
<li>Find out how many files changed between tag <code>v1_8_6_187</code> and tag <code>v1_8_6_188</code></li>
<li>Find a commit (any commit) from 2015 and check it out, look at the files very briefly, then go back to the master branch.</li>
<li>Find out what commit the tag <code>v1_8_6_187</code> corresponds to.</li>
<li>List the directory <code>.git/refs/tags</code>. Run <code>cat .git/refs/tags/v1_8_6_187</code> to see the contents
of one of those files.</li>
<li>Find out what commit ID <code>HEAD</code> corresponds to right now.</li>
<li>Find out how many commits have been made to the <code>test/</code> directory</li>
<li>Get a diff of <code>lib/telnet.rb</code> between the commits <code>65a5162550f58047974793cdc8067a970b2435c0</code> and
<code>9e3d9a2a009d2a0281802a84e1c5cc1c887edc71</code>. How many lines of that file were changed?</li>
<li>How many commits were made between Ruby 2.5.1 and 2.5.2 (tags <code>v2_5_1</code> and <code>v2_5_3</code>)</li>
<li>How many commits were authored by <code>matz</code> (Ruby&rsquo;s creator)?</li>
<li>What&rsquo;s the most recent commit that included the word <code>tkutil</code>?</li>
<li>Check out the commit <code>e51dca2596db9567bd4d698b18b4d300575d3881</code> and create a new branch that
points at that commit.</li>
<li>Run <code>git reflog</code> to see all the navigating of the repository you&rsquo;ve done so far</li>
</ol>

<div class="wrap-collabsible">
<input id="collapsible" class="toggle" type="checkbox">
<label for="collapsible" class="lbl-toggle">Solutions</label>
<div class="collapsible-content">
<div class="content-inner">
<p>
<p>
<strong>Question #1: </strong>Check out matz's commit of Ruby from 1998. The commit ID is `3db12e8b236ac8f88db8eb4690d10e4a3b8dbcd4`. Find out how many lines of code Ruby was at that time.
</p>
<p><strong>Solution #1: </strong>
<pre>
git checkout 3db12e8b236ac8f88db8eb4690d10e4a3b8dbcd4
find . -name '*.c' | xargs wc -l
</pre>
</p>
<p>
<strong>Question #2:</strong> Check out the current master branch
</p>
<p><strong>Solution #2:</strong>
<pre>
git checkout master
</pre>
</p>

<p>
<strong>Question #3:</strong> Look at the history for the file `hash.c`. What was the last commit ID that changed that file?

<p><strong>Solution #3:</strong>
<pre>
git log hash.c
# look at the first line to get the commit ID. 
# I got 3df37259d81d9fc71f8b4f0b8d45dc9d0af81ab4.
</pre>
</p>
</p>

<p>
<strong>Question #4:</strong> Get a diff of how `hash.c` has changed in the last 20ish years: compare that file on the master branch to the file at commit `3db12e8b236ac8f88db8eb4690d10e4a3b8dbcd4`.
<p><strong>Solution #4:</strong>
<pre>
git diff 3db12e8b236ac8f88db8eb4690d10e4a3b8dbcd4 hash.c
</pre>
</p>

<p>
<strong>Question #5:</strong> Find a recent commit that changed `hash.c` and look at the diff for that commit
<p><strong>Solution #5:</strong>
<pre>
git log hash.c
# look at the first line to get the commit ID. 
# I got 3df37259d81d9fc71f8b4f0b8d45dc9d0af81ab4.
git show 3df37259d81d9fc71f8b4f0b8d45dc9d0af81ab4
</pre>
</p>
<p>
<strong>Question #6:</strong> This repository has a bunch of **tags** for every Ruby release. Get a list of all the tags.
<p><strong>Solution #6:</strong>
<pre>
git tags
</pre>
</p>
<p>
<strong>Question #7:</strong> Find out how many files changed between tag `v1_8_6_187` and tag `v1_8_6_188`
<p><strong>Solution #7:</strong>
<pre>
git diff v1_8_6_187 v1_8_6_188 --stat
# 5 files!
</pre>
</p>
<p>
<strong>Question #8:</strong> Find a commit (any commit) from 2015 and check it out, look at the files very briefly, then go back to the master branch.
<p><strong>Solution #8:</strong>
<pre>
git log | grep -C 2 ' 2015 ' | head
git checkout bd5d443a56ee4bcb59a0a08776c07dea3ee60121
ls
git checkout master
</pre>
</p>
<p>
<strong>Question #9:</strong> Find out what commit the tag `v1_8_6_187` corresponds to.
<p><strong>Solution #9:</strong>
<pre>
git show v1_8_6_187
</pre>
</p>
<p>
<strong>Question #10:</strong> List the directory `.git/refs/tags`. Run `cat .git/refs/tags/v1_8_6_187` to see the contents of one of those files.
<p><strong>Solution #10:</strong>
<pre>
$ cat .git/refs/tags/v1_8_6_187
928e6916b25aee5b2b379999a3fa8816d40db714
</pre>
</p>
<p>
<strong>Question #11:</strong> Find out what commit ID `HEAD` corresponds to right now.
<p><strong>Solution #11:</strong>
<pre>
git show HEAD
</pre>
</p>
<p>
<strong>Question #12:</strong> Find out how many commits have been made to the `test/` directory
<p><strong>Solution #12:</strong>
<pre>
git log --oneline test/ | wc
</pre>
</p>
<p>
<strong>Question #13:</strong> Get a diff of `lib/telnet.rb` between the commits `f2a91397fd7f9ca5bb3d296ec6df2de6f9cfc7cb` and `e44c9b11475d0be2f63286c1332a48da1b4d8626 `. How many lines of that file were changed?
<p><strong>Solution #13:</strong>
<pre>
git diff f2a91397fd7f9..e44c9b11475d0 lib/tempfile.rb
</pre>
</p>
<p>
<strong>Question #14:</strong> How many commits were made between Ruby 2.5.1 and 2.5.2 (tags `v2_5_1` and `v2_5_3`) 
<p><strong>Solution #14:</strong>
<pre>
git log v2_5_1..v2_5_3 --oneline | wc
</pre>
</p>
<p>
<strong>Question #15:</strong> How many commits were authored by `matz` (Ruby's creator)?
<p><strong>Solution #15:</strong>
<pre>
git log --oneline --author matz | wc -l
</pre>
</p>
<p>
<strong>Question #16:</strong> What's the most recent commit that included the word `tkutil`?
<p><strong>Solution #16:</strong>
<pre>
git log -S tkutil
# result is 6c5f5233db596c2c7708d5807d9a925a3a0ee73a
</pre>
</p>
<p>
<strong>Question #17:</strong> Check out the commit `e51dca2596db9567bd4d698b18b4d300575d3881` and create a new branch that points at that commit. 
<p><strong>Solution #17:</strong>
<pre>
git checkout e51dca2596db9567bd4d698b18b4d300575d3881
git branch my-branch
</pre>
</p>
<p>
<strong>Question #18:</strong> Run `git reflog` to see all the navigating of the repository you've done so far
<p><strong>Solution #18:</strong>
<pre>
git reflog
</pre>
</p>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[curl exercises]]></title>
    <link href="https://jvns.ca/blog/2019/08/27/curl-exercises/"/>
    <updated>2019-08-27T09:29:38+00:00</updated>
    <id>https://jvns.ca/blog/2019/08/27/curl-exercises/</id>
    <content type="html"><![CDATA[

<p>Recently I&rsquo;ve been interested in how people learn things. I was reading Kathy Sierra&rsquo;s great book <a href="https://www.amazon.com/Badass-Making-Awesome-Kathy-Sierra/dp/1491919019">Badass: Making Users Awesome</a>. It talks about the idea of <em>deliberate practice</em>.</p>

<p>The idea is that you find a small micro-skill that can be learned in maybe 3 sessions of 45 minutes,
and focus on learning that micro-skill. So, as an exercise, I was trying to think of a computer
skill that I thought could be learned in 3 45-minute sessions.</p>

<p>I thought that making HTTP requests with <code>curl</code> might be a skill like that, so here are some curl
exercises as an experiment!</p>

<h3 id="what-s-curl">what&rsquo;s curl?</h3>

<p>curl is a command line tool for making HTTP requests. I like it because it&rsquo;s an easy way to test
that servers or APIs are doing what I think, but it&rsquo;s a little confusing at first!</p>

<p>Here&rsquo;s a drawing explaining curl&rsquo;s most important command line arguments (which is page 6 of my <a href="https://wizardzines.com/zines/bite-size-networking">Bite Size Networking</a> zine). You can click to make it bigger.</p>

<p><a href="https://jvns.ca/images/curl.jpeg"><img src="https://jvns.ca/images/curl.jpeg" width="600px"></a></p>

<h3 id="fluency-is-valuable">fluency is valuable</h3>

<p>With any command line tool, I think having fluency is really helpful. It&rsquo;s really nice to be able to
just type in the thing you need. For example recently I was testing out the Gumroad API and I was
able to just type in:</p>

<pre><code>curl https://api.gumroad.com/v2/sales \
                         -d &quot;access_token=&lt;SECRET&gt;&quot; \
                         -X GET  -d &quot;before=2016-09-03&quot;
</code></pre>

<p>and get things working from the command line.</p>

<h3 id="21-curl-exercises">21 curl exercises</h3>

<p>These exercises are about understanding how to make different kinds of HTTP requests with curl.
They&rsquo;re a little repetitive on purpose. They exercise basically everything I do with curl.</p>

<p>To keep it simple, we&rsquo;re going to make a lot of our requests to the same website:
<a href="https://httpbin.org">https://httpbin.org</a>. httpbin is a service that accepts HTTP requests and then tells you what request
you made.</p>

<ol>
<li>Request <a href="https://httpbin.org">https://httpbin.org</a></li>
<li>Request <a href="https://httpbin.org/anything">https://httpbin.org/anything</a>. httpbin.org/anything will look at the request you made,
parse it, and echo back to you what you requested. curl&rsquo;s default is to make a GET request.</li>
<li>Make a POST request to <a href="https://httpbin.org/anything">https://httpbin.org/anything</a></li>
<li>Make a GET request to <a href="https://httpbin.org/anything">https://httpbin.org/anything</a>, but this time add some query parameters (set
<code>value=panda</code>).</li>
<li>Request google&rsquo;s robots.txt file (www.google.com/robots.txt)</li>
<li>Make a GET request to <a href="https://httpbin.org/anything">https://httpbin.org/anything</a> and set the header <code>User-Agent: elephant</code>.</li>
<li>Make a DELETE request to <a href="https://httpbin.org/anything">https://httpbin.org/anything</a></li>
<li>Request <a href="https://httpbin.org/anything">https://httpbin.org/anything</a> and also get the response headers</li>
<li>Make a POST request to <a href="https://httpbin.org/anything">https://httpbin.org/anything</a> with the JSON body <code>{&quot;value&quot;: &quot;panda&quot;}</code></li>
<li>Make the same POST request as the previous exercise, but set the Content-Type header to
<code>application/json</code> (because POST requests need to have a content type that matches their body).
Look at the <code>json</code> field in the response to see the difference from the previous one.</li>
<li>Make a GET request to <a href="https://httpbin.org/anything">https://httpbin.org/anything</a> and set the header <code>Accept-Encoding: gzip</code> (what happens? why?)</li>
<li>Put a bunch of a JSON in a file and then make a POST request to <a href="https://httpbin.org/anything">https://httpbin.org/anything</a> with
the JSON in that file as the body</li>
<li>Make a request to <a href="https://httpbin.org/image">https://httpbin.org/image</a> and set the header &lsquo;Accept: image/png&rsquo;. Save the
output to a PNG file and open the file in an image viewer. Try the same thing with with different
<code>Accept:</code> headers.</li>
<li>Make a PUT request to <a href="https://httpbin.org/anything">https://httpbin.org/anything</a></li>
<li>Request <a href="https://httpbin.org/image/jpeg">https://httpbin.org/image/jpeg</a>, save it to a file, and open that file in your image
editor.</li>
<li>Request <a href="https://www.twitter.com">https://www.twitter.com</a>. You&rsquo;ll get an empty response. Get curl to show you the response
headers too, and try to figure out why the response was empty.</li>
<li>Make any request to <a href="https://httpbin.org/anything">https://httpbin.org/anything</a> and just set some nonsense headers (like <code>panda: elephant</code>)</li>
<li>Request <a href="https://httpbin.org/status/404">https://httpbin.org/status/404</a> and <a href="https://httpbin.org/status/200">https://httpbin.org/status/200</a>. Request them again and
get curl to show the response headers.</li>
<li>Request <a href="https://httpbin.org/anything">https://httpbin.org/anything</a> and set a username and password (with <code>-u username:password</code>)</li>
<li>Download the Twitter homepage (<a href="https://twitter.com">https://twitter.com</a>) in Spanish by setting the <code>Accept-Language: es-ES</code> header.</li>
<li>Make a request to the Stripe API with curl. (see <a href="https://stripe.com/docs/development">https://stripe.com/docs/development</a> for how,
they give you a test API key). Try making exactly the same request to <a href="https://httpbin.org/anything">https://httpbin.org/anything</a>.</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get your work recognized: write a brag document]]></title>
    <link href="https://jvns.ca/blog/brag-documents/"/>
    <updated>2019-06-28T18:46:02+00:00</updated>
    <id>https://jvns.ca/blog/brag-documents/</id>
    <content type="html"><![CDATA[

<p>There&rsquo;s this idea that, if you do great work at your job, people will (or should!) automatically
recognize that work and reward you for it with promotions / increased pay. In practice, it&rsquo;s often
more complicated than that &ndash; some kinds of important work are more visible/memorable than others.
It&rsquo;s frustrating to have done something really important and later realize that you didn&rsquo;t get
rewarded for it just because the people making the decision didn&rsquo;t understand or remember what you
did. So I want to talk about a tactic that I and lots of people I work with have used!</p>

<p>This blog post isn&rsquo;t just about being promoted or getting raises though. The ideas here have
actually been more useful to me to help me reflect on themes in my work, what&rsquo;s important to me,
what I&rsquo;m learning, and what I&rsquo;d like to be doing differently. But they&rsquo;ve definitely helped with
promotions!</p>

<p>You can also <a href="#template">skip to the brag document template at the end</a>.</p>

<h3 id="you-don-t-remember-everything-you-did">you don&rsquo;t remember everything you did</h3>

<p>One thing I&rsquo;m always struck by when it comes to performance review time is a feeling of &ldquo;wait, what
<em>did</em> I do in the last 6 months?&ldquo;. This is a kind of demoralizing feeling and it&rsquo;s usually not based
in reality, more in &ldquo;I forgot what cool stuff I actually did&rdquo;.</p>

<p>I invariably end up having to spend a bunch of time looking through my pull requests, tickets,
launch emails, design documents, and more. I always end up finding small (and sometimes
not-so-small) things that I completely forgot  I did, like:</p>

<ul>
<li>mentored an intern 5 months ago</li>
<li>did a small-but-important security project</li>
<li>spent a few weeks helping get an important migration over the line</li>
<li>helped X put together this design doc</li>
<li>etcetera!</li>
</ul>

<h3 id="your-manager-doesn-t-remember-everything-you-did">your manager doesn&rsquo;t remember everything you did</h3>

<p>And if you don&rsquo;t remember everything important you did, your manager (no matter how great they are!)
probably doesn&rsquo;t either. And they need to explain to other people why you should be promoted or
given an evaluation like &ldquo;exceeds expectations&rdquo; (&ldquo;X&rsquo;s work is so awesome!!!!&rdquo; doesn&rsquo;t fly).</p>

<p>So if your manager is going to effectively advocate for you, they need help.</p>

<h3 id="here-s-the-tactic-write-a-document-listing-your-accomplishments">here&rsquo;s the tactic: write a document listing your accomplishments</h3>

<p>The tactic is pretty simple! Instead of trying to remember everything you did with your brain,
maintain a &ldquo;brag document&rdquo; that lists everything so you can refer to it when you get to performance
review season! This is a pretty common tactic &ndash; when I started doing this I mentioned it to more
experienced people and they were like &ldquo;oh yeah, I&rsquo;ve been doing that for a long time, it really
helps&rdquo;.</p>

<p>Where I work we call this a &ldquo;brag document&rdquo; but I&rsquo;ve heard other names for the same concept like
&ldquo;hype document&rdquo; or &ldquo;list of stuff I did&rdquo; :).</p>

<p>There&rsquo;s a basic template for a brag document at the end of this post.</p>

<h3 id="share-your-brag-document-with-your-manager">share your brag document with your manager</h3>

<p>When I first wrote a brag document I was kind of nervous about sharing it with my manager. It felt
weird to be like &ldquo;hey, uh, look at all the awesome stuff I did this year, I wrote a long document
listing everything&rdquo;. But my manager was really thankful for it &ndash; I think his perspective was &ldquo;this
makes my job way easier, now I can look at the document when writing your perf review instead of
trying to remember what happened&rdquo;.</p>

<p>Giving them a document that explains your accomplishments will really help your manager advocate for
you in discussions about your performance and come to any meetings they need to have prepared.</p>

<p>Brag documents also <strong>really</strong> help with manager transitions &ndash; if you get a new manager 3 months
before an important performance review that you want to do well on, giving them a brag document
outlining your most important work &amp; its impact will help them understand what you&rsquo;ve been doing
even though they may not have been aware of any of your work before.</p>

<h3 id="share-it-with-your-peer-reviewers">share it with your peer reviewers</h3>

<p>Similarly, if your company does peer feedback as part of the promotion/perf process  &ndash; share your
brag document with your peer reviewers!! Every time someone shares their doc with me I find it SO
HELPFUL with writing their review for much the same reasons it&rsquo;s helpful to share it with your
manager &ndash; it reminds me of all the amazing things they did, and when they list their goals in their
brag document it also helps me see what areas they might be most interested in feedback on.</p>

<p>On some teams at work it&rsquo;s a team norm to share a brag document with peer reviewers to make it
easier for them.</p>

<h3 id="explain-the-big-picture">explain the big picture</h3>

<p>In addition to just listing accomplishments, in your brag document you can write the narrative explaining the big picture of your work. Have you been really focused on security? On building your product skills &amp; having really good relationships with your users? On building a strong culture of code review on the team?</p>

<p>In my brag document, I like to do this by making a section for areas that I&rsquo;ve been focused on (like &ldquo;security&rdquo;) and listing all the work I&rsquo;ve done in that area there. This is especially good if you&rsquo;re working on something fuzzy like &ldquo;building a stronger culture of code review&rdquo; where all the individual actions you do towards that might be relatively small and there isn&rsquo;t a big shiny ship.</p>

<h3 id="use-your-brag-document-to-notice-patterns">use your brag document to notice patterns</h3>

<p>In the past I&rsquo;ve found the brag document useful not just to hype my accomplishments, but also to reflect on the work I&rsquo;ve done. Some questions it&rsquo;s helped me with:</p>

<ul>
<li>What work do I feel most proud of?</li>
<li>Are there themes in these projects I should be thinking about? What&rsquo;s the big picture of what I&rsquo;m working on?  (am I working a lot on security? localization?).</li>
<li>What do I wish I was doing more / less of?</li>
<li>Which of my projects had the effect I wanted, and which didn&rsquo;t? Why might that have been?</li>
<li>What could have gone better with project X? What might I want to do differently next time?</li>
</ul>

<h3 id="you-can-write-it-all-at-once-or-update-it-every-2-weeks">you can write it all at once or update it every 2 weeks</h3>

<p>Many people have told me that it works best for them if they take a few minutes to update their brag document every 2 weeks ago. For me it actually works better to do a single marathon session every 6 months or every year where I look through everything I did and reflect on it all at once. Try out different approaches and see what works for you!</p>

<h3 id="don-t-forget-to-include-the-fuzzy-work">don&rsquo;t forget to include the fuzzy work</h3>

<p>A lot of us work on fuzzy projects that can feel hard to quantify, like:</p>

<ul>
<li>improving code quality on the team / making code reviews a little more in depth</li>
<li>making on call easier</li>
<li>building a more fair interview process / performance review system</li>
<li>refactoring / driving down technical debt</li>
</ul>

<p>A lot of people will leave this kind of work out because they don&rsquo;t know how to explain why it&rsquo;s important. But I think this kind of work is especially important to put into your brag document because it&rsquo;s the most likely to fall under the radar! One way to approach this is to, for each goal:</p>

<ol>
<li>explain your goal for the work (why do you think it&rsquo;s important to refactor X piece of code?)</li>
<li>list some things you&rsquo;ve done towards that goal</li>
<li>list any effects you&rsquo;ve seen of the work, even if they&rsquo;re a little indirect</li>
</ol>

<p>If you tell your coworkers this kind of work is important to you and tell them what you&rsquo;ve been
doing, maybe they can also give you ideas about how to do it more effectively or make the effects of
that work more obvious!</p>

<h3 id="encourage-each-other-to-celebrate-accomplishments">encourage each other to celebrate accomplishments</h3>

<p>One nice side effect of having a shared idea that it&rsquo;s normal/good to maintain a brag document at
work is that I sometimes see people encouraging each other to record &amp; celebrate their
accomplishments (&ldquo;hey, you should put that in your brag doc, that was really good!&rdquo;). It can be hard
to see the value of your work sometimes, especially when you&rsquo;re working on something hard, and an
outside perspective from a friend or colleague can really help you see why what you&rsquo;re doing is
important.</p>

<p>Brag documents are good when you use them on your own to advocate for yourself, but I think they&rsquo;re
better as a collaborative effort to recognize where people are excelling.</p>

<p>Next, I want to talk about a couple of structures that we&rsquo;ve used to help people recognize their accomplishments.</p>

<h3 id="the-brag-workshop-help-people-list-their-accomplishments">the brag workshop: help people list their accomplishments</h3>

<p>The way this &ldquo;brag document&rdquo; practice started in the first place is that my coworker <a href="https://karla.io/">Karla</a> and I wanted to help other women in engineering advocate for themselves more in the performance review process. The idea is that some people undersell their accomplishments more than they should, so we wanted to encourage those people to &ldquo;brag&rdquo; a little bit and write down what they did that was important.</p>

<p>We did this by running a &ldquo;brag workshop&rdquo; just before performance review season. The format of the workshop is like this:</p>

<p><strong>Part 1: write the document: 1-2 hours</strong>. Everybody sits down with their laptop, starts looking
through their pull requests, tickets they resolved, design docs, etc, and puts together a list of
important things they did in the last 6 months.</p>

<p><strong>Part 2: pair up and make the impact of your work clearer: 1 hour</strong>. The goal of this part is to
pair up, review each other&rsquo;s documents, and identify places where people haven&rsquo;t bragged &ldquo;enough&rdquo; &ndash;
maybe they worked on an extremely critical project to the company but didn&rsquo;t highlight how important
it was, maybe they improved test performance but didn&rsquo;t say that they made the tests 3 times faster
and that it improved everyone&rsquo;s developer experience. It&rsquo;s easy to accidentally write &ldquo;I shipped
$feature&rdquo; and miss the follow up (&ldquo;&hellip; which caused $thing to happen&rdquo;). Another person reading
through your document can help you catch the places where you need to clarify the impact.</p>

<h3 id="biweekly-brag-document-writing-session">biweekly brag document writing session</h3>

<p>Another approach to helping people remember their accomplishments: my friend Dave gets some friends
together every couple of weeks or so for everyone to update their brag documents. It&rsquo;s a nice way
for people to talk about work that they&rsquo;re happy about &amp; celebrate it a little bit, and updating
your brag document as you go can be easier than trying to remember everything you did all at once at
the end of the year.</p>

<p>These don&rsquo;t have to be people in the same company or even in the same city &ndash; that group meets over
video chat and has people from many different companies doing this together from Portland, Toronto,
New York, and Montreal.</p>

<p>In general, especially if you&rsquo;re someone who really cares about your work, I think it&rsquo;s really
positive to share your goals &amp; accomplishments (and the things that haven&rsquo;t gone so well too!) with
your friends and coworkers. It makes it feel less like you&rsquo;re working alone and more like
everyone is supporting each other in helping them accomplish what they want.</p>

<h3 id="thanks">thanks</h3>

<p>Thanks to Karla Burnett who I worked with on spreading this idea at work, to Dave Vasilevsky for
running brag doc writing sessions, to Will Larson who encouraged me to start one <a href="https://lethain.com/career-narratives/">of these</a> in the
first place, to my manager Jay Shirley for always being encouraging &amp; showing me that this is a
useful way to work with a manager, and to Allie, Dan, Laura, Julian, Kamal, Stanley, and Vaibhav for
reading a draft of this.</p>

<p>I&rsquo;d also recommend the blog post <a href="http://blog.aashni.me/2019/01/hype-yourself-youre-worth-it/">Hype Yourself! You&rsquo;re Worth It!</a> by Aashni Shah which talks about a similar approach.</p>

<h2 id="a-name-template-class-anchor-appendix-brag-document-template-a"><a name="template" class="anchor">Appendix: brag document template</a></h2>

<p>Here&rsquo;s a template for a brag document! Usually I make one brag document per year. (&ldquo;Julia&rsquo;s
2017 brag document&rdquo;). I think it&rsquo;s okay to make it quite long / comprehensive &ndash; 5-10 pages or more
for a year of work doesn&rsquo;t seem like too much to me, especially if you&rsquo;re including some
graphs/charts / screenshots to show the effects of what you did.</p>

<p>One thing I want to emphasize, for people who don&rsquo;t like to brag, is &ndash; <strong>you don&rsquo;t have to try to
make your work sound better than it is</strong>. Just make it sound <strong>exactly as good as it is</strong>! For
example &ldquo;was the primary contributor to X new feature that&rsquo;s now used by 60% of our customers and
has gotten Y positive feedback&rdquo;.</p>

<h3 id="goals-for-this-year">Goals for this year:</h3>

<ul>
<li>List your major goals here! Sharing your goals with your manager &amp; coworkers is really nice because it helps them see how they can support you in accomplishing those goals!</li>
</ul>

<h3 id="goals-for-next-year">Goals for next year</h3>

<ul>
<li>If it&rsquo;s getting towards the end of the year, maybe start writing down what you think your goals for next year might be.</li>
</ul>

<h3 id="projects">Projects</h3>

<p>For each one, go through:</p>

<ul>
<li>What your contributions were (did you come up with the design? Which components did you build? Was there some useful insight like &ldquo;wait, we can cut scope and do what we want by doing way less work&rdquo; that you came up with?)</li>
<li>The impact of the project &ndash; who was it for? Are there numbers you can attach to it? (saved X dollars? shipped new feature that has helped sell Y big deals? Improved performance by X%? Used by X internal users every day?). Did it support some important non-numeric company goal (required to pass an audit? helped retain an important user?)</li>
</ul>

<p>Remember: don&rsquo;t forget to explain what the results of you work actually were! It&rsquo;s often important to go back a few months later and fill in what actually happened after you launched the project.</p>

<h3 id="collaboration-mentorship">Collaboration &amp; mentorship</h3>

<p>Examples of things in this category:</p>

<ul>
<li>Helping others in an area you&rsquo;re an expert in (like &ldquo;other engineers regularly ask me for one-off help
solving weird bugs in their CSS&rdquo; or &ldquo;quoting from the C standard at just the right moment&rdquo;)</li>
<li>Mentoring interns / helping new team members get started</li>
<li>Writing really clear emails/meeting notes</li>
<li>Foundational code that other people built on top of</li>
<li>Improving monitoring / dashboards / on call</li>
<li>Any code review that you spent a particularly long time on / that you think was especially important</li>
<li>Important questions you answered (&ldquo;helped Risha from OTHER_TEAM with a lot of questions related to Y&rdquo;)</li>
<li>Mentoring someone on a project (&ldquo;gave Ben advice from time to time on leading his first big project&rdquo;)</li>
<li>Giving an internal talk or workshop</li>
</ul>

<h3 id="design-documentation">Design &amp; documentation</h3>

<p>List design docs &amp; documentation that you worked on</p>

<ul>
<li>Design docs: I usually just say &ldquo;wrote design for X&rdquo; or &ldquo;reviewed design for X&rdquo;</li>
<li>Documentation: maybe briefly explain the goal behind this documentation (for example &ldquo;we were getting a lot of questions about X, so I documented it and now we can answer the questions more quickly&rdquo;)</li>
</ul>

<h3 id="company-building">Company building</h3>

<p>This is a category we have at work &ndash; it basically means &ldquo;things you did to help the company overall, not just your project / team&rdquo;. Some things that go in here:</p>

<ul>
<li>Going above &amp; beyond with interviewing or recruiting (doing campus recruiting, etc)</li>
<li>Improving important processes, like the interview process or writing better onboarding materials</li>
</ul>

<h3 id="what-you-learned">What you learned</h3>

<p>My friend Julian suggested this section and I think it&rsquo;s a great idea &ndash; try listing important
things you learned or skills you&rsquo;ve acquired recently! Some examples of skills you might be
learning or improving:</p>

<ul>
<li>how to do performance analysis &amp; make code run faster</li>
<li>internals of an important piece of software (like the JVM or Postgres or Linux)</li>
<li>how to use a library (like React)</li>
<li>how to use an important tool (like the command line or Firefox dev tools)</li>
<li>about a specific area of programming (like localization or timezones)</li>
<li>an area like product management / UX design</li>
<li>how to write a clear design doc</li>
<li>a new programming language</li>
</ul>

<p>It&rsquo;s really easy to lose track of what skills you&rsquo;re learning, and usually when I reflect on this I
realize I learned a lot more than I thought and also notice things that I&rsquo;m <em>not</em> learning that I
wish I was.</p>

<h3 id="outside-of-work">Outside of work</h3>

<p>It&rsquo;s also often useful to track accomplishments outside of work, like:</p>

<ul>
<li>blog posts</li>
<li>talks/panels</li>
<li>open source work</li>
<li>Industry recognition</li>
</ul>

<p>I think this can be a nice way to highlight how you&rsquo;re thinking about your career outside of strictly what you&rsquo;re doing at work.</p>

<p>This can also include other non-career-related things you&rsquo;re proud of, if that feels good to you! Some people like to keep a combined personal + work brag document.</p>

<h3 id="general-prompts">General prompts</h3>

<p>If you&rsquo;re feeling stuck for things to mention, try:</p>

<ul>
<li>If you were trying to convince a friend to come join your company/team, what would you tell them about your work?</li>
<li>Did anybody tell you you did something well recently?</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What does debugging a program look like?]]></title>
    <link href="https://jvns.ca/blog/2019/06/23/a-few-debugging-resources/"/>
    <updated>2019-06-23T18:48:35+00:00</updated>
    <id>https://jvns.ca/blog/2019/06/23/a-few-debugging-resources/</id>
    <content type="html"><![CDATA[

<p>I was debugging with a friend who&rsquo;s a relatively new programmer yesterday, and showed them a few
debugging tips. Then I was thinking about how to teach debugging this morning, and <a href="https://twitter.com/b0rk/status/1142825259546140673">mentioned on
Twitter</a> that I&rsquo;d never seen a really good
guide to debugging your code.  (there are a ton of really great replies by Anne Ogborn to that tweet
if you are interested in debugging tips)</p>

<p>As usual, I got a lot of helpful answers and now I have a few ideas about how to teach debugging
skills / describe the process of debugging.</p>

<h3 id="a-couple-of-debugging-resources">a couple of debugging resources</h3>

<p>I was hoping for more links to debugging books/guides, but here are the 2 recommendations I
got:</p>

<p><strong>&ldquo;Debugging&rdquo; by David Agans</strong>: Several people recommended the book
<a href="http://debuggingrules.com/">Debugging</a>, which looks like a nice and fairly short book that explains
a debugging strategy. I haven&rsquo;t read it yet (though I ordered it to see if I should be recommending
it) and the rules laid out in the book (&ldquo;understand the system&rdquo;, &ldquo;make it fail&rdquo;, &ldquo;quit thinking and
look&rdquo;, &ldquo;divide and conquer&rdquo;, &ldquo;change one thing at a time&rdquo;, &ldquo;keep an audit trail&rdquo;, &ldquo;check the plug&rdquo;,
&ldquo;get a fresh view&rdquo;, and &ldquo;if you didn&rsquo;t fix it, it ain&rsquo;t fixed&rdquo;) seem extremely resaonable :).  He
also has a charming <a href="http://debuggingrules.com/?page_id=40">debugging poster</a>.</p>

<p><strong>&ldquo;How to debug&rdquo; by John Regehr</strong>: <a href="https://blog.regehr.org/archives/199">How to Debug</a> is a very
good blog post based on Regehr&rsquo;s experience teaching a university embedded systems course. Lots of
good advice.  He also has a <a href="https://blog.regehr.org/archives/849">blog post reviewing 4 books about debugging</a>, including Agans&rsquo; book.</p>

<h3 id="reproduce-your-bug-but-how-do-you-do-that">reproduce your bug (but how do you do that?)</h3>

<p>The rest of this post is going to be an attempt to aggregate different ideas about debugging
people tweeted at me.</p>

<p>Somewhat obviously, everybody agrees that being able to consistently reproduce a bug is important if
you want to figure out what&rsquo;s going on. I have an intuitive sense for how to do this but I&rsquo;m not
sure how to <strong>explain</strong> how to go from &ldquo;I saw this bug twice&rdquo; to &ldquo;I can consistently reproduce this
bug on demand on my laptop&rdquo;, and I wonder whether the techniques you use to do this depend on the
domain (backend web dev, frontend,  mobile, games, C++ programs, embedded etc).</p>

<h3 id="reproduce-your-bug-quickly">reproduce your bug <em>quickly</em></h3>

<p>Everybody also agrees that it&rsquo;s extremely useful be able to reproduce the bug quickly (if it takes
you 3 minutes to check if every change helped, iterating is VERY SLOW).</p>

<p>A few suggested approaches:</p>

<ul>
<li>for something that requires clicking on a bunch of things in a browser to reproduce, recording
what you clicked on with <a href="https://www.seleniumhq.org/">Selenium</a> and getting Selenium to replay
the UI interactions (suggested <a href="https://twitter.com/AnnieTheObscure/status/1142843984642899968">here</a>)</li>
<li>writing a unit test that reproduces the bug (if you can). bonus: you can add this to your test
suite later if it makes sense</li>
<li>writing a script / finding a command line incantation that does it (like <code>curl MY_APP.local/whatever</code>)</li>
</ul>

<h3 id="accept-that-it-s-probably-your-code-s-fault">accept that it&rsquo;s probably your code&rsquo;s fault</h3>

<p>Sometimes I see a problem and I&rsquo;m like &ldquo;oh, library X has a bug&rdquo;, &ldquo;oh, it&rsquo;s DNS&rdquo;, &ldquo;oh, SOME OTHER
THING THAT IS NOT MY CODE is broken&rdquo;. And sometimes it&rsquo;s not my code! But in general between an
established library and my code that I wrote last month, usually it&rsquo;s my code that I wrote last
month that&rsquo;s the problem :).</p>

<h3 id="start-doing-experiments">start doing experiments</h3>

<p>@act_gardner gave a <a href="https://twitter.com/act_gardner/status/1142838587437830144">nice, short explanation of what you have to do after you reproduce your
bug</a></p>

<blockquote>
<p>I try to encourage people to first fully understand the bug - What&rsquo;s happening? What do you expect
to happen? When does it happen? When does it not happen? Then apply their mental model of the
system to guess at what could be breaking and come up with experiments.</p>

<p>Experiments could be changing or removing code, making API calls from a REPL, trying new inputs,
poking at memory values with a debugger or print statements.</p>
</blockquote>

<p>I think the loop here may be:</p>

<ul>
<li>make guess about one aspect about what might be happening (&ldquo;this variable is set to X where it
should be Y&rdquo;, &ldquo;the server is being sent the wrong request&rdquo;, &ldquo;this code is never running at all&rdquo;)</li>
<li>do experiment to check that guess</li>
<li>repeat until you understand what&rsquo;s going on</li>
</ul>

<h3 id="change-one-thing-at-a-time">change one thing at a time</h3>

<p>Everybody definitely agrees that it is important to change one thing a time when doing an
experiment to verify an assumption.</p>

<h3 id="check-your-assumptions">check your assumptions</h3>

<p>A lot of debugging is realizing that something you were <strong>sure</strong> was true (&ldquo;wait this request is
going to the new server, right, not the old one???&ldquo;) is actually&hellip; not true. I made an attempt to
<a href="https://twitter.com/b0rk/status/1142812831420768257">list some common incorrect assumptions</a>. Here
are some examples:</p>

<ul>
<li>this variable is set to X (&ldquo;that filename is definitely right&rdquo;)</li>
<li>that variable&rsquo;s value can&rsquo;t possibly have changed between X and Y</li>
<li>this code was doing the right thing before</li>
<li>this function does X</li>
<li>I&rsquo;m editing the right file</li>
<li>there can&rsquo;t be any typos in that line I wrote it is just 1 line of code</li>
<li>the documentation is correct</li>
<li>the code I&rsquo;m looking at is being executed at some point</li>
<li>these two pieces of code execute sequentially and not in parallel</li>
<li>the code does the same thing when compiled in debug / release mode (or with -O2 and without, or&hellip;)</li>
<li>the compiler is not buggy (though this is last on purpose, the compiler is only very rarely to blame :))</li>
</ul>

<h3 id="weird-methods-to-get-information">weird methods to get information</h3>

<p>There are a lot of normal ways to do experiments to check your assumptions / guesses about what the
code is doing (print out variable values, use a debugger, etc). Sometimes, though, you&rsquo;re in a more
difficult environment where you can&rsquo;t print things out and don&rsquo;t have access to a debugger (or it&rsquo;s
inconvenient to do those things, maybe because there are too many events). Some ways to cope:</p>

<ul>
<li><a href="https://twitter.com/cocoaphony/status/1142847665690030080">adding sounds on mobile</a>: &ldquo;In the
mobile world, I live on this advice. Xcode can play a sound when you hit a breakpoint (and
continue without stopping). I place them certain places in the code, and listen for buzzing Tink
to indicate tight loops or Morse/Pop pairs to catch unbalanced events&rdquo; (also <a href="https://twitter.com/AnnieTheObscure/status/1142842421954244608">this tweet</a>)</li>
<li>there&rsquo;s a very cool talk about <a href="https://qnoid.com/2013/06/08/Sound-Debugging.html">using XCode to play sound for iOS debugging here</a></li>
<li><a href="https://twitter.com/wombatnation/status/1142887843963867136">adding LEDs</a>: &ldquo;When I did embedded
dev ages ago on grids of transputers, we wired up an LED to an unused pin on each chip. It was
surprisingly effective for diagnosing parallelism issues.&rdquo;</li>
<li><a href="https://twitter.com/irvingreid/status/1142887472441040896">string</a>: &ldquo;My networks prof told me
about a hack he saw at Xerox in the early days of Ethernet: a tap in the coax with an amp and
motor and piece of string. The busier the network was, the faster the string twirled.&rdquo;</li>
<li><a href="http://peep.sourceforge.net/intro.html">peep</a> is a &ldquo;network auralizer&rdquo; that translates what&rsquo;s
happening on your system into sounds. I spent 10 minutes trying to get it to compile and failed so
far but it looks very fun and I want to try it!!</li>
</ul>

<p>The point here is that information is the most important thing and you need to do whatever&rsquo;s
necessary to get information.</p>

<h3 id="write-your-code-so-it-s-easier-to-debug">write your code so it&rsquo;s easier to debug</h3>

<p>Another point a few people brought up is that you can improve your program to make it
easier to debug. tef has a nice post about this: <a href="https://programmingisterrible.com/post/173883533613/code-to-debug">Write code that’s easy to delete, and easy to debug too.</a> here. I thought this
was very true:</p>

<blockquote>
<p>Debuggable code isn’t necessarily clean, and code that’s littered with checks or error handling
rarely makes for pleasant reading.</p>
</blockquote>

<p>I think one interpretation of &ldquo;easy to debug&rdquo; is &ldquo;every single time there&rsquo;s an error, the program
reports to you exactly what happened in an easy to understand way&rdquo;. Whenever my program has a
problem and says sometihng &ldquo;error: failure to connect to SOME_IP port 443: connection timeout&rdquo;
I&rsquo;m like THANK YOU THAT IS THE KIND OF THING I WANTED TO KNOW and I can check if I need to fix a
firewall thing or if I got the wrong IP for some reason or what.</p>

<p>One simple example of this recently: I was making a request to a server I wrote and the
reponse I got was &ldquo;upstream connect error or disconnect/reset before headers&rdquo;. This is an nginx
error which basically in this case boiled down to &ldquo;your program crashed before it sent anything in
response to the request&rdquo;. Figuring out the cause of the crash was pretty easy, but having better
error handling (returning an error instead of crashing) would have saved me a little time
because instead of having to go check the cause of the crash, I could have just read the error
message and figured out what was going on right away.</p>

<h3 id="error-messages-are-better-than-silently-failing">error messages are better than silently failing</h3>

<p>To get closer to the dream of &ldquo;every single time there&rsquo;s an error, the program reports
to you exactly what happened in an easy to understand way&rdquo; you also need to be disciplined about
immediately returning an error message instead of silently writing incorrect data / passing a
nonsense value to another function which will do WHO KNOWS WHAT with it and cause you a gigantic
headache. This means adding code like this:</p>

<pre><code>if UNEXPECTED_THING:
    raise &quot;oh no THING happened&quot;
</code></pre>

<p>This isn&rsquo;t easy to get right (it&rsquo;s not always obvious where you should be raising errors!&ldquo;) but it
really helps a lot.</p>

<h3 id="failure-print-out-a-stack-of-errors-not-just-one-error">failure: print out a stack of errors, not just one error.</h3>

<p>Related to returning helpful errors that make it easy to debug: Rust has a really incredible error
handling library <a href="https://github.com/rust-lang-nursery/failure">called failure</a> which basicaly lets
you return a chain of errors instead of just one error, so you can print out a stack of errors like:</p>

<pre><code>&quot;error starting server process&quot; caused by
&quot;error initializing logging backend&quot; caused by
&quot;connection failure: timeout connecting to 1.2.3.4 port 1234&quot;.
</code></pre>

<p>This is SO MUCH MORE useful than just <code>connection failure: timeout connecting to 1.2.3.4 port 1234</code>
by itself because it tells you the significance of 1.2.3.4 (it&rsquo;s something to do with the logging
backend!). And I think it&rsquo;s also more useful than <code>connection failure: timeout connecting to 1.2.3.4 port 1234</code>
with a stack trace, because it summarizes at a high level the parts that went wrong instead of
making you read all the lines in the stack trace (some of which might not be relevant!).</p>

<p>tools like this in other languages:</p>

<ul>
<li>Go: the idiom to do this seems to be to just concatenate your stack of errors together as a
big string so you get &ldquo;error: thing one: error: thing two : error: thing three&rdquo; which works okay but
is definitely a lot less structured than <code>failure</code>&rsquo;s system</li>
<li>Java: I hear you can give exceptions causes but haven&rsquo;t used that myself</li>
<li>Python 3: you can use <code>raise ... from</code> which sets the <code>__cause__</code> attribute on the exception and then
your exceptions will be separated by <code>The above exception was the direct cause of the following
exception:..</code></li>
</ul>

<p>If you know how to do this in other languages I&rsquo;d be interested to hear!</p>

<h3 id="understand-what-the-error-messages-mean">understand what the error messages mean</h3>

<p>One sub debugging skill that I take for granted a lot of the time is understanding what error
messages mean! I came across this nice graphic explaining <a href="https://pythonforbiologists.com/29-common-beginner-errors-on-one-page/">common Python errors and what they
mean</a>, which breaks down
things like <code>NameError</code>, <code>IOError</code>, etc.</p>

<p>I think a reason interpreting error messages is hard is that understanding a new error message might
mean learning a new concept &ndash; <code>NameError</code> can mean &ldquo;Your code uses a variable outside the scope
where it&rsquo;s defined&rdquo;, but to really understand that you need to understand what variable scope is! I
ran into this a lot when learning Rust &ndash; the Rust compiler would be like &ldquo;you have a weird lifetime
error&rdquo; and I&rsquo;d like be &ldquo;ugh ok Rust I get it I will go actually learn about how lifetimes work
now!&ldquo;.</p>

<p>And a lot of the time error messages are caused by a problem very different from the text of the
message, like how &ldquo;upstream connect error or disconnect/reset before headers&rdquo; might mean &ldquo;julia,
your server crashed!&ldquo;. The skill of understanding what error messages mean is often not transferable
when you switch to a new area (if I started writing a lot of React or something tomorrow, I would
probably have no idea what any of the error messages meant!). So this definitely isn&rsquo;t just an issue
for beginner programmers.</p>

<h3 id="that-s-all-for-now">that&rsquo;s all for now!</h3>

<p>I feel like the big thing I&rsquo;m missing when talking about debugging skills is a stronger
understanding of where people get stuck with debugging &ndash; it&rsquo;s easy to say &ldquo;well, you need to
reproduce the problem, then make a more minimal reproduction, then start coming up with guesses and
verifying them, and improve your mental model of the system, and then figure it out, then fix the
problem and hopefully write a test to make it not come back&rdquo;, but &ndash; where are people actually
getting stuck in practice? What are the hardest parts? I have some sense of what the hardest parts
usually are for me but I&rsquo;m still not sure what the hardest parts usually are for someone newer to
debugging their code.</p>
]]></content>
  </entry>
  
</feed>
