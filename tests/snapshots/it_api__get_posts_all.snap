---
source: tests/it_api.rs
expression: response.json_entity()
---
[
  "200 OK",
  {
    "payload": [
      {
        "category_id": 3,
        "comments_link": null,
        "date": "2019-11-06T00:00:00Z",
        "feed_id": 4,
        "feed_title": "React",
        "id": 64,
        "is_read": false,
        "is_read_later": false,
        "link": "https://reactjs.org/blog/2019/11/06/building-great-user-experiences-with-concurrent-mode-and-suspense.html",
        "media_link": null,
        "summary": "At React Conf 2019 we announced an experimental release of React that supports Concurrent Mode and Suspense. In this post we’ll introduce best practices for using them that we’ve identified through the process of building the new facebook.com.\r\n\r\nThis post will be most relevant to people working on data fetching libraries for React.\r\nIt shows how to best integrate them with Concurrent Mode and Suspense. The patterns introduced here are based on Relay — our library for building data-driven UIs with GraphQL. However, the ideas in this post apply to other GraphQL clients as well as libraries using REST or other approaches.\r\n\r\nThis post is aimed at library authors. If you’re primarily an application developer, you might still find some interesting ideas here, but don’t feel like you have to read it in its entirety.\r\nTalk Videos\r\nIf you prefer to watch videos, some of the ideas from this blog post have been referenced in several React Conf 2019 presentations:\r\n\r\nData Fetching with Suspense in Relay by Joe Savona\r\nBuilding the New Facebook with React and Relay by Ashley Watkins\r\nReact Conf Keynote by Yuzhi Zheng\r\n\r\nThis post presents a deeper dive on implementing a data fetching library with Suspense.\r\nPutting User Experience First\r\nThe React team and community has long placed a deserved emphasis on developer experience: ensuring that React has good error messages, focusing on components as a way to reason locally about app behavior, crafting APIs that are predictable and encourage correct usage by design, etc. But we haven’t provided enough guidance on the best ways to achieve a great user experience in large apps.\r\nFor example, the React team has focused on framework performance and providing tools for developers to debug and tune application performance (e.g. React.memo). But we haven’t been as opinionated about the high-level patterns that make the difference between fast, fluid apps and slow, janky ones. We always want to ensure that React remains approachable to new users and supports a variety of use-cases — not every app has to be “blazing” fast. But as a community we can and should aim high. We should make it as easy as possible to build apps that start fast and stay fast, even as they grow in complexity, for users on varying devices and networks around the world.\r\nConcurrent Mode and Suspense are experimental features that can help developers achieve this goal. We first introduced them at JSConf Iceland in 2018, intentionally sharing details very early to give the community time to digest the new concepts and to set the stage for subsequent changes. Since then we’ve completed related work, such as the new Context API and the introduction of Hooks, which are designed in part to help developers naturally write code that is more compatible with Concurrent Mode. But we didn’t want to implement these features and release them without validating that they work. So over the past year, the React, Relay, web infrastructure, and product teams at Facebook have all collaborated closely to build a new version of facebook.com that deeply integrates Concurrent Mode and Suspense to create an experience with a more fluid and app-like feel.\r\nThanks to this project, we’re more confident than ever that Concurrent Mode and Suspense can make it easier to deliver great, fast user experiences. But doing so requires rethinking how we approach loading code and data for our apps. Effectively all of the data-fetching on the new facebook.com is powered by Relay Hooks — new Hooks-based Relay APIs that integrate with Concurrent Mode and Suspense out of the box.\r\nRelay Hooks — and GraphQL — won’t be for everyone, and that’s ok! Through our work on these APIs we’ve identified a set of more general patterns for using Suspense. Even if Relay isn’t the right fit for you, we think the key patterns we’ve introduced with Relay Hooks can be adapted to other frameworks.\r\nBest Practices for Suspense\r\nIt’s tempting to focus only on the total startup time for an app — but it turns out that users’ perception of performance is determined by more than the absolute loading time. For example, when comparing two apps with the same absolute startup time, our research shows that users will generally perceive the one with fewer intermediate loading states and fewer layout changes as having loaded faster. Suspense is a powerful tool for carefully orchestrating an elegant loading sequence with a few, well-defined states that progressively reveal content. But improving perceived performance only goes so far — our apps still shouldn’t take forever to fetch all of their code, data, images, and other assets.\r\nThe traditional approach to loading data in React apps involves what we refer to as “fetch-on-render”. First we render a component with a spinner, then fetch data on mount (componentDidMount or useEffect), and finally update to render the resulting data. It’s certainly possible to use this pattern with Suspense: instead of initially rendering a placeholder itself, a component can “suspend” — indicate to React that it isn’t ready yet. This will tell React to find the nearest ancestor &lt;Suspense fallback={&lt;Placeholder/&gt;}&gt;, and render its fallback instead. If you watched earlier Suspense demos this example may feel familiar — it’s how we originally imagined using Suspense for data-fetching.\r\nIt turns out that this approach has some limitations. Consider a page that shows a social media post by a user, along with comments on that post. That might be structured as a &lt;Post&gt; component that renders both the post body and a &lt;CommentList&gt; to show the comments. Using the fetch-on-render approach described above to implement this could cause sequential round trips (sometimes referred to as a “waterfall”). First the data for the &lt;Post&gt; component would be fetched and then the data for &lt;CommentList&gt; would be fetched, increasing the time it takes to show the full page.\r\nThere’s also another often-overlooked downside to this approach. If &lt;Post&gt; eagerly requires (or imports) the &lt;CommentList&gt; component, our app will have to wait to show the post body while the code for the comments is downloading. We could lazily load &lt;CommentList&gt;, but then that would delay fetching comments data and increase the time to show the full page. How do we resolve this problem without compromising on the user experience?\r\nRender As You Fetch\r\nThe fetch-on-render approach is widely used by React apps today and can certainly be used to create great apps. But can we do even better? Let’s step back and consider our goal.\r\nIn the above &lt;Post&gt; example, we’d ideally show the more important content — the post body — as early as possible, without negatively impacting the time to show the full page (including comments). Let’s consider the key constraints on any solution and look at how we can achieve them:\r\n\r\nShowing the more important content (the post body) as early as possible means that we need to load the code and data for the view incrementally. We don’t want to block showing the post body on the code for &lt;CommentList&gt; being downloaded, for example.\r\nAt the same time we don’t want to increase the time to show the full page including comments. So we need to start loading the code and data for the comments as soon as possible, ideally in parallel with loading the post body.\r\n\r\nThis might sound difficult to achieve — but these constraints are actually incredibly helpful. They rule out a large number of approaches and spell out a solution for us. This brings us to the key patterns we’ve implemented in Relay Hooks, and that can be adapted to other data-fetching libraries. We’ll look at each one in turn and then see how they add up to achieve our goal of fast, delightful loading experiences:\r\n\r\nParallel data and view trees\r\nFetch in event handlers\r\nLoad data incrementally\r\nTreat code like data\r\n\r\nParallel Data and View Trees\r\nOne of the most appealing things about the fetch-on-render pattern is that it colocates what data a component needs with how to render that data. This colocation is great — an example of how it makes sense to group code by concerns and not by technologies. All the issues we saw above were due to when we fetch data in this approach: upon rendering. We need to be able to fetch data before we’ve rendered the component. The only way to achieve that is by extracting the data dependencies into parallel data and view trees.\r\nHere’s how that works in Relay Hooks. Continuing our example of a social media post with body and comments, here’s how we might define it with Relay Hooks:\r\n// Post.js\r\nfunction Post(props) {\r\n  // Given a reference to some post - `props.post` - *what* data\r\n  // do we need about that post?\r\n  const postData = useFragment(graphql`\r\n    fragment PostData on Post @refetchable(queryName: \"PostQuery\") {\r\n      author\r\n      title\r\n      # ...  more fields ...\r\n    }\r\n  `, props.post);\r\n\r\n  // Now that we have the data, how do we render it?\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;h1&gt;{postData.title}&lt;/h1&gt;\r\n      &lt;h2&gt;by {postData.author}&lt;/h2&gt;\r\n      {/* more fields  */}\r\n    &lt;/div&gt;\r\n  );\r\n}\r\nAlthough the GraphQL is written within the component, Relay has a build step (Relay Compiler) that extracts these data-dependencies into separate files and aggregates the GraphQL for each view into a single query. So we get the benefit of colocating concerns, while at runtime having parallel data and view trees. Other frameworks could achieve a similar effect by allowing developers to define data-fetching logic in a sibling file (maybe Post.data.js), or perhaps integrate with a bundler to allow defining data dependencies with UI code and automatically extracting it, similar to Relay Compiler.\r\nThe key is that regardless of the technology we’re using to load our data — GraphQL, REST, etc — we can separate what data to load from how and when to actually load it. But once we do that, how and when do we fetch our data?\r\nFetch in Event Handlers\r\nImagine that we’re about to navigate from a list of a user’s posts to the page for a specific post. We’ll need to download the code for that page — Post.js — and also fetch its data.\r\nWaiting until we render the component has problems as we saw above. The key is to start fetching code and data for a new view in the same event handler that triggers showing that view. We can either fetch the data within our router — if our router supports preloading data for routes — or in the click event on the link that triggered the navigation. It turns out that the React Router folks are already hard at work on building APIs to support preloading data for routes. But other routing frameworks can implement this idea too.\r\nConceptually, we want every route definition to include two things: what component to render and what data to preload, as a function of the route/url params. Here’s what such a route definition might look like. This example is loosely inspired by React Router’s route definitions and is primarily intended to demonstrate the concept, not a specific API:\r\n// PostRoute.js (GraphQL version)\r\n\r\n// Relay generated query for loading Post data\r\nimport PostQuery from './__generated__/PostQuery.graphql';\r\n\r\nconst PostRoute = {\r\n  // a matching expression for which paths to handle\r\n  path: '/post/:id',\r\n\r\n  // what component to render for this route\r\n  component: React.lazy(() =&gt; import('./Post')),\r\n\r\n  // data to load for this route, as function of the route\r\n  // parameters\r\n  prepare: routeParams =&gt; {\r\n    // Relay extracts queries from components, allowing us to reference\r\n    // the data dependencies -- data tree -- from outside.\r\n    const postData = preloadQuery(PostQuery, {\r\n      postId: routeParams.id,\r\n    });\r\n\r\n    return { postData };\r\n  },\r\n};\r\n\r\nexport default PostRoute;\r\nGiven such a definition, a router can:\r\n\r\nMatch a URL to a route definition.\r\nCall the prepare() function to start loading that route’s data. Note that prepare() is synchronous — we don’t wait for the data to be ready, since we want to start rendering more important parts of the view (like the post body) as quickly as possible.\r\nPass the preloaded data to the component. If the component is ready — the React.lazy dynamic import has completed — the component will render and try to access its data. If not, React.lazy will suspend until the code is ready.\r\n\r\nThis approach can be generalized to other data-fetching solutions. An app that uses REST might define a route like this:\r\n// PostRoute.js (REST version)\r\n\r\n// Manually written logic for loading the data for the component\r\nimport PostData from './Post.data';\r\n\r\nconst PostRoute = {\r\n  // a matching expression for which paths to handle\r\n  path: '/post/:id',\r\n\r\n  // what component to render for this route\r\n  component: React.lazy(() =&gt; import('./Post')),\r\n\r\n  // data to load for this route, as function of the route\r\n  // parameters\r\n  prepare: routeParams =&gt; {\r\n    const postData = preloadRestEndpoint(\r\n      PostData.endpointUrl,\r\n      {\r\n        postId: routeParams.id,\r\n      },\r\n    );\r\n    return { postData };\r\n  },\r\n};\r\n\r\nexport default PostRoute;\r\nThis same approach can be employed not just for routing, but in other places where we show content lazily or based on user interaction. For example, a tab component could eagerly load the first tab’s code and data, and then use the same pattern as above to load the code and data for other tabs in the tab-change event handler. A component that displays a modal could preload the code and data for the modal in the click handler that triggers opening the modal, and so on.\r\nOnce we’ve implemented the ability to start loading code and data for a view independently, we have the option to go one step further. Consider a &lt;Link to={path} /&gt; component that links to a route. If the user hovers over that link, there’s a reasonable chance they’ll click it. And if they press the mouse down, there’s an even better chance that they’ll complete the click. If we can load code and data for a view after the user clicks, we can also start that work before they click, getting a head start on preparing the view.\r\nBest of all, we can centralize that logic in a few key places — a router or core UI components — and get any performance benefits automatically throughout our app. Of course preloading isn’t always beneficial. It’s something an application would tune based on the user’s device or network speed to avoid eating up user’s data plans. But the pattern here makes it easier to centralize the implementation of preloading and the decision of whether to enable it or not.\r\nLoad Data Incrementally\r\nThe above patterns — parallel data/view trees and fetching in event handlers — let us start loading all the data for a view earlier. But we still want to be able to show more important parts of the view without waiting for all of our data. At Facebook we’ve implemented support for this in GraphQL and Relay in the form of some new GraphQL directives (annotations that affect how/when data is delivered, but not what data). These new directives, called @defer and @stream, allow us to retrieve data incrementally. For example, consider our &lt;Post&gt; component from above. We want to show the body without waiting for the comments to be ready. We can achieve this with @defer and &lt;Suspense&gt;:\r\n// Post.js\r\nfunction Post(props) {\r\n  const postData = useFragment(graphql`\r\n    fragment PostData on Post {\r\n      author\r\n      title\r\n\r\n      # fetch data for the comments, but don't block on it being ready\r\n      ...CommentList @defer\r\n    }\r\n  `, props.post);\r\n\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;h1&gt;{postData.title}&lt;/h1&gt;\r\n      &lt;h2&gt;by {postData.author}&lt;/h2&gt;\r\n      {/* @defer pairs naturally with &lt;Suspense&gt; to make the UI non-blocking too */}\r\n      &lt;Suspense fallback={&lt;Spinner/&gt;}&gt;\r\n        &lt;CommentList post={postData} /&gt;\r\n      &lt;/Suspense&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\nHere, our GraphQL server will stream back the results, first returning the author and title fields and then returning the comment data when it’s ready. We wrap &lt;CommentList&gt; in a &lt;Suspense&gt; boundary so that we can render the post body before &lt;CommentList&gt; and its data are ready. This same pattern can be applied to other frameworks as well. For example, apps that call a REST API might make parallel requests to fetch the body and comments data for a post to avoid blocking on all the data being ready.\r\nTreat Code Like Data\r\nBut there’s one thing that’s still missing. We’ve shown how to preload data for a route — but what about code? The example above cheated a bit and used React.lazy. However, React.lazy is, as the name implies, lazy. It won’t start downloading code until the lazy component is actually rendered — it’s “fetch-on-render” for code!\r\nTo solve this, the React team is considering APIs that would allow bundle splitting and eager preloading for code as well. That would allow a user to pass some form of lazy component to a router, and for the router to trigger loading the code alongside its data as early as possible.\r\nPutting It All Together\r\nTo recap, achieving a great loading experience means that we need to start loading code and data as early as possible, but without waiting for all of it to be ready. Parallel data and view trees allow us to load the data for a view in parallel with loading the view (code) itself. Fetching in an event handler means we can start loading data as early as possible, and even optimistically preload a view when we have enough confidence that a user will navigate to it. Loading data incrementally allows us to load important data earlier without delaying the fetching of less important data. And treating code as data — and preloading it with similar APIs — allows us to load it earlier too.\r\nUsing These Patterns\r\nThese patterns aren’t just ideas — we’ve implemented them in Relay Hooks and are using them in production throughout the new facebook.com (which is currently in beta testing). If you’re interested in using or learning more about these patterns, here are some resources:\r\n\r\nThe React Concurrent docs explore how to use Concurrent Mode and Suspense and go into more detail about many of these patterns. It’s a great resource to learn more about the APIs and use-cases they support.\r\nThe experimental release of Relay Hooks implements the patterns described here.\r\n\r\nWe’ve implemented two similar example apps that demonstrate these concepts:\r\n\r\nThe Relay Hooks example app uses GitHub’s public GraphQL API to implement a simple issue tracker app. It includes nested route support with code and data preloading. The code is fully commented — we encourage cloning the repo, running the app locally, and exploring how it works.\r\nWe also have a non-GraphQL version of the app that demonstrates how these concepts can be applied to other data-fetching libraries.\r\n\r\n\r\n\r\nWhile the APIs around Concurrent Mode and Suspense are still experimental, we’re confident that the ideas in this post are proven by practice. However, we understand that Relay and GraphQL aren’t the right fit for everyone. That’s ok! We’re actively exploring how to generalize these patterns to approaches such as REST, and are exploring ideas for a more generic (ie non-GraphQL) API for composing a tree of data dependencies. In the meantime, we’re excited to see what new libraries will emerge that implement the patterns described in this post to make it easier to build great, fast user experiences.",
        "title": "Building Great User Experiences with Concurrent Mode and Suspense"
      },
      {
        "category_id": 3,
        "comments_link": null,
        "date": "2019-10-22T00:00:00Z",
        "feed_id": 4,
        "feed_title": "React",
        "id": 63,
        "is_read": false,
        "is_read_later": false,
        "link": "https://reactjs.org/blog/2019/10/22/react-release-channels.html",
        "media_link": null,
        "summary": "To share upcoming changes with our partners in the React ecosystem, we’re establishing official prerelease channels. We hope this process will help us make changes to React with confidence, and give developers the opportunity to try out experimental features.\r\n\r\nThis post will be most relevant to developers who work on frameworks, libraries, or developer tooling. Developers who use React primarily to build user-facing applications should not need to worry about our prerelease channels.\r\n\r\nReact relies on a thriving open source community to file bug reports, open pull requests, and submit RFCs. To encourage feedback, we sometimes share special builds of React that include unreleased features.\r\nBecause the source of truth for React is our public GitHub repository, it’s always been possible to build a copy of React that includes the latest changes. However it’s much easier for developers to install React from npm, so we occasionally publish prerelease builds to the npm registry. A recent example is the 16.7 alpha, which included an early version of the Hooks API.\r\nWe would like to make it even easier for developers to test prerelease builds of React, so we’re formalizing our process with three separate release channels.\r\nRelease Channels\r\n\r\nThe information in this post is also available on our Release Channels page. We will update that document whenever there are changes to our release process.\r\n\r\nEach of React’s release channels is designed for a distinct use case:\r\n\r\nLatest is for stable, semver React releases. It’s what you get when you install React from npm. This is the channel you’re already using today. Use this for all user-facing React applications.\r\nNext tracks the master branch of the React source code repository. Think of these as release candidates for the next minor semver release. Use this for integration testing between React and third party projects.\r\nExperimental includes experimental APIs and features that aren’t available in the stable releases. These also track the master branch, but with additional feature flags turned on. Use this to try out upcoming features before they are released.\r\n\r\nAll releases are published to npm, but only Latest uses semantic versioning. Prereleases (those in the Next and Experimental channels) have versions generated from a hash of their contents, e.g. 0.0.0-1022ee0ec for Next and 0.0.0-experimental-1022ee0ec for Experimental.\r\nThe only officially supported release channel for user-facing applications is Latest. Next and Experimental releases are provided for testing purposes only, and we provide no guarantees that behavior won’t change between releases. They do not follow the semver protocol that we use for releases from Latest.\r\nBy publishing prereleases to the same registry that we use for stable releases, we are able to take advantage of the many tools that support the npm workflow, like unpkg and CodeSandbox.\r\nLatest Channel\r\nLatest is the channel used for stable React releases. It corresponds to the latest tag on npm. It is the recommended channel for all React apps that are shipped to real users.\r\nIf you’re not sure which channel you should use, it’s Latest. If you’re a React developer, this is what you’re already using.\r\nYou can expect updates to Latest to be extremely stable. Versions follow the semantic versioning scheme. Learn more about our commitment to stability and incremental migration in our versioning policy.\r\nNext Channel\r\nThe Next channel is a prerelease channel that tracks the master branch of the React repository. We use prereleases in the Next channel as release candidates for the Latest channel. You can think of Next as a superset of Latest that is updated more frequently.\r\nThe degree of change between the most recent Next release and the most recent Latest release is approximately the same as you would find between two minor semver releases. However, the Next channel does not conform to semantic versioning. You should expect occasional breaking changes between successive releases in the Next channel.\r\nDo not use prereleases in user-facing applications.\r\nReleases in Next are published with the next tag on npm. Versions are generated from a hash of the build’s contents, e.g. 0.0.0-1022ee0ec.\r\nUsing the Next Channel for Integration Testing\r\nThe Next channel is designed to support integration testing between React and other projects.\r\nAll changes to React go through extensive internal testing before they are released to the public. However, there are a myriad of environments and configurations used throughout the React ecosystem, and it’s not possible for us to test against every single one.\r\nIf you’re the author of a third party React framework, library, developer tool, or similar infrastructure-type project, you can help us keep React stable for your users and the entire React community by periodically running your test suite against the most recent changes. If you’re interested, follow these steps:\r\n\r\n\r\nSet up a cron job using your preferred continuous integration platform. Cron jobs are supported by both CircleCI and Travis CI.\r\n\r\n\r\nIn the cron job, update your React packages to the most recent React release in the Next channel, using next tag on npm. Using the npm cli:\r\nnpm update react@next react-dom@next\r\nOr yarn:\r\nyarn upgrade react@next react-dom@next\r\n\r\n\r\nRun your test suite against the updated packages.\r\n\r\n\r\nIf everything passes, great! You can expect that your project will work with the next minor React release.\r\n\r\n\r\nIf something breaks unexpectedly, please let us know by filing an issue.\r\n\r\n\r\nA project that uses this workflow is Next.js. (No pun intended! Seriously!) You can refer to their CircleCI configuration as an example.\r\nExperimental Channel\r\nLike Next, the Experimental channel is a prerelease channel that tracks the master branch of the React repository. Unlike Next, Experimental releases include additional features and APIs that are not ready for wider release.\r\nUsually, an update to Next is accompanied by a corresponding update to Experimental. They are based on the same source revision, but are built using a different set of feature flags.\r\nExperimental releases may be significantly different than releases to Next and Latest. Do not use Experimental releases in user-facing applications. You should expect frequent breaking changes between releases in the Experimental channel.\r\nReleases in Experimental are published with the experimental tag on npm. Versions are generated from a hash of the build’s contents, e.g. 0.0.0-experimental-1022ee0ec.\r\nWhat Goes Into an Experimental Release?\r\nExperimental features are ones that are not ready to be released to the wider public, and may change drastically before they are finalized. Some experiments may never be finalized — the reason we have experiments is to test the viability of proposed changes.\r\nFor example, if the Experimental channel had existed when we announced Hooks, we would have released Hooks to the Experimental channel weeks before they were available in Latest.\r\nYou may find it valuable to run integration tests against Experimental. This is up to you. However, be advised that Experimental is even less stable than Next. We do not guarantee any stability between Experimental releases.\r\nHow Can I Learn More About Experimental Features?\r\nExperimental features may or may not be documented. Usually, experiments aren’t documented until they are close to shipping in Next or Stable.\r\nIf a feature is not documented, they may be accompanied by an RFC.\r\nWe will post to the React blog when we’re ready to announce new experiments, but that doesn’t mean we will publicize every experiment.\r\nYou can always refer to our public GitHub repository’s history for a comprehensive list of changes.",
        "title": "Preparing for the Future with React Prereleases"
      },
      {
        "category_id": 3,
        "comments_link": null,
        "date": "2019-08-15T00:00:00Z",
        "feed_id": 4,
        "feed_title": "React",
        "id": 62,
        "is_read": false,
        "is_read_later": false,
        "link": "https://reactjs.org/blog/2019/08/15/new-react-devtools.html",
        "media_link": null,
        "summary": "We are excited to announce a new release of the React Developer Tools, available today in Chrome, Firefox, and (Chromium) Edge!\r\nWhat’s changed?\r\nA lot has changed in version 4!\r\nAt a high level, this new version should offer significant performance gains and an improved navigation experience.\r\nIt also offers full support for React Hooks, including inspecting nested objects.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nVisit the interactive tutorial to try out the new version or see the changelog for demo videos and more details.\r\nWhich versions of React are supported?\r\nreact-dom\r\n\r\n0-14.x: Not supported\r\n15.x: Supported (except for the new component filters feature)\r\n16.x: Supported\r\n\r\nreact-native\r\n\r\n0-0.61: Not supported\r\n0.62: Will be supported (when 0.62 is released)\r\n\r\nHow do I get the new DevTools?\r\nReact DevTools is available as an extension for Chrome and Firefox.\r\nIf you have already installed the extension, it should update automatically within the next couple of hours.\r\nIf you use the standalone shell (e.g. in React Native or Safari), you can install the new version from NPM:\r\nnpm install -g react-devtools@^4\r\nWhere did all of the DOM elements go?\r\nThe new DevTools provides a way to filter components from the tree to make it easier to navigate deeply nested hierarchies.\r\nHost nodes (e.g. HTML &lt;div&gt;, React Native &lt;View&gt;) are hidden by default, but this filter can be disabled:\r\n\r\nHow do I get the old version back?\r\nIf you are working with React Native version 60 (or older) you can install the previous release of DevTools from NPM:\r\nnpm install --dev react-devtools@^3\r\nFor older versions of React DOM (v0.14&nbsp;or earlier) you will need to build the extension from source:\r\n# Checkout the extension source\r\ngit clone https://github.com/facebook/react-devtools\r\n\r\ncd react-devtools\r\n\r\n# Checkout the previous release branch\r\ngit checkout v3\r\n\r\n# Install dependencies and build the unpacked extension\r\nyarn install\r\nyarn build:extension\r\n\r\n# Follow the on-screen instructions to complete installation\r\nThank you!\r\nWe’d like to thank everyone who tested the early release of DevTools version 4.\r\nYour feedback helped improve this initial release significantly.\r\nWe still have many exciting features planned and feedback is always welcome!\r\nPlease feel free to open a GitHub issue or tag @reactjs on Twitter.",
        "title": "Introducing the New React DevTools"
      },
      {
        "category_id": 3,
        "comments_link": null,
        "date": "2019-08-08T00:00:00Z",
        "feed_id": 4,
        "feed_title": "React",
        "id": 61,
        "is_read": false,
        "is_read_later": false,
        "link": "https://reactjs.org/blog/2019/08/08/react-v16.9.0.html",
        "media_link": null,
        "summary": "Today we are releasing React 16.9. It contains several new features, bugfixes, and new deprecation warnings to help prepare for a future major release.\r\nNew Deprecations\r\nRenaming Unsafe Lifecycle Methods\r\nOver a year ago, we announced that unsafe lifecycle methods are getting renamed:\r\n\r\ncomponentWillMount → UNSAFE_componentWillMount\r\ncomponentWillReceiveProps → UNSAFE_componentWillReceiveProps\r\ncomponentWillUpdate → UNSAFE_componentWillUpdate\r\n\r\nReact 16.9 does not contain breaking changes, and the old names continue to work in this release. But you will now see a warning when using any of the old names:\r\n\r\nAs the warning suggests, there are usually better approaches for each of the unsafe methods. However, maybe you don’t have the time to migrate or test these components. In that case, we recommend running a “codemod” script that renames them automatically:\r\ncd your_project\r\nnpx react-codemod rename-unsafe-lifecycles\r\n(Note that it says npx, not npm. npx is a utility that comes with Node 6+ by default.)\r\nRunning this codemod will replace the old names like componentWillMount with the new names like UNSAFE_componentWillMount:\r\n\r\nThe new names like UNSAFE_componentWillMount will keep working in both React 16.9 and in React 17.x. However, the new UNSAFE_ prefix will help components with problematic patterns stand out during the code review and debugging sessions. (If you’d like, you can further discourage their use inside your app with the opt-in Strict Mode.)\r\n\r\nNote\r\nLearn more about our versioning policy and commitment to stability.\r\n\r\nDeprecating javascript: URLs\r\nURLs starting with javascript: are a dangerous attack surface because it’s easy to accidentally include unsanitized output in a tag like &lt;a href&gt; and create a security hole:\r\nconst userProfile = {\r\n  website: \"javascript: alert('you got hacked')\",\r\n};\r\n// This will now warn:\r\n&lt;a href={userProfile.website}&gt;Profile&lt;/a&gt;\r\nIn React 16.9, this pattern continues to work, but it will log a warning. If you use javascript: URLs for logic, try to use React event handlers instead. (As a last resort, you can circumvent the protection with dangerouslySetInnerHTML, but it is highly discouraged and often leads to security holes.)\r\nIn a future major release, React will throw an error if it encounters a javascript: URL.\r\nDeprecating “Factory” Components\r\nBefore compiling JavaScript classes with Babel became popular, React had support for a “factory” component that returns an object with a render method:\r\nfunction FactoryComponent() {\r\n  return { render() { return &lt;div /&gt;; } }\r\n}\r\nThis pattern is confusing because it looks too much like a function component — but it isn’t one. (A function component would just return the &lt;div /&gt; in the above example.)\r\nThis pattern was almost never used in the wild, and supporting it causes React to be slightly larger and slower than necessary. So we are deprecating this pattern in 16.9 and logging a warning if it’s encountered. If you rely on it, adding FactoryComponent.prototype = React.Component.prototype can serve as a workaround. Alternatively, you can convert it to either a class or a function component.\r\nWe don’t expect most codebases to be affected by this.\r\nNew Features\r\nAsync act() for Testing\r\nReact 16.8 introduced a new testing utility called act() to help you write tests that better match the browser behavior. For example, multiple state updates inside a single act() get batched. This matches how React already works when handling real browser events, and helps prepare your components for the future in which React will batch updates more often.\r\nHowever, in 16.8 act() only supported synchronous functions. Sometimes, you might have seen a warning like this in a test but could not easily fix it:\r\nAn update to SomeComponent inside a test was not wrapped in act(...).\r\nIn React 16.9, act() also accepts asynchronous functions, and you can await its call:\r\nawait act(async () =&gt; {\r\n  // ...\r\n});\r\nThis solves the remaining cases where you couldn’t use act() before, such as when the state update was inside an asynchronous function. As a result, you should be able to fix all the remaining act() warnings in your tests now.\r\nWe’ve heard there wasn’t enough information about how to write tests with act(). The new Testing Recipes guide describes common scenarios, and how act() can help you write good tests. These examples use vanilla DOM APIs, but you can also use React Testing Library to reduce the boilerplate code. Many of its methods already use act() internally.\r\nPlease let us know on the issue tracker if you bump into any other scenarios where act() doesn’t work well for you, and we’ll try to help.\r\nPerformance Measurements with &lt;React.Profiler&gt;\r\nIn React 16.5, we introduced a new React Profiler for DevTools that helps find performance bottlenecks in your application. In React 16.9, we are also adding a programmatic way to gather measurements called &lt;React.Profiler&gt;. We expect that most smaller apps won’t use it, but it can be handy to track performance regressions over time in larger apps.\r\nThe &lt;Profiler&gt; measures how often a React application renders and what the “cost” of rendering is. Its purpose is to help identify parts of an application that are slow and may benefit from optimizations such as memoization.\r\nA &lt;Profiler&gt; can be added anywhere in a React tree to measure the cost of rendering that part of the tree.\r\nIt requires two props: an id (string) and an onRender callback (function) which React calls any time a component within the tree “commits” an update.\r\nrender(\r\n  &lt;Profiler id=\"application\" onRender={onRenderCallback}&gt;\r\n    &lt;App&gt;\r\n      &lt;Navigation {...props} /&gt;\r\n      &lt;Main {...props} /&gt;\r\n    &lt;/App&gt;\r\n  &lt;/Profiler&gt;\r\n);\r\n To learn more about the Profiler and the parameters passed to the onRender callback, check out the Profiler docs.\r\n\r\nNote:\r\nProfiling adds some additional overhead, so it is disabled in the production build.\r\nTo opt into production profiling, React provides a special production build with profiling enabled.\r\nRead more about how to use this build at fb.me/react-profiling.\r\n\r\nNotable Bugfixes\r\nThis release contains a few other notable improvements:\r\n\r\n\r\nA crash when calling findDOMNode() inside a &lt;Suspense&gt; tree has been fixed.\r\n\r\n\r\nA memory leak caused by retaining deleted subtrees has been fixed too.\r\n\r\n\r\nAn infinite loop caused by setState in useEffect now logs an error. (This is similar to the error you see when you call setState in componentDidUpdate in a class.)\r\n\r\n\r\nWe’re thankful to all the contributors who helped surface and fix these and other issues. You can find the full changelog below.\r\nAn Update to the Roadmap\r\nIn November 2018, we have posted this roadmap for the 16.x releases:\r\n\r\nA minor 16.x release with React Hooks (past estimate: Q1 2019)\r\nA minor 16.x release with Concurrent Mode (past estimate: Q2 2019)\r\nA minor 16.x release with Suspense for Data Fetching (past estimate: mid 2019)\r\n\r\nThese estimates were too optimistic, and we’ve needed to adjust them.\r\ntldr: We shipped Hooks on time, but we’re regrouping Concurrent Mode and Suspense for Data Fetching into a single release that we intend to release later this year.\r\nIn February, we shipped a stable 16.8 release including React Hooks, with React Native support coming a month later. However, we underestimated the follow-up work for this release, including the lint rules, developer tools, examples, and more documentation. This shifted the timeline by a few months.\r\nNow that React Hooks are rolled out, the work on Concurrent Mode and Suspense for Data Fetching is in full swing. The new Facebook website that’s currently in active development is built on top of these features. Testing them with real code helped discover and address many issues before they can affect the open source users. Some of these fixes involved an internal redesign of these features, which has also caused the timeline to slip.\r\nWith this new understanding, here’s what we plan to do next.\r\nOne Release Instead of Two\r\nConcurrent Mode and Suspense power the new Facebook website that’s in active development, so we are confident that they’re close to a stable state technically. We also now better understand the concrete steps before they are ready for open source adoption.\r\nOriginally we thought we would split Concurrent Mode and Suspense for Data Fetching into two releases. We’ve found that this sequencing is confusing to explain because these features are more related than we thought at first. So we plan to release support for both Concurrent Mode and Suspense for Data Fetching in a single combined release instead.\r\nWe don’t want to overpromise the release date again. Given that we rely on both of them in production code, we expect to provide a 16.x release with opt-in support for them this year.\r\nAn Update on Data Fetching\r\nWhile React is not opinionated about how you fetch data, the first release of Suspense for Data Fetching will likely focus on integrating with opinionated data fetching libraries. For example, at Facebook we are using upcoming Relay APIs that integrate with Suspense. We will document how other opinionated libraries like Apollo can support a similar integration.\r\nIn the first release, we don’t intend to focus on the ad-hoc “fire an HTTP request” solution we used in earlier demos (also known as “React Cache”). However, we expect that both we and the React community will be exploring that space in the months after the initial release.\r\nAn Update on Server Rendering\r\nWe have started the work on the new Suspense-capable server renderer, but we don’t expect it to be ready for the initial release of Concurrent Mode. This release will, however, provide a temporary solution that lets the existing server renderer emit HTML for Suspense fallbacks immediately, and then render their real content on the client. This is the solution we are currently using at Facebook ourselves until the streaming renderer is ready.\r\nWhy Is It Taking So Long?\r\nWe’ve shipped the individual pieces leading up to Concurrent Mode as they became stable, including new context API, lazy loading with Suspense, and Hooks. We are also eager to release the other missing parts, but trying them at scale is an important part of the process. The honest answer is that it just took more work than we expected when we started. As always, we appreciate your questions and feedback on Twitter and in our issue tracker.\r\nInstallation\r\nReact\r\nReact v16.9.0 is available on the npm registry.\r\nTo install React 16 with Yarn, run:\r\nyarn add react@^16.9.0 react-dom@^16.9.0\r\nTo install React 16 with npm, run:\r\nnpm install --save react@^16.9.0 react-dom@^16.9.0\r\nWe also provide UMD builds of React via a CDN:\r\n&lt;script crossorigin src=\"https://unpkg.com/react@16/umd/react.production.min.js\"&gt;&lt;/script&gt;\r\n&lt;script crossorigin src=\"https://unpkg.com/react-dom@16/umd/react-dom.production.min.js\"&gt;&lt;/script&gt;\r\nRefer to the documentation for detailed installation instructions.\r\nChangelog\r\nReact\r\n\r\nAdd &lt;React.Profiler&gt; API for gathering performance measurements programmatically. (@bvaughn in #15172)\r\nRemove unstable_ConcurrentMode in favor of unstable_createRoot. (@acdlite in #15532)\r\n\r\nReact DOM\r\n\r\nDeprecate old names for the UNSAFE_* lifecycle methods. (@bvaughn in #15186 and @threepointone in #16103)\r\nDeprecate javascript: URLs as a common attack surface. (@sebmarkbage in #15047)\r\nDeprecate uncommon “module pattern” (factory) components. (@sebmarkbage in #15145)\r\nAdd support for the disablePictureInPicture attribute on &lt;video&gt;. (@eek in #15334)\r\nAdd support for onLoad event for &lt;embed&gt;. (@cherniavskii in #15614)\r\nAdd support for editing useState state from DevTools. (@bvaughn in #14906)\r\nAdd support for toggling Suspense from DevTools. (@gaearon in #15232)\r\nWarn when setState is called from useEffect, creating a loop. (@gaearon in #15180)\r\nFix a memory leak. (@paulshen in #16115)\r\nFix a crash inside findDOMNode for components wrapped in &lt;Suspense&gt;. (@acdlite in #15312)\r\nFix pending effects from being flushed too late. (@acdlite in #15650)\r\nFix incorrect argument order in a warning message. (@brickspert in #15345)\r\nFix hiding Suspense fallback nodes when there is an !important style. (@acdlite in #15861 and #15882)\r\nSlightly improve hydration performance. (@bmeurer in #15998)\r\n\r\nReact DOM Server\r\n\r\nFix incorrect output for camelCase custom CSS property names. (@bedakb in #16167)\r\n\r\nReact Test Utilities and Test Renderer\r\n\r\nAdd act(async () =&gt; ...) for testing asynchronous state updates. (@threepointone in #14853)\r\nAdd support for nesting act from different renderers. (@threepointone in #16039 and #16042)\r\nWarn in Strict Mode if effects are scheduled outside an act() call. (@threepointone in #15763 and #16041)\r\nWarn when using act from the wrong renderer. (@threepointone in #15756)\r\n",
        "title": "React v16.9.0 and the Roadmap Update"
      },
      {
        "category_id": 3,
        "comments_link": null,
        "date": "2019-02-23T00:00:00Z",
        "feed_id": 4,
        "feed_title": "React",
        "id": 60,
        "is_read": false,
        "is_read_later": false,
        "link": "https://reactjs.org/blog/2019/02/23/is-react-translated-yet.html",
        "media_link": null,
        "summary": "We’re excited to announce an ongoing effort to maintain official translations of the React documentation website into different languages. Thanks to the dedicated efforts of React community members from around the world, React is now being translated into over 30 languages! You can find them on the new Languages page.\r\nIn addition, the following three languages have completed translating most of the React Docs! 🎉\r\n\r\nSpanish: es.reactjs.org\r\nJapanese: ja.reactjs.org\r\nBrazilian Portuguese: pt-br.reactjs.org\r\n\r\nSpecial congratulations to Alejandro Ñáñez Ortiz, Rainer Martínez Fraga, David Morales, Miguel Alejandro Bolivar Portilla, and all the contributors to the Spanish translation for being the first to completely translate the core pages of the docs!\r\nWhy Localization Matters\r\nReact already has many meetups and conferences around the world, but many programmers don’t use English as their primary language. We’d love to support local communities who use React by making our documentation available in most popular languages.\r\nIn the past, React community members have created unofficial translations for Chinese, Arabic, and Korean; by making an official channel for these translated docs we’re hoping to make them easier to find and help make sure that non-English-speaking users of React aren’t left behind.\r\nContributing\r\nIf you would like to help out on a current translation, check out the Languages page and click on the “Contribute” link for your language.\r\nCan’t find your language? If you’d like to maintain your language’s translation fork, follow the instructions in the translation repo!\r\nBackstory\r\nHi everyone! I’m Nat! You may know me as the polyhedra lady. For the past few weeks, I’ve been helping the React team coordinate their translation effort. Here’s how I did it.\r\nOur original approach for translations was to use a SaaS platform that allows users to submit translations. There was already a pull request to integrate it and my original responsibility was to finish that integration. However, we had concerns about the feasibility of that integration and the current quality of translations on the platform. Our primary concern was ensuring that translations kept up to date with the main repo and didn’t become “stale”.\r\nDan encouraged me to look for alternate solutions, and we stumbled across how Vue maintained its translations — through different forks of the main repo on GitHub. In particular, the Japanese translation used a bot to periodically check for changes in the English repo and submits pull requests whenever there is a change.\r\nThis approach appealed to us for several reasons:\r\n\r\nIt was less code integration to get off the ground.\r\nIt encouraged active maintainers for each repo to ensure quality.\r\nContributors already understand GitHub as a platform and are motivated to contribute directly to the React organization.\r\n\r\nWe started off with an initial trial period of three languages: Spanish, Japanese, and Simplified Chinese. This allowed us to work out any kinks in our process and make sure future translations are set up for success. I wanted to give the translation teams freedom to choose whatever tools they felt comfortable with. The only requirement is a checklist that outlines the order of importance for translating pages.\r\nAfter the trial period, we were ready to accept more languages. I created a script to automate the creation of the new language repo, and a site, Is React Translated Yet?, to track progress on the different translations. We started 10 new translations on our first day alone!\r\nBecause of the automation, the rest of the maintenance went mostly smoothly. We eventually created a Slack channel to make it easier for translators to share information, and I released a guide solidifying the responsibilities of maintainers. Allowing translators to talk with each other was a great boon — for example, the Arabic, Persian, and Hebrew translations were able to talk to each other in order to get right-to-left text working!\r\nThe Bot\r\nThe most challenging part was getting the bot to sync changes from the English version of the site. Initially we were using the che-tsumi bot created by the Japanese Vue translation team, but we soon decided to build our own bot to suit our needs. In particular, the che-tsumi bot works by cherry picking new commits. This ended up causing a cavalade of new issues that were interconnected, especially when Hooks were released.\r\nIn the end, we decided that instead of cherry picking each commit, it made more sense to merge all new commits and create a pull request around once a day. Conflicts are merged as-is and listed in the pull request, leaving a checklist for maintainers to fix.\r\nCreating the sync script was easy enough: it downloads the translated repo, adds the original as a remote, pulls from it, merges the conflicts, and creates a pull request.\r\nThe problem was finding a place for the bot to run. I’m a frontend developer for a reason — Heroku and its ilk are alien to me and endlessly frustrating. In fact, until this past Tuesday, I was running the script by hand on my local machine!\r\nThe biggest challenge was space. Each fork of the repo is around 100MB — which takes minutes to clone on my local machine. We have 32 forks, and the free tiers or most deployment platforms I checked limited you to 512MB of storage.\r\nAfter lots of notepad calculations, I found a solution: delete each repo once we’ve finished the script and limit the concurrency of sync scripts that run at once to be within the storage requirements. Luckily, Heroku dynos have a much faster Internet connection and are able to clone even the React repo quickly.\r\nThere were other smaller issues that I ran into. I tried using the Heroku Scheduler add-on so I didn’t have to write any actual watch code, but it end up running too inconsistently, and I had an existential meltdown on Twitter when I couldn’t figure out how to send commits from the Heroku dyno. But in the end, this frontend engineer was able to get the bot working!\r\nThere are, as always, improvements I want to make to the bot. Right now it doesn’t check whether there is an outstanding pull request before pushing another one. It’s still hard to tell the exact change that happened in the original source, and it’s possible to miss out on a needed translation change. But I trust the maintainers we’ve chosen to work through these issues, and the bot is open source if anyone wants to help me make these improvements!\r\nThanks\r\nFinally, I would like to extend my gratitude to the following people and groups:\r\n\r\nAll the translation maintainers and contributors who are helping translate React to more than thirty languages.\r\nThe Vue.js Japan User Group for initiating the idea of having bot-managed translations, and especially Hanatani Takuma for helping us understand their approach and helping maintain the Japanese translation.\r\nSoichiro Miki for many contributions and thoughtful comments on the overall translation process, as well as for maintaining the Japanese translation.\r\nEric Nakagawa for managing our previous translation process.\r\nBrian Vaughn for setting up the languages page and managing all the subdomains.\r\n\r\n And finally, thank you to Dan Abramov for giving me this opportunity and being a great mentor along the way.",
        "title": "Is React Translated Yet? ¡Sí! Sim! はい！"
      },
      {
        "category_id": 3,
        "comments_link": null,
        "date": "2019-02-06T00:00:00Z",
        "feed_id": 4,
        "feed_title": "React",
        "id": 59,
        "is_read": false,
        "is_read_later": false,
        "link": "https://reactjs.org/blog/2019/02/06/react-v16.8.0.html",
        "media_link": null,
        "summary": "With React 16.8, React Hooks are available in a stable release!\r\nWhat Are Hooks?\r\nHooks let you use state and other React features without writing a class. You can also build your own Hooks to share reusable stateful logic between components.\r\nIf you’ve never heard of Hooks before, you might find these resources interesting:\r\n\r\nIntroducing Hooks explains why we’re adding Hooks to React.\r\nHooks at a Glance is a fast-paced overview of the built-in Hooks.\r\nBuilding Your Own Hooks demonstrates code reuse with custom Hooks.\r\nMaking Sense of React Hooks explores the new possibilities unlocked by Hooks.\r\nuseHooks.com showcases community-maintained Hooks recipes and demos.\r\n\r\nYou don’t have to learn Hooks right now. Hooks have no breaking changes, and we have no plans to remove classes from React. The Hooks FAQ describes the gradual adoption strategy.\r\nNo Big Rewrites\r\nWe don’t recommend rewriting your existing applications to use Hooks overnight. Instead, try using Hooks in some of the new components, and let us know what you think. Code using Hooks will work side by side with existing code using classes.\r\nCan I Use Hooks Today?\r\nYes! Starting with 16.8.0, React includes a stable implementation of React Hooks for:\r\n\r\nReact DOM\r\nReact DOM Server\r\nReact Test Renderer\r\nReact Shallow Renderer\r\n\r\nNote that to enable Hooks, all React packages need to be 16.8.0 or higher. Hooks won’t work if you forget to update, for example, React DOM.\r\nReact Native will support Hooks in the 0.59 release.\r\nTooling Support\r\nReact Hooks are now supported by React DevTools. They are also supported in the latest Flow and TypeScript definitions for React. We strongly recommend enabling a new lint rule called eslint-plugin-react-hooks to enforce best practices with Hooks. It will soon be included into Create React App by default.\r\nWhat’s Next\r\nWe described our plan for the next months in the recently published React Roadmap.\r\nNote that React Hooks don’t cover all use cases for classes yet but they’re very close. Currently, only getSnapshotBeforeUpdate() and componentDidCatch() methods don’t have equivalent Hooks APIs, and these lifecycles are relatively uncommon. If you want, you should be able to use Hooks in most of the new code you’re writing.\r\nEven while Hooks were in alpha, the React community created many interesting examples and recipes using Hooks for animations, forms, subscriptions, integrating with other libraries, and so on. We’re excited about Hooks because they make code reuse easier, helping you write your components in a simpler way and make great user experiences. We can’t wait to see what you’ll create next!\r\nTesting Hooks\r\nWe have added a new API called ReactTestUtils.act() in this release. It ensures that the behavior in your tests matches what happens in the browser more closely. We recommend to wrap any code rendering and triggering updates to your components into act() calls. Testing libraries can also wrap their APIs with it (for example, react-testing-library’s render and fireEvent utilities do this).\r\nFor example, the counter example from this page can be tested like this:\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { act } from 'react-dom/test-utils';\r\nimport Counter from './Counter';\r\n\r\nlet container;\r\n\r\nbeforeEach(() =&gt; {\r\n  container = document.createElement('div');\r\n  document.body.appendChild(container);\r\n});\r\n\r\nafterEach(() =&gt; {\r\n  document.body.removeChild(container);\r\n  container = null;\r\n});\r\n\r\nit('can render and update a counter', () =&gt; {\r\n  // Test first render and effect\r\n  act(() =&gt; {\r\n    ReactDOM.render(&lt;Counter /&gt;, container);\r\n  });\r\n  const button = container.querySelector('button');\r\n  const label = container.querySelector('p');\r\n  expect(label.textContent).toBe('You clicked 0 times');\r\n  expect(document.title).toBe('You clicked 0 times');\r\n\r\n  // Test second render and effect\r\n  act(() =&gt; {\r\n    button.dispatchEvent(new MouseEvent('click', {bubbles: true}));\r\n  });\r\n  expect(label.textContent).toBe('You clicked 1 times');\r\n  expect(document.title).toBe('You clicked 1 times');\r\n});\r\nThe calls to act() will also flush the effects inside of them.\r\nIf you need to test a custom Hook, you can do so by creating a component in your test, and using your Hook from it. Then you can test the component you wrote.\r\nTo reduce the boilerplate, we recommend using react-testing-library which is designed to encourage writing tests that use your components as the end users do.\r\nThanks\r\nWe’d like to thank everybody who commented on the Hooks RFC for sharing their feedback. We’ve read all of your comments and made some adjustments to the final API based on them.\r\nInstallation\r\nReact\r\nReact v16.8.0 is available on the npm registry.\r\nTo install React 16 with Yarn, run:\r\nyarn add react@^16.8.0 react-dom@^16.8.0\r\nTo install React 16 with npm, run:\r\nnpm install --save react@^16.8.0 react-dom@^16.8.0\r\nWe also provide UMD builds of React via a CDN:\r\n&lt;script crossorigin src=\"https://unpkg.com/react@16/umd/react.production.min.js\"&gt;&lt;/script&gt;\r\n&lt;script crossorigin src=\"https://unpkg.com/react-dom@16/umd/react-dom.production.min.js\"&gt;&lt;/script&gt;\r\nRefer to the documentation for detailed installation instructions.\r\nESLint Plugin for React Hooks\r\n\r\nNote\r\nAs mentioned above, we strongly recommend using the eslint-plugin-react-hooks lint rule.\r\nIf you’re using Create React App, instead of manually configuring ESLint you can wait for the next version of react-scripts which will come out shortly and will include this rule.\r\n\r\nAssuming you already have ESLint installed, run:\r\n# npm\r\nnpm install eslint-plugin-react-hooks --save-dev\r\n\r\n# yarn\r\nyarn add eslint-plugin-react-hooks --dev\r\nThen add it to your ESLint configuration:\r\n{\r\n  \"plugins\": [\r\n    // ...\r\n    \"react-hooks\"\r\n  ],\r\n  \"rules\": {\r\n    // ...\r\n    \"react-hooks/rules-of-hooks\": \"error\"\r\n  }\r\n}\r\nChangelog\r\nReact\r\n\r\nAdd Hooks — a way to use state and other React features without writing a class. (@acdlite et al. in #13968)\r\nImprove the useReducer Hook lazy initialization API. (@acdlite in #14723)\r\n\r\nReact DOM\r\n\r\nBail out of rendering on identical values for useState and useReducer Hooks. (@acdlite in #14569)\r\nDon’t compare the first argument passed to useEffect/useMemo/useCallback Hooks. (@acdlite in #14594)\r\nUse Object.is algorithm for comparing useState and useReducer values. (@Jessidhia in #14752)\r\nSupport synchronous thenables passed to React.lazy(). (@gaearon in #14626)\r\nRender components with Hooks twice in Strict Mode (DEV-only) to match class behavior. (@gaearon in #14654)\r\nWarn about mismatching Hook order in development. (@threepointone in #14585 and @acdlite in #14591)\r\nEffect clean-up functions must return either undefined or a function. All other values, including null, are not allowed. @acdlite in #14119\r\n\r\nReact Test Renderer\r\n\r\nSupport Hooks in the shallow renderer. (@trueadm in #14567)\r\nFix wrong state in shouldComponentUpdate in the presence of getDerivedStateFromProps for Shallow Renderer. (@chenesan in #14613)\r\nAdd ReactTestRenderer.act() and ReactTestUtils.act() for batching updates so that tests more closely match real behavior. (@threepointone in #14744)\r\n\r\nESLint Plugin: React Hooks\r\n\r\nInitial release. (@calebmer in #13968)\r\nFix reporting after encountering a loop. (@calebmer and @Yurickh in #14661)\r\nDon’t consider throwing to be a rule violation. (@sophiebits in #14040)\r\n\r\nHooks Changelog Since Alpha Versions\r\nThe above changelog contains all notable changes since our last stable release (16.7.0). As with all our minor releases, none of the changes break backwards compatibility.\r\nIf you’re currently using Hooks from an alpha build of React, note that this release does contain some small breaking changes to Hooks. We don’t recommend depending on alphas in production code. We publish them so we can make changes in response to community feedback before the API is stable.\r\nHere are all breaking changes to Hooks that have been made since the first alpha release:\r\n\r\nRemove useMutationEffect. (@sophiebits in #14336)\r\nRename useImperativeMethods to useImperativeHandle. (@threepointone in #14565)\r\nBail out of rendering on identical values for useState and useReducer Hooks. (@acdlite in #14569)\r\nDon’t compare the first argument passed to useEffect/useMemo/useCallback Hooks. (@acdlite in #14594)\r\nUse Object.is algorithm for comparing useState and useReducer values. (@Jessidhia in #14752)\r\nRender components with Hooks twice in Strict Mode (DEV-only). (@gaearon in #14654)\r\nImprove the useReducer Hook lazy initialization API. (@acdlite in #14723)\r\n",
        "title": "React v16.8: The One With Hooks"
      },
      {
        "category_id": 3,
        "comments_link": null,
        "date": "2018-12-19T00:00:00Z",
        "feed_id": 4,
        "feed_title": "React",
        "id": 58,
        "is_read": false,
        "is_read_later": false,
        "link": "https://reactjs.org/blog/2018/12/19/react-v-16-7.html",
        "media_link": null,
        "summary": "Our latest release includes an important performance bugfix for React.lazy. Although there are no API changes, we’re releasing it as a minor instead of a patch.\r\nWhy Is This Bugfix a Minor Instead of a Patch?\r\nReact follows semantic versioning. Typically, this means that we use patch versions for bugfixes, and minors for new (non-breaking) features. However, we reserve the option to release minor versions even if they do not include new features. The motivation is to reserve patches for changes that have a very low chance of breaking. Patches are the most important type of release because they sometimes contain critical bugfixes. That means patch releases have a higher bar for reliability. It’s unacceptable for a patch to introduce additional bugs, because if people come to distrust patches, it compromises our ability to fix critical bugs when they arise — for example, to fix a security vulnerability.\r\nWe never intend to ship bugs. React has a hard-earned reputation for stability, and we intend to keep it that way. We thoroughly test every version of React before releasing. This includes unit tests, generative (fuzzy) tests, integration tests, and internal dogfooding across tens of thousands of components. However, sometimes we make mistakes. That’s why, going forward, our policy will be that if a release contains non-trivial changes, we will bump the minor version, even if the external behavior is the same. We’ll also bump the minor when changing unstable_-prefixed APIs.\r\nCan I Use Hooks Yet?\r\nNot yet, but soon!\r\nAt React Conf, we said that 16.7 would be the first release to include Hooks. This was a mistake. We shouldn’t have attached a specific version number to an unreleased feature. We’ll avoid this in the future.\r\nAlthough 16.7 does not include Hooks, please do not infer anything about the timeline of the Hooks launch. Our plans for Hooks are unchanged:\r\n\r\nThe Hooks proposal was accepted (with minor planned changes in response to feedback).\r\nThe implementation was merged into the React repo (behind a feature flag).\r\nWe’re currently in the testing phase, and you can expect a public release within a few months.\r\n\r\nWe’ve heard from many people who want to start using Hooks in their apps. We also can’t wait to ship them! But because Hooks changes how we write React components, we are taking extra time to get the details right. We appreciate your patience as we prepare this exciting new feature for widespread, ahem, use.\r\nLearn more about our roadmap in our previous post.\r\nInstallation\r\nReact v16.7.0 is available on the npm registry.\r\nTo install React 16 with Yarn, run:\r\nyarn add react@^16.7.0 react-dom@^16.7.0\r\nTo install React 16 with npm, run:\r\nnpm install --save react@^16.7.0 react-dom@^16.7.0\r\nWe also provide UMD builds of React via a CDN:\r\n&lt;script crossorigin src=\"https://unpkg.com/react@16/umd/react.production.min.js\"&gt;&lt;/script&gt;\r\n&lt;script crossorigin src=\"https://unpkg.com/react-dom@16/umd/react-dom.production.min.js\"&gt;&lt;/script&gt;\r\nRefer to the documentation for detailed installation instructions.\r\nChangelog\r\nReact DOM\r\n\r\nFix performance of React.lazy for large numbers of lazily-loaded components. (@acdlite in #14429)\r\nClear fields on unmount to avoid memory leaks. (@trueadm in #14276)\r\nFix bug with SSR and context when mixing react-dom/server@16.6 and react@&lt;16.6. (@gaearon in #14291)\r\nFix a performance regression in profiling mode. (@bvaughn in #14383)\r\n\r\nScheduler (Experimental)\r\n\r\nPost to MessageChannel instead of window. (@acdlite in #14234)\r\nReduce serialization overhead. (@developit in #14249)\r\nFix fallback to setTimeout in testing environments. (@bvaughn in #14358)\r\nAdd methods for debugging. (@mrkev in #14053)\r\n",
        "title": "React v16.7: No, This Is Not the One With Hooks"
      },
      {
        "category_id": 3,
        "comments_link": null,
        "date": "2018-11-27T00:00:00Z",
        "feed_id": 4,
        "feed_title": "React",
        "id": 57,
        "is_read": false,
        "is_read_later": false,
        "link": "https://reactjs.org/blog/2018/11/27/react-16-roadmap.html",
        "media_link": null,
        "summary": "You might have heard about features like “Hooks”, “Suspense”, and “Concurrent Rendering” in the previous blog posts and talks. In this post, we’ll look at how they fit together and the expected timeline for their availability in a stable release of React.\r\n\r\nAn Update from August, 2019\r\nYou can find an update to this roadmap in the React 16.9 release blog post.\r\n\r\ntl;dr\r\nWe plan to split the rollout of new React features into the following milestones:\r\n\r\nReact 16.6 with Suspense for Code Splitting (already shipped)\r\nA minor 16.x release with React Hooks (~Q1 2019)\r\nA minor 16.x release with Concurrent Mode (~Q2 2019)\r\nA minor 16.x release with Suspense for Data Fetching (~mid 2019)\r\n\r\n(The original version of this post used exact version numbers. We edited it to reflect that there might need to be a few other minor releases in the middle between these ones.)\r\nThese are estimates, and the details may change as we’re further along. There’s at least two more projects we plan to complete in 2019. They require more exploration and aren’t tied to a particular release yet:\r\n\r\nModernizing React DOM\r\nSuspense for Server Rendering\r\n\r\nWe expect to get more clarity on their timeline in the coming months.\r\n\r\nNote\r\nThis post is just a roadmap — there is nothing in it that requires your immediate attention. When each of these features are released, we’ll publish a full blog post announcing them.\r\n\r\nRelease Timeline\r\nWe have a single vision for how all of these features fit together, but we’re releasing each part as soon as it is ready so that you can test and start using them sooner. The API design doesn’t always make sense when looking at one piece in isolation; this post lays out the major parts of our plan to help you see the whole picture. (See our versioning policy to learn more about our commitment to stability.)\r\nThe gradual release strategy helps us refine the APIs, but the transitional period when some things aren’t ready can be confusing. Let’s look at what these different features mean for your app, how they relate to each other, and when you can expect to start learning and using them.\r\nReact 16.6 (shipped): The One with Suspense for Code Splitting\r\nSuspense refers to React’s new ability to “suspend” rendering while components are waiting for something, and display a loading indicator. In React 16.6, Suspense supports only one use case: lazy loading components with React.lazy() and &lt;React.Suspense&gt;.\r\n// This component is loaded dynamically\r\nconst OtherComponent = React.lazy(() =&gt; import('./OtherComponent'));\r\n\r\nfunction MyComponent() {\r\n  return (\r\n    &lt;React.Suspense fallback={&lt;Spinner /&gt;}&gt;\r\n      &lt;div&gt;\r\n        &lt;OtherComponent /&gt;\r\n      &lt;/div&gt;\r\n    &lt;/React.Suspense&gt;\r\n  );\r\n}\r\nCode splitting with React.lazy() with &lt;React.Suspense&gt; is documented in the Code Splitting guide. You can find another practical explanation in this article.\r\nWe have been using Suspense for code splitting at Facebook since July, and expect it to be stable. There’s been a few regressions in the initial public release in 16.6.0, but they were fixed in 16.6.3.\r\nCode splitting is just the first step for Suspense. Our longer term vision for Suspense involves letting it handle data fetching too (and integrate with libraries like Apollo). In addition to a convenient programming model, Suspense also provides better user experience in Concurrent Mode. You’ll find information about these topics further below.\r\nStatus in React DOM: Available since React 16.6.0.\r\nStatus in React DOM Server: Suspense is not available in the server renderer yet. This isn’t for the lack of attention. We’ve started work on a new asynchronous server renderer that will support Suspense, but it’s a large project and will take a good chunk of 2019 to complete.\r\nStatus in React Native: Bundle splitting isn’t very useful in React Native, but there’s nothing technically preventing React.lazy() and &lt;Suspense&gt; from working when given a Promise to a module.\r\nRecommendation: If you only do client rendering, we recommend widely adopting React.lazy() and &lt;React.Suspense&gt; for code splitting React components. If you do server rendering, you’ll have to wait with adoption until the new server renderer is ready.\r\nReact 16.x (~Q1 2019): The One with Hooks\r\nHooks let you use features like state and lifecycle from function components. They also let you reuse stateful logic between components without introducing extra nesting in your tree.\r\nfunction Example() {\r\n  // Declare a new state variable, which we'll call \"count\"\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n   &lt;div&gt;\r\n     &lt;p&gt;You clicked {count} times&lt;/p&gt;\r\n     &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\r\n       Click me\r\n     &lt;/button&gt;\r\n   &lt;/div&gt;\r\n );\r\n}\r\nHooks introduction and overview are good places to start. Watch these talks for a video introduction and a deep dive. The FAQ should answer most of your further questions. To learn more about the motivation behind Hooks, you can read this article. Some of the rationale for the API design of Hooks is explained in this RFC thread reply.\r\nWe have been dogfooding Hooks at Facebook since September. We don’t expect major bugs in the implementation. Hooks are only available in the 16.7 alpha versions of React. Some of their API is expected to change in the final version (see the end of this comment for details). It is possible that the minor release with Hooks might not be React 16.7.\r\nHooks represent our vision for the future of React. They solve both problems that React users experience directly (“wrapper hell” of render props and higher-order components, duplication of logic in lifecycle methods), and the issues we’ve encountered optimizing React at scale (such as difficulties in inlining components with a compiler). Hooks don’t deprecate classes. However, if Hooks are successful, it is possible that in a future major release class support might move to a separate package, reducing the default bundle size of React.\r\nStatus in React DOM: The first version of react and react-dom supporting Hooks is 16.7.0-alpha.0. We expect to publish more alphas over the next months (at the time of writing, the latest one is 16.7.0-alpha.2). You can try them by installing react@next with react-dom@next. Don’t forget to update react-dom — otherwise Hooks won’t work.\r\nStatus in React DOM Server: The same 16.7 alpha versions of react-dom fully support Hooks with react-dom/server.\r\nStatus in React Native: There is no officially supported way to try Hooks in React Native yet. If you’re feeling adventurous, check out this thread for unofficial instructions. There is a known issue with useEffect firing too late which still needs to be solved.\r\nRecommendation: When you’re ready, we encourage you to start trying Hooks in new components you write. Make sure everyone on your team is on board with using them and familiar with this documentation. We don’t recommend rewriting your existing classes to Hooks unless you planned to rewrite them anyway (e.g. to fix bugs). Read more about the adoption strategy here.\r\nReact 16.x (~Q2 2019): The One with Concurrent Mode\r\nConcurrent Mode lets React apps be more responsive by rendering component trees without blocking the main thread. It is opt-in and allows React to interrupt a long-running render (for example, rendering a new feed story) to handle a high-priority event (for example, text input or hover). Concurrent Mode also improves the user experience of Suspense by skipping unnecessary loading states on fast connections.\r\n\r\nNote\r\nYou might have previously heard Concurrent Mode being referred to as “async mode”. We’ve changed the name to Concurrent Mode to highlight React’s ability to perform work on different priority levels. This sets it apart from other approaches to async rendering.\r\n\r\n// Two ways to opt in:\r\n\r\n// 1. Part of an app (not final API)\r\n&lt;React.unstable_ConcurrentMode&gt;\r\n  &lt;Something /&gt;\r\n&lt;/React.unstable_ConcurrentMode&gt;\r\n\r\n// 2. Whole app (not final API)\r\nReactDOM.unstable_createRoot(domNode).render(&lt;App /&gt;);\r\nThere is no documentation written for the Concurrent Mode yet. It is important to highlight that the conceptual model will likely be unfamiliar at first. Documenting its benefits, how to use it efficiently, and its pitfalls is a high priority for us, and will be a prerequisite for calling it stable. Until then, Andrew’s talk is the best introduction available.\r\nConcurrent Mode is much less polished than Hooks. Some APIs aren’t properly “wired up” yet and don’t do what they’re expected to. At the time of writing this post, we don’t recommend using it for anything except very early experimentation. We don’t expect many bugs in Concurrent Mode itself, but note that components that produce warnings in &lt;React.StrictMode&gt; may not work correctly. On a separate note, we’ve seen that Concurrent Mode surfaces performance problems in other code which can sometimes be mistaken for performance issues in Concurrent Mode itself. For example, a stray setInterval(fn, 1) call that runs every millisecond would have a worse effect in Concurrent Mode. We plan to publish more guidance about diagnosing and fixing issues like this as part of this release’s documentation.\r\nConcurrent Mode is a big part of our vision for React. For CPU-bound work, it allows non-blocking rendering and keeps your app responsive while rendering complex component trees. That’s demoed in the first part of our JSConf Iceland talk. Concurrent Mode also makes Suspense better. It lets you avoid flickering a loading indicator if the network is fast enough. It’s hard to explain without seeing so Andrew’s talk is the best resource available today. Concurrent Mode relies on a cooperative main thread scheduler, and we are collaborating with the Chrome team to eventually move this functionality into the browser itself.\r\nStatus in React DOM: A very unstable version of Concurrent Mode is available behind an unstable_ prefix in React 16.6 but we don’t recommend trying it unless you’re willing to often run into walls or missing features. The 16.7 alphas include React.ConcurrentMode and ReactDOM.createRoot without an unstable_ prefix, but we’ll likely keep the prefix in 16.7, and only document and mark Concurrent Mode as stable in this future minor release.\r\nStatus in React DOM Server: Concurrent Mode doesn’t directly affect server rendering. It will work with the existing server renderer.\r\nStatus in React Native: The current plan is to delay enabling Concurrent Mode in React Native until React Fabric project is near completion.\r\nRecommendation: If you wish to adopt Concurrent Mode in the future, wrapping some component subtrees in &lt;React.StrictMode&gt; and fixing the resulting warnings is a good first step. In general it’s not expected that legacy code would immediately be compatible. For example, at Facebook we mostly intend to use the Concurrent Mode in the more recently developed codebases, and keep the legacy ones running in the synchronous mode for the near future.\r\nReact 16.x (~mid 2019): The One with Suspense for Data Fetching\r\nAs mentioned earlier, Suspense refers to React’s ability to “suspend” rendering while components are waiting for something, and display a loading indicator. In the already shipped React 16.6, the only supported use case for Suspense is code splitting. In this future minor release, we’d like to provide officially supported ways to use it for data fetching too. We’ll provide a reference implementation of a basic “React Cache” that’s compatible with Suspense, but you can also write your own. Data fetching libraries like Apollo and Relay will be able to integrate with Suspense by following a simple specification that we’ll document.\r\n// React Cache for simple data fetching (not final API)\r\nimport {unstable_createResource} from 'react-cache';\r\n\r\n// Tell React Cache how to fetch your data\r\nconst TodoResource = unstable_createResource(fetchTodo);\r\n\r\nfunction Todo(props) {\r\n  // Suspends until the data is in the cache\r\n  const todo = TodoResource.read(props.id);\r\n  return &lt;li&gt;{todo.title}&lt;/li&gt;;\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    // Same Suspense component you already use for code splitting\r\n    // would be able to handle data fetching too.\r\n    &lt;React.Suspense fallback={&lt;Spinner /&gt;}&gt;\r\n      &lt;ul&gt;\r\n        {/* Siblings fetch in parallel */}\r\n        &lt;Todo id=\"1\" /&gt;\r\n        &lt;Todo id=\"2\" /&gt;\r\n      &lt;/ul&gt;\r\n    &lt;/React.Suspense&gt;\r\n  );\r\n}\r\n\r\n// Other libraries like Apollo and Relay can also\r\n// provide Suspense integrations with similar APIs.\r\nThere is no official documentation for how to fetch data with Suspense yet, but you can find some early information in this talk and this small demo. We’ll write documentation for React Cache (and how to write your own Suspense-compatible library) closer to this React release, but if you’re curious, you can find its very early source code here.\r\nThe low-level Suspense mechanism (suspending rendering and showing a fallback) is expected to be stable even in React 16.6. We’ve used it for code splitting in production for months. However, the higher-level APIs for data fetching are very unstable. React Cache is rapidly changing, and will change at least a few more times. There are some low-level APIs that are missing for a good higher-level API to be possible. We don’t recommend using React Cache anywhere except very early experiments. Note that React Cache itself isn’t strictly tied to React releases, but the current alphas lack basic features as cache invalidation, and you’ll run into a wall very soon. We expect to have something usable with this React release.\r\nEventually we’d like most data fetching to happen through Suspense but it will take a long time until all integrations are ready. In practice we expect it to be adopted very incrementally, and often through layers like Apollo or Relay rather than directly. Missing higher level APIs aren’t the only obstacle — there are also some important UI patterns we don’t support yet such as showing progress indicator outside of the loading view hierarchy. As always, we will communicate our progress in the release notes on this blog.\r\nStatus in React DOM and React Native: Technically, a compatible cache would already work with &lt;React.Suspense&gt; in React 16.6. However, we don’t expect to have a good cache implementation until this React minor release. If you’re feeling adventurous, you can try to write your own cache by looking at the React Cache alphas. However, note that the mental model is sufficiently different that there’s a high risk of misunderstanding it until the docs are ready.\r\nStatus in React DOM Server: Suspense is not available in the server renderer yet. As we mentioned earlier, we’ve started work on a new asynchronous server renderer that will support Suspense, but it’s a large project and will take a good chunk of 2019 to complete.\r\nRecommendation: Wait for this minor React release in order to use Suspense for data fetching. Don’t try to use Suspense features in 16.6 for it; it’s not supported. However, your existing &lt;Suspense&gt; components for code splitting will be able to show loading states for data too when Suspense for Data Fetching becomes officially supported.\r\nOther Projects\r\nModernizing React DOM\r\nWe started an investigation into simplifying and modernizing ReactDOM, with a goal of reduced bundle size and aligning closer with the browser behavior. It is still early to say which specific bullet points will “make it” because the project is in an exploratory phase. We will communicate our progress on that issue.\r\nSuspense for Server Rendering\r\nWe started designing a new server renderer that supports Suspense (including waiting for asynchronous data on the server without double rendering) and progressively loading and hydrating page content in chunks for best user experience. You can watch an overview of its early prototype in this talk. The new server renderer is going to be our major focus in 2019, but it’s too early to say anything about its release schedule. Its development, as always, will happen on GitHub.\r\n\r\nAnd that’s about it! As you can see, there’s a lot here to keep us busy but we expect much progress in the coming months.\r\nWe hope this post gives you an idea of what we’re working on, what you can use today, and what you can expect to use in the future. While there’s a lot of discussion about new features on social media platforms, you won’t miss anything important if you read this blog.\r\nWe’re always open to feedback, and love to hear from you in the RFC repository, the issue tracker, and on Twitter.",
        "title": "React 16.x Roadmap"
      },
      {
        "category_id": 3,
        "comments_link": null,
        "date": "2018-11-13T00:00:00Z",
        "feed_id": 4,
        "feed_title": "React",
        "id": 56,
        "is_read": false,
        "is_read_later": false,
        "link": "https://reactjs.org/blog/2018/11/13/react-conf-recap.html",
        "media_link": null,
        "summary": "This year’s React Conf took place on October 25 and 26 in Henderson, Nevada, where more than 600 attendees gathered to discuss the latest in UI engineering.\r\n\r\n\r\n\r\n\r\n\r\n\r\nSophie Alpert and Dan Abramov kicked off Day 1 with their keynote, React Today and Tomorrow. In the talk, they introduced Hooks, which are a new proposal that adds the ability to access features such as state without writing a JavaScript class. Hooks promise to dramatically simplify the code required for React components and are currently available in a React alpha release.\r\n\r\n\r\n\r\n\r\n\r\n\r\nOn the morning of Day 2, Andrew Clark and Brian Vaughn presented Concurrent Rendering in React. Andrew covered the recently announced React.lazy API for code splitting and previewed two upcoming features: concurrent mode and Suspense. Brian demonstrated how to use React’s new profiler tooling to make apps built in React run faster.\r\n\r\n\r\n\r\n\r\n\r\n\r\nIn the afternoon, Parashuram N spoke in detail about React Native’s New Architecture, a long-term project that the React Native team has been working on over the past year and announced in June. We’re really excited about the potential of this project to improve performance, simplify interoperability with other libraries, and set a strong foundation for the future of React Native.\r\nNow that the conference is over, all 28 conference talks are available to stream online. There are tons of great ones from both days. We can’t wait until next year!",
        "title": "React Conf recap: Hooks, Suspense, and Concurrent Rendering"
      },
      {
        "category_id": 3,
        "comments_link": null,
        "date": "2018-10-23T00:00:00Z",
        "feed_id": 4,
        "feed_title": "React",
        "id": 55,
        "is_read": false,
        "is_read_later": false,
        "link": "https://reactjs.org/blog/2018/10/23/react-v-16-6.html",
        "media_link": null,
        "summary": "Today we’re releasing React 16.6 with a few new convenient features. A form of PureComponent/shouldComponentUpdate for function components, a way to do code splitting using Suspense and an easier way to consume Context from class components.\r\nCheck out the full changelog below.\r\nReact.memo\r\nClass components can bail out from rendering when their input props are the same using PureComponent or shouldComponentUpdate. Now you can do the same with function components by wrapping them in React.memo.\r\nconst MyComponent = React.memo(function MyComponent(props) {\r\n  /* only rerenders if props change */\r\n});\r\nReact.lazy: Code-Splitting with Suspense\r\nYou may have seen Dan’s talk about React Suspense at JSConf Iceland. Now you can use the Suspense component to do code-splitting by wrapping a dynamic import in a call to React.lazy().\r\nimport React, {lazy, Suspense} from 'react';\r\nconst OtherComponent = lazy(() =&gt; import('./OtherComponent'));\r\n\r\nfunction MyComponent() {\r\n  return (\r\n    &lt;Suspense fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;\r\n      &lt;OtherComponent /&gt;\r\n    &lt;/Suspense&gt;\r\n  );\r\n}\r\nThe Suspense component will also allow library authors to start building data fetching with Suspense support in the future.\r\n\r\nNote: This feature is not yet available for server-side rendering. Suspense support will be added in a later release.\r\n\r\nstatic contextType\r\nIn React 16.3 we introduced the official Context API as a replacement to the previous Legacy Context API.\r\nconst MyContext = React.createContext();\r\nWe’ve heard feedback that adopting the new render prop API can be difficult in class components. So we’ve added a convenience API to consume a context value from within a class component.\r\nclass MyClass extends React.Component {\r\n  static contextType = MyContext;\r\n  componentDidMount() {\r\n    let value = this.context;\r\n    /* perform a side-effect at mount using the value of MyContext */\r\n  }\r\n  componentDidUpdate() {\r\n    let value = this.context;\r\n    /* ... */\r\n  }\r\n  componentWillUnmount() {\r\n    let value = this.context;\r\n    /* ... */\r\n  }\r\n  render() {\r\n    let value = this.context;\r\n    /* render something based on the value of MyContext */\r\n  }\r\n}\r\nstatic getDerivedStateFromError()\r\nReact 16 introduced Error Boundaries for handling errors thrown in React renders. We already had the componentDidCatch lifecycle method which gets fired after an error has already happened. It’s great for logging errors to the server. It also lets you show a different UI to the user by calling setState.\r\nBefore that is fired, we render null in place of the tree that threw an error. This sometimes breaks parent components that don’t expect their refs to be empty. It also doesn’t work to recover from errors on the server since the Did lifecycle methods don’t fire during server-side rendering.\r\nWe’re adding another error method that lets you render the fallback UI before the render completes. See the docs for getDerivedStateFromError().\r\n\r\nNote: getDerivedStateFromError() is not yet available for server-side rendering. It is designed to work with server-side rendering in a future release. We’re releasing it early so that you can start preparing to use it.\r\n\r\nDeprecations in StrictMode\r\nIn 16.3 we introduced the StrictMode component. It lets you opt-in to early warnings for patterns that might cause problems in the future.\r\nWe’ve added two more APIs to the list of deprecated APIs in StrictMode. If you don’t use StrictMode you don’t have to worry; these warning won’t fire for you.\r\n\r\nReactDOM.findDOMNode() - This API is often misunderstood and most uses of it are unnecessary. It can also be surprisingly slow in React 16. See the docs for possible upgrade paths.\r\nLegacy Context using contextTypes and getChildContext - Legacy context makes React slightly slower and bigger than it needs to be. That’s why we strongly want to encourage upgrading to the new context API. Hopefully the addition of the contextType API makes this a bit easier.\r\n\r\nIf you’re having trouble upgrading, we’d like to hear your feedback.\r\nInstallation\r\nReact v16.6.0 is available on the npm registry.\r\nTo install React 16 with Yarn, run:\r\nyarn add react@^16.6.0 react-dom@^16.6.0\r\nTo install React 16 with npm, run:\r\nnpm install --save react@^16.6.0 react-dom@^16.6.0\r\nWe also provide UMD builds of React via a CDN:\r\n&lt;script crossorigin src=\"https://unpkg.com/react@16/umd/react.production.min.js\"&gt;&lt;/script&gt;\r\n&lt;script crossorigin src=\"https://unpkg.com/react-dom@16/umd/react-dom.production.min.js\"&gt;&lt;/script&gt;\r\nRefer to the documentation for detailed installation instructions.\r\nChangelog\r\nReact\r\n\r\nAdd React.memo() as an alternative to PureComponent for functions. (@acdlite in #13748)\r\nAdd React.lazy() for code splitting components. (@acdlite in #13885)\r\nReact.StrictMode now warns about legacy context API. (@bvaughn in #13760)\r\nReact.StrictMode now warns about findDOMNode. (@sebmarkbage in #13841)\r\nRename unstable_AsyncMode to unstable_ConcurrentMode. (@trueadm in #13732)\r\nRename unstable_Placeholder to Suspense, and delayMs to maxDuration. (@gaearon in #13799 and @sebmarkbage in #13922)\r\n\r\nReact DOM\r\n\r\nAdd contextType as a more ergonomic way to subscribe to context from a class. (@bvaughn in #13728)\r\nAdd getDerivedStateFromError lifecycle method for catching errors in a future asynchronous server-side renderer. (@bvaughn in #13746)\r\nWarn when &lt;Context&gt; is used instead of &lt;Context.Consumer&gt;. (@trueadm in #13829)\r\nFix gray overlay on iOS Safari. (@philipp-spiess in #13778)\r\nFix a bug caused by overwriting window.event in development. (@sergei-startsev in #13697)\r\n\r\nReact DOM Server\r\n\r\nAdd support for React.memo(). (@alexmckenley in #13855)\r\nAdd support for contextType. (@alexmckenley and @sebmarkbage in #13889)\r\n\r\nScheduler (Experimental)\r\n\r\nRename the package to scheduler. (@gaearon in #13683)\r\nSupport priority levels, continuations, and wrapped callbacks. (@acdlite in #13720 and #13842)\r\nImprove the fallback mechanism in non-DOM environments. (@acdlite in #13740)\r\nSchedule requestAnimationFrame earlier. (@acdlite in #13785)\r\nFix the DOM detection to be more thorough. (@trueadm in #13731)\r\nFix bugs with interaction tracing. (@bvaughn in #13590)\r\nAdd the envify transform to the package. (@mridgway in #13766)\r\n",
        "title": "React v16.6.0: lazy, memo and contextType"
      },
      {
        "category_id": 3,
        "comments_link": "https://blog.jetbrains.com/blog/2019/12/05/welcome-to-space/#comments",
        "date": "2019-12-05T17:42:06Z",
        "feed_id": 3,
        "feed_title": "JetBrains Blog",
        "id": 54,
        "is_read": false,
        "is_read_later": false,
        "link": "https://blog.jetbrains.com/blog/2019/12/05/welcome-to-space/",
        "media_link": null,
        "summary": "Today at KotlinConf, we announced our brand new product Space, and we have already opened the Early Access Program. What is Space Space is an integrated team environment that provides teams and organizations with the tools they need to collaborate … Continue reading →",
        "title": "Welcome to Space!"
      },
      {
        "category_id": 3,
        "comments_link": "https://blog.jetbrains.com/blog/2019/12/05/jetbrains-academy-kotlin/#comments",
        "date": "2019-12-05T09:10:55Z",
        "feed_id": 3,
        "feed_title": "JetBrains Blog",
        "id": 53,
        "is_read": false,
        "is_read_later": false,
        "link": "https://blog.jetbrains.com/blog/2019/12/05/jetbrains-academy-kotlin/",
        "media_link": null,
        "summary": "In February, we launched JetBrains Academy – an educational platform for future professionals. We started with Java, and during these first months, we’ve worked to identify and adopt the learning concepts we believe in. Now it’s time to take it … Continue reading →",
        "title": "JetBrains Academy Welcomes Kotlin On Board!"
      },
      {
        "category_id": 3,
        "comments_link": "https://blog.jetbrains.com/blog/2019/11/29/come-discuss-cloud-native-development-at-aws-reinvent/#respond",
        "date": "2019-11-29T15:40:13Z",
        "feed_id": 3,
        "feed_title": "JetBrains Blog",
        "id": 52,
        "is_read": false,
        "is_read_later": false,
        "link": "https://blog.jetbrains.com/blog/2019/11/29/come-discuss-cloud-native-development-at-aws-reinvent/",
        "media_link": null,
        "summary": "Are you attending AWS re:Invent in Las Vegas on December 2–6? So are we! And we would love to meet up with you! Visit the JetBrains booth in the Venetian Expo Area to meet the team and chat about how … Continue reading →",
        "title": "Come Discuss Cloud-native Development at AWS re:Invent"
      },
      {
        "category_id": 3,
        "comments_link": "https://blog.jetbrains.com/blog/2019/11/22/jetbrains-7th-annual-hackathon/#respond",
        "date": "2019-11-22T14:33:11Z",
        "feed_id": 3,
        "feed_title": "JetBrains Blog",
        "id": 51,
        "is_read": false,
        "is_read_later": false,
        "link": "https://blog.jetbrains.com/blog/2019/11/22/jetbrains-7th-annual-hackathon/",
        "media_link": null,
        "summary": "Arranging a new hackathon The arrangement With the expansion of JetBrains this year and the move into our new offices, we had to push back this year’s hackathon a little bit. But, if anything, this ignited the drive to develop … Continue reading →",
        "title": "JetBrains 7th Annual Hackathon: Arranged Differently"
      },
      {
        "category_id": 3,
        "comments_link": "https://blog.jetbrains.com/blog/2019/11/20/jetbrains-website-is-multilingual/#respond",
        "date": "2019-11-20T10:42:51Z",
        "feed_id": 3,
        "feed_title": "JetBrains Blog",
        "id": 50,
        "is_read": false,
        "is_read_later": false,
        "link": "https://blog.jetbrains.com/blog/2019/11/20/jetbrains-website-is-multilingual/",
        "media_link": null,
        "summary": "Read this post in Chinese (Simplified), French, Japanese, Korean, Russian. As a tech company, we do our best to support the most popular programming languages and technologies. As a global company, we consider it our responsibility to make sure that … Continue reading →",
        "title": "The Official JetBrains Website is Now Multilingual"
      },
      {
        "category_id": 3,
        "comments_link": "https://blog.jetbrains.com/blog/2019/11/13/jetbrains-supports-numfocus-sponsored-open-source-projects/#respond",
        "date": "2019-11-13T12:45:35Z",
        "feed_id": 3,
        "feed_title": "JetBrains Blog",
        "id": 49,
        "is_read": false,
        "is_read_later": false,
        "link": "https://blog.jetbrains.com/blog/2019/11/13/jetbrains-supports-numfocus-sponsored-open-source-projects/",
        "media_link": null,
        "summary": "Open source software is an essential part of most software projects, and it is vital for healthy progress in modern engineering and research. For years, JetBrains has been committed to supporting those who invest their time and expertise to contribute … Continue reading →",
        "title": "JetBrains Supports NumFOCUS-sponsored Open Source Projects"
      },
      {
        "category_id": 3,
        "comments_link": "https://blog.jetbrains.com/blog/2019/10/29/jetbrains-security-bulletin-q3-2019/#respond",
        "date": "2019-10-29T10:19:31Z",
        "feed_id": 3,
        "feed_title": "JetBrains Blog",
        "id": 48,
        "is_read": false,
        "is_read_later": false,
        "link": "https://blog.jetbrains.com/blog/2019/10/29/jetbrains-security-bulletin-q3-2019/",
        "media_link": null,
        "summary": "In the third quarter of 2019, we resolved a series of security issues in our products. Here’s a summary report that contains a description of each issue and the version in which it was resolved. Product Description Severity Resolved in … Continue reading →",
        "title": "JetBrains Security Bulletin Q3 2019"
      },
      {
        "category_id": 3,
        "comments_link": "https://blog.jetbrains.com/blog/2019/10/22/toolbox-app-1-16-open-files-from-github-gitlab-bitbucket/#comments",
        "date": "2019-10-22T12:24:13Z",
        "feed_id": 3,
        "feed_title": "JetBrains Blog",
        "id": 47,
        "is_read": false,
        "is_read_later": false,
        "link": "https://blog.jetbrains.com/blog/2019/10/22/toolbox-app-1-16-open-files-from-github-gitlab-bitbucket/",
        "media_link": null,
        "summary": "TLDR; the JetBrains Toolbox extension now can open a line of code you have selected in your IDE in GitHub, GitLab, and Bitbucket. There are new progress bars in the Toolbox App UI, and several bug fixes too. At JetBrains, … Continue reading →",
        "title": "Toolbox App 1.16 Is Out. Open Files from GitHub, GitLab, and Bitbucket in Your IDE with One Click"
      },
      {
        "category_id": 3,
        "comments_link": "https://blog.jetbrains.com/blog/2019/10/17/edutools-plugin-v3-0/#comments",
        "date": "2019-10-17T14:48:11Z",
        "feed_id": 3,
        "feed_title": "JetBrains Blog",
        "id": 46,
        "is_read": false,
        "is_read_later": false,
        "link": "https://blog.jetbrains.com/blog/2019/10/17/edutools-plugin-v3-0/",
        "media_link": null,
        "summary": "With the 2019.3 Early Access Program in full swing for IntelliJ IDEA, PyCharm, WebStorm, and CLion, we’ve just updated our plugin to v3.0&nbsp;for you to try all the new educational features with the new 2019.3 IDEs. INSTALL EDUTOOLS PLUGIN C/C++ … Continue reading →",
        "title": "EduTools Plugin v3.0: C/C++ Support and Better YAML Configs for Educators, and New Features for Stepik Learners"
      },
      {
        "category_id": 3,
        "comments_link": "https://blog.jetbrains.com/blog/2019/09/26/jetbrains-security-bulletin-q2-2019/#respond",
        "date": "2019-09-26T14:37:16Z",
        "feed_id": 3,
        "feed_title": "JetBrains Blog",
        "id": 45,
        "is_read": false,
        "is_read_later": false,
        "link": "https://blog.jetbrains.com/blog/2019/09/26/jetbrains-security-bulletin-q2-2019/",
        "media_link": null,
        "summary": "This bulletin summarizes the security vulnerabilities detected in JetBrains products and remediated in the second quarter of 2019. Here’s a summary report that comprises the affected product, the description of each issue, its severity, and the product version containing the … Continue reading →",
        "title": "JetBrains Security Bulletin Q2 2019"
      },
      {
        "category_id": 3,
        "comments_link": "https://blog.jetbrains.com/blog/2019/09/06/welcome-edutools-plugin-v2-9/#comments",
        "date": "2019-09-06T15:39:54Z",
        "feed_id": 3,
        "feed_title": "JetBrains Blog",
        "id": 44,
        "is_read": false,
        "is_read_later": false,
        "link": "https://blog.jetbrains.com/blog/2019/09/06/welcome-edutools-plugin-v2-9/",
        "media_link": null,
        "summary": "We’ve just updated our plugin to v2.9 to help you learn and teach different programming languages with more ease! Benefit from the latest code insight improvements for YAML configs, configure placeholder dependencies on placeholder creation, enjoy fewer bugs, and use … Continue reading →",
        "title": "Welcome EduTools Plugin v2.9: Code Insight Improvements for YAML Configs, New Course Creator Features, and More"
      },
      {
        "category_id": 3,
        "comments_link": "https://blog.jetbrains.com/blog/2019/09/03/changes-to-startup-discount-program/#respond",
        "date": "2019-09-03T11:54:22Z",
        "feed_id": 3,
        "feed_title": "JetBrains Blog",
        "id": 43,
        "is_read": false,
        "is_read_later": false,
        "link": "https://blog.jetbrains.com/blog/2019/09/03/changes-to-startup-discount-program/",
        "media_link": null,
        "summary": "If your startup is engaged in the development of a software-based product or service and you are looking for professional tools to take it to the next level, we have a special offer for you. Get a 50% discount on … Continue reading →",
        "title": "Changes to Startup Discount Program"
      },
      {
        "category_id": 3,
        "comments_link": "https://blog.jetbrains.com/blog/2019/08/21/online-learning-how-one-developer-went-from-beginner-to-pro/#comments",
        "date": "2019-08-21T15:56:45Z",
        "feed_id": 3,
        "feed_title": "JetBrains Blog",
        "id": 42,
        "is_read": false,
        "is_read_later": false,
        "link": "https://blog.jetbrains.com/blog/2019/08/21/online-learning-how-one-developer-went-from-beginner-to-pro/",
        "media_link": null,
        "summary": "People get into programming in different ways. Some begin learning it in school, some go to university to study Computer Science, while others get started with online courses – like Zina Smirnova, now a member of the Educational Products development … Continue reading →",
        "title": "Online Learning: How One Developer Went from Beginner to Pro"
      },
      {
        "category_id": 3,
        "comments_link": "https://blog.jetbrains.com/blog/2019/08/20/jetbrains-toolbox-2019-2/#respond",
        "date": "2019-08-20T13:43:20Z",
        "feed_id": 3,
        "feed_title": "JetBrains Blog",
        "id": 41,
        "is_read": false,
        "is_read_later": false,
        "link": "https://blog.jetbrains.com/blog/2019/08/20/jetbrains-toolbox-2019-2/",
        "media_link": null,
        "summary": "We are happy to say that all of the JetBrains desktop tools have been given a huge overhaul! Look through the major IDEs and .NET tools news and update to the newest versions to start enjoying the brand new features … Continue reading →",
        "title": "JetBrains Toolbox 2019.2"
      },
      {
        "category_id": 3,
        "comments_link": "https://blog.jetbrains.com/blog/2019/08/15/8-steps-to-a-successful-user-group/#respond",
        "date": "2019-08-15T13:00:51Z",
        "feed_id": 3,
        "feed_title": "JetBrains Blog",
        "id": 40,
        "is_read": false,
        "is_read_later": false,
        "link": "https://blog.jetbrains.com/blog/2019/08/15/8-steps-to-a-successful-user-group/",
        "media_link": null,
        "summary": "Starting up a user group is not easy. But doing stuff you enjoy with peers who share your passion, keeping your knowledge and skills sharp and up to date by learning new things, and meeting other people in your profession, … Continue reading →",
        "title": "8 Steps to a Successful User Group"
      },
      {
        "category_id": 3,
        "comments_link": "https://blog.jetbrains.com/blog/2019/08/13/developer-ecosystem-survey-2019-raw-data-available/#respond",
        "date": "2019-08-13T14:35:46Z",
        "feed_id": 3,
        "feed_title": "JetBrains Blog",
        "id": 39,
        "is_read": false,
        "is_read_later": false,
        "link": "https://blog.jetbrains.com/blog/2019/08/13/developer-ecosystem-survey-2019-raw-data-available/",
        "media_link": null,
        "summary": "To monitor the rapidly changing State of the Developer Ecosystem, we, at JetBrains every year conduct a comprehensive survey to represent the developers in the world. Earlier this year we presented the results of the research in our Developer Ecosystem … Continue reading →",
        "title": "Developer Ecosystem Survey 2019: Raw Data Available"
      },
      {
        "category_id": 3,
        "comments_link": "https://blog.jetbrains.com/blog/2019/08/01/educational-products-2019-2-are-here/#comments",
        "date": "2019-08-01T13:34:54Z",
        "feed_id": 3,
        "feed_title": "JetBrains Blog",
        "id": 38,
        "is_read": false,
        "is_read_later": false,
        "link": "https://blog.jetbrains.com/blog/2019/08/01/educational-products-2019-2-are-here/",
        "media_link": null,
        "summary": "Please give a warm welcome to Educational Products 2019.2! Enjoy upgraded IDEs for Education and the EduTools plugin v2.8, use the unittest framework for Python courses, and get ready to learn with our brand new courses. IDEs for Education Both … Continue reading →",
        "title": "Educational Products 2019.2 Are Here!"
      },
      {
        "category_id": 3,
        "comments_link": "https://blog.jetbrains.com/blog/2019/07/30/data-science-survey-2018-raw-data-available/#comments",
        "date": "2019-07-30T09:53:43Z",
        "feed_id": 3,
        "feed_title": "JetBrains Blog",
        "id": 37,
        "is_read": false,
        "is_read_later": false,
        "link": "https://blog.jetbrains.com/blog/2019/07/30/data-science-survey-2018-raw-data-available/",
        "media_link": null,
        "summary": "In the spring of 2018, we conducted the Data Science survey where we asked people from all over the world working with data to tell us about their work, tools, and practices. We distributed this survey via targeted ads on … Continue reading →",
        "title": "Data Science Survey 2018: Raw Data Available"
      },
      {
        "category_id": 3,
        "comments_link": "https://blog.jetbrains.com/blog/2019/07/23/an-interview-with-jakub-chrzanowski-ignore-plugin-author/#respond",
        "date": "2019-07-23T14:56:15Z",
        "feed_id": 3,
        "feed_title": "JetBrains Blog",
        "id": 36,
        "is_read": false,
        "is_read_later": false,
        "link": "https://blog.jetbrains.com/blog/2019/07/23/an-interview-with-jakub-chrzanowski-ignore-plugin-author/",
        "media_link": null,
        "summary": "In this interview, we speak with Jakub Chrzanowski (@hsz @hszanowski), the author of the .ignore plugin for the IntelliJ-based IDEs. This plugin lets you mark matched .ignore files in project view, assists with editing them, and helps you generate ignore … Continue reading →",
        "title": "An Interview with Jakub Chrzanowski, .ignore Plugin Author"
      },
      {
        "category_id": 3,
        "comments_link": "https://blog.jetbrains.com/blog/2019/07/16/welcome-edutools-plugin-v2-7/#respond",
        "date": "2019-07-16T15:51:47Z",
        "feed_id": 3,
        "feed_title": "JetBrains Blog",
        "id": 35,
        "is_read": false,
        "is_read_later": false,
        "link": "https://blog.jetbrains.com/blog/2019/07/16/welcome-edutools-plugin-v2-7/",
        "media_link": null,
        "summary": "Our newest plugin update to v2.7 comes with YAML support for course creators, multiple-choice task support, new courses, and 2019.1.2 IDE builds for PyCharm Edu and IntelliJ IDEA Edu. YAML support Course creators, welcome a completely reworked solution for course … Continue reading →",
        "title": "Welcome EduTools plugin v2.7: YAML support, Algorithmic Toolbox by Coursera, and more"
      },
      {
        "category_id": 2,
        "comments_link": null,
        "date": "2019-12-09T05:00:00Z",
        "feed_id": 2,
        "feed_title": "xkcd",
        "id": 34,
        "is_read": false,
        "is_read_later": false,
        "link": "https://xkcd.com/2239/",
        "media_link": null,
        "summary": "",
        "title": "Data Error"
      },
      {
        "category_id": 2,
        "comments_link": null,
        "date": "2019-12-06T05:00:00Z",
        "feed_id": 2,
        "feed_title": "xkcd",
        "id": 33,
        "is_read": false,
        "is_read_later": false,
        "link": "https://xkcd.com/2238/",
        "media_link": null,
        "summary": "",
        "title": "Flu Shot"
      },
      {
        "category_id": 2,
        "comments_link": null,
        "date": "2019-12-04T05:00:00Z",
        "feed_id": 2,
        "feed_title": "xkcd",
        "id": 32,
        "is_read": false,
        "is_read_later": false,
        "link": "https://xkcd.com/2237/",
        "media_link": null,
        "summary": "",
        "title": "AI Hiring Algorithm"
      },
      {
        "category_id": 2,
        "comments_link": null,
        "date": "2019-12-02T05:00:00Z",
        "feed_id": 2,
        "feed_title": "xkcd",
        "id": 31,
        "is_read": false,
        "is_read_later": false,
        "link": "https://xkcd.com/2236/",
        "media_link": null,
        "summary": "",
        "title": "Is it Christmas?"
      },
      {
        "category_id": 1,
        "comments_link": "https://news.ycombinator.com/item?id=21746739",
        "date": "2019-12-09T21:22:57Z",
        "feed_id": 1,
        "feed_title": "Hacker News",
        "id": 30,
        "is_read": false,
        "is_read_later": false,
        "link": "https://en.wikipedia.org/wiki/Transputer",
        "media_link": null,
        "summary": "Comments",
        "title": "Transputer"
      },
      {
        "category_id": 1,
        "comments_link": "https://news.ycombinator.com/item?id=21745731",
        "date": "2019-12-09T19:46:52Z",
        "feed_id": 1,
        "feed_title": "Hacker News",
        "id": 29,
        "is_read": false,
        "is_read_later": false,
        "link": "https://blog.cynthia.re/post/nintendo-switch-ethernet-switch",
        "media_link": null,
        "summary": "Comments",
        "title": "The Nintendo Switch Switch"
      },
      {
        "category_id": 1,
        "comments_link": "https://news.ycombinator.com/item?id=21747217",
        "date": "2019-12-09T22:14:34Z",
        "feed_id": 1,
        "feed_title": "Hacker News",
        "id": 28,
        "is_read": false,
        "is_read_later": false,
        "link": "https://www.theinformation.com/articles/apples-ad-targeting-crackdown-shakes-up-ad-market?pu=hackernews4qs3ac&utm_source=hackernews&utm_medium=unlocka",
        "media_link": null,
        "summary": "Comments",
        "title": "Apple’s Ad-Targeting Crackdown Shakes Up Ad Market"
      },
      {
        "category_id": 1,
        "comments_link": "https://news.ycombinator.com/item?id=21743424",
        "date": "2019-12-09T15:30:35Z",
        "feed_id": 1,
        "feed_title": "Hacker News",
        "id": 27,
        "is_read": false,
        "is_read_later": false,
        "link": "https://randomascii.wordpress.com/2019/12/08/on2-again-now-in-wmi/",
        "media_link": null,
        "summary": "Comments",
        "title": "O(n^2), again, now in Windows Management Instrumentation"
      },
      {
        "category_id": 1,
        "comments_link": "https://news.ycombinator.com/item?id=21738802",
        "date": "2019-12-08T22:20:15Z",
        "feed_id": 1,
        "feed_title": "Hacker News",
        "id": 26,
        "is_read": false,
        "is_read_later": false,
        "link": "https://www.evanjones.ca/ordered-vs-unordered-indexes.html",
        "media_link": null,
        "summary": "Comments",
        "title": "Why databases use ordered indexes but programming uses hash tables"
      },
      {
        "category_id": 1,
        "comments_link": "https://news.ycombinator.com/item?id=21747446",
        "date": "2019-12-09T22:41:20Z",
        "feed_id": 1,
        "feed_title": "Hacker News",
        "id": 25,
        "is_read": false,
        "is_read_later": false,
        "link": "https://hbr.org/2017/09/the-grocery-industry-confronts-a-new-problem-only-10-of-americans-love-cooking",
        "media_link": null,
        "summary": "Comments",
        "title": "Grocery Industry Confronts a Problem: Only 10% of Americans Love Cooking (2017)"
      },
      {
        "category_id": 1,
        "comments_link": "https://news.ycombinator.com/item?id=21742739",
        "date": "2019-12-09T14:11:22Z",
        "feed_id": 1,
        "feed_title": "Hacker News",
        "id": 24,
        "is_read": false,
        "is_read_later": false,
        "link": "https://www.sametab.com/blog/operations-and-internal-communication-strategies-for-effective-ceos",
        "media_link": null,
        "summary": "Comments",
        "title": "Operations for Effective CEOs"
      },
      {
        "category_id": 1,
        "comments_link": "https://news.ycombinator.com/item?id=21744274",
        "date": "2019-12-09T17:10:11Z",
        "feed_id": 1,
        "feed_title": "Hacker News",
        "id": 23,
        "is_read": false,
        "is_read_later": false,
        "link": "https://signal.org/blog/signal-private-group-system/",
        "media_link": null,
        "summary": "Comments",
        "title": "Technology Preview: Signal Private Group System"
      },
      {
        "category_id": 1,
        "comments_link": "https://news.ycombinator.com/item?id=21737697",
        "date": "2019-12-08T19:31:16Z",
        "feed_id": 1,
        "feed_title": "Hacker News",
        "id": 22,
        "is_read": false,
        "is_read_later": false,
        "link": "https://www.nytimes.com/2019/12/08/obituaries/caroll-spinney-dead.html",
        "media_link": null,
        "summary": "Comments",
        "title": "Caroll Spinney has died"
      },
      {
        "category_id": 1,
        "comments_link": "https://news.ycombinator.com/item?id=21747175",
        "date": "2019-12-09T22:10:43Z",
        "feed_id": 1,
        "feed_title": "Hacker News",
        "id": 21,
        "is_read": false,
        "is_read_later": false,
        "link": "https://blog.letsenhance.io/all/2019/07/09/computational-photographyfrom-selfies-to-black-holes/",
        "media_link": null,
        "summary": "Comments",
        "title": "Computational photography from selfies to black holes"
      },
      {
        "category_id": 1,
        "comments_link": "https://news.ycombinator.com/item?id=21743302",
        "date": "2019-12-09T15:17:05Z",
        "feed_id": 1,
        "feed_title": "Hacker News",
        "id": 20,
        "is_read": false,
        "is_read_later": false,
        "link": "https://news.ycombinator.com/item?id=21743302",
        "media_link": null,
        "summary": "Comments",
        "title": "Ask HN: We are shutting down our startup, I get our code. What now?"
      },
      {
        "category_id": 1,
        "comments_link": "https://news.ycombinator.com/item?id=21743847",
        "date": "2019-12-09T16:20:49Z",
        "feed_id": 1,
        "feed_title": "Hacker News",
        "id": 19,
        "is_read": false,
        "is_read_later": false,
        "link": "https://www.quantamagazine.org/how-simple-rules-bootstrap-the-laws-of-physics-20191209/",
        "media_link": null,
        "summary": "Comments",
        "title": "Simple Rules ‘Bootstrap’ the Laws of Physics"
      },
      {
        "category_id": 1,
        "comments_link": "https://news.ycombinator.com/item?id=21729056",
        "date": "2019-12-07T07:51:57Z",
        "feed_id": 1,
        "feed_title": "Hacker News",
        "id": 18,
        "is_read": false,
        "is_read_later": false,
        "link": "http://www.2arms1head.com/",
        "media_link": null,
        "summary": "Comments",
        "title": "Two Arms and a Head (2011)"
      },
      {
        "category_id": 1,
        "comments_link": "https://news.ycombinator.com/item?id=21747710",
        "date": "2019-12-09T23:13:16Z",
        "feed_id": 1,
        "feed_title": "Hacker News",
        "id": 17,
        "is_read": false,
        "is_read_later": false,
        "link": "https://www.bloomberg.com/news/articles/2019-12-09/vietnam-s-richest-man-bets-2-billion-to-sell-cars-to-americans",
        "media_link": null,
        "summary": "Comments",
        "title": "Vietnam’s Richest Man Bets $2B to Sell Cars to Americans"
      },
      {
        "category_id": 1,
        "comments_link": "https://news.ycombinator.com/item?id=21748589",
        "date": "2019-12-10T01:03:09Z",
        "feed_id": 1,
        "feed_title": "Hacker News",
        "id": 16,
        "is_read": false,
        "is_read_later": false,
        "link": "https://effectiviology.com/jumping-to-conclusions/",
        "media_link": null,
        "summary": "Comments",
        "title": "Jumping to Conclusions: When People Decide Based on Insufficient Information"
      },
      {
        "category_id": 1,
        "comments_link": "https://news.ycombinator.com/item?id=21743696",
        "date": "2019-12-09T15:59:55Z",
        "feed_id": 1,
        "feed_title": "Hacker News",
        "id": 15,
        "is_read": false,
        "is_read_later": false,
        "link": "https://web.archive.org/web/20030812081713/http://klausler.com/cnotes.txt",
        "media_link": null,
        "summary": "Comments",
        "title": "Some things every C programmer should know about C (2002)"
      },
      {
        "category_id": 1,
        "comments_link": "https://news.ycombinator.com/item?id=21729597",
        "date": "2019-12-07T10:55:30Z",
        "feed_id": 1,
        "feed_title": "Hacker News",
        "id": 14,
        "is_read": false,
        "is_read_later": false,
        "link": "https://emacsair.me/2017/09/01/magit-walk-through/",
        "media_link": null,
        "summary": "Comments",
        "title": "A walk through the Magit interface"
      },
      {
        "category_id": 1,
        "comments_link": "https://news.ycombinator.com/item?id=21743100",
        "date": "2019-12-09T14:53:02Z",
        "feed_id": 1,
        "feed_title": "Hacker News",
        "id": 13,
        "is_read": false,
        "is_read_later": false,
        "link": "https://queue.acm.org/detail.cfm?id=3341158",
        "media_link": null,
        "summary": "Comments",
        "title": "Must and Must Not: On writing documentation"
      },
      {
        "category_id": 1,
        "comments_link": "https://news.ycombinator.com/item?id=21745704",
        "date": "2019-12-09T19:43:30Z",
        "feed_id": 1,
        "feed_title": "Hacker News",
        "id": 12,
        "is_read": false,
        "is_read_later": false,
        "link": "https://www.wsj.com/articles/american-factories-demand-white-collar-education-for-blue-collar-work-11575907185",
        "media_link": null,
        "summary": "Comments",
        "title": "College-educated workers are taking over the American factory floor"
      },
      {
        "category_id": 1,
        "comments_link": "https://news.ycombinator.com/item?id=21742110",
        "date": "2019-12-09T12:45:13Z",
        "feed_id": 1,
        "feed_title": "Hacker News",
        "id": 11,
        "is_read": false,
        "is_read_later": false,
        "link": "https://johnaugust.com/2018/missing-movies",
        "media_link": null,
        "summary": "Comments",
        "title": "Missing Movies (2018)"
      },
      {
        "category_id": 1,
        "comments_link": "https://news.ycombinator.com/item?id=21742731",
        "date": "2019-12-09T14:10:09Z",
        "feed_id": 1,
        "feed_title": "Hacker News",
        "id": 10,
        "is_read": false,
        "is_read_later": false,
        "link": "https://www.nytimes.com/2019/12/09/business/paul-a-volcker-dead.html",
        "media_link": null,
        "summary": "Comments",
        "title": "Paul Volcker has died"
      },
      {
        "category_id": 1,
        "comments_link": "https://news.ycombinator.com/item?id=21742702",
        "date": "2019-12-09T14:05:49Z",
        "feed_id": 1,
        "feed_title": "Hacker News",
        "id": 9,
        "is_read": false,
        "is_read_later": false,
        "link": "https://www.bloomberg.com/news/articles/2019-12-08/repo-blowup-was-fueled-by-big-banks-and-hedge-funds-bis-says",
        "media_link": null,
        "summary": "Comments",
        "title": "Repo Blowup Was Fueled by Big Banks and Hedge Funds, BIS Says"
      },
      {
        "category_id": 1,
        "comments_link": "https://news.ycombinator.com/item?id=21742978",
        "date": "2019-12-09T14:38:39Z",
        "feed_id": 1,
        "feed_title": "Hacker News",
        "id": 8,
        "is_read": false,
        "is_read_later": false,
        "link": "https://www.jefftk.com/p/long-bets-by-confidence-level",
        "media_link": null,
        "summary": "Comments",
        "title": "Long Bets by Confidence Level"
      },
      {
        "category_id": 1,
        "comments_link": "https://news.ycombinator.com/item?id=21743513",
        "date": "2019-12-09T15:41:11Z",
        "feed_id": 1,
        "feed_title": "Hacker News",
        "id": 7,
        "is_read": false,
        "is_read_later": false,
        "link": "https://jamesmunns.com/blog/fmt-unreasonably-expensive/",
        "media_link": null,
        "summary": "Comments",
        "title": "Formatting Is Unreasonably Expensive for Embedded Rust"
      },
      {
        "category_id": 1,
        "comments_link": "https://news.ycombinator.com/item?id=21742222",
        "date": "2019-12-09T13:06:35Z",
        "feed_id": 1,
        "feed_title": "Hacker News",
        "id": 6,
        "is_read": false,
        "is_read_later": false,
        "link": "https://github.com/infostreams/db",
        "media_link": null,
        "summary": "Comments",
        "title": "Show HN: Version Control for Databases"
      },
      {
        "category_id": 1,
        "comments_link": "https://news.ycombinator.com/item?id=21744785",
        "date": "2019-12-09T18:00:56Z",
        "feed_id": 1,
        "feed_title": "Hacker News",
        "id": 5,
        "is_read": false,
        "is_read_later": false,
        "link": "http://scholar.harvard.edu/files/mickens/files/towashitallaway.pdf",
        "media_link": null,
        "summary": "Comments",
        "title": "To Wash It All Away (2014) [pdf]"
      },
      {
        "category_id": 1,
        "comments_link": "https://news.ycombinator.com/item?id=21745124",
        "date": "2019-12-09T18:41:48Z",
        "feed_id": 1,
        "feed_title": "Hacker News",
        "id": 4,
        "is_read": false,
        "is_read_later": false,
        "link": "https://www.theatlantic.com/ideas/archive/2019/11/why-child-care-so-expensive/602599",
        "media_link": null,
        "summary": "Comments",
        "title": "Why Child Care Is So Expensive"
      },
      {
        "category_id": 1,
        "comments_link": "https://news.ycombinator.com/item?id=21744772",
        "date": "2019-12-09T17:59:35Z",
        "feed_id": 1,
        "feed_title": "Hacker News",
        "id": 3,
        "is_read": false,
        "is_read_later": true,
        "link": "https://fivebooks.com/best-books/science-2019-barbara-kiser/",
        "media_link": null,
        "summary": "Comments",
        "title": "Science Books of 2019"
      },
      {
        "category_id": 1,
        "comments_link": "https://news.ycombinator.com/item?id=21743129",
        "date": "2019-12-09T14:56:35Z",
        "feed_id": 1,
        "feed_title": "Hacker News",
        "id": 2,
        "is_read": false,
        "is_read_later": true,
        "link": "https://www.wsj.com/articles/five-cities-account-for-vast-majority-of-growth-in-tech-jobs-study-finds-11575867660",
        "media_link": null,
        "summary": "Comments",
        "title": "Five cities account for vast majority of growth in U.S. tech jobs: study"
      },
      {
        "category_id": 1,
        "comments_link": "https://news.ycombinator.com/item?id=21744688",
        "date": "2019-12-09T17:50:17Z",
        "feed_id": 1,
        "feed_title": "Hacker News",
        "id": 1,
        "is_read": false,
        "is_read_later": true,
        "link": "https://savo.la/introduction-to-gate.html",
        "media_link": null,
        "summary": "Comments",
        "title": "Introduction to Gate"
      }
    ],
    "status": "ok"
  }
]
